 
&НаСервере
&Перед("ПодготовитьФормуНаСервере")
Процедура АБК_ПодготовитьФормуНаСервере()          
	Если НЕ ДобавленыРеквизитыИФО Тогда
		ТипИФО = РасчетыСПодотчетнымиЛицами_ИФО.ОписаниеТипаИФО();
		
		ДобРеквизиты = Новый Массив;
		ДобРеквизиты.Добавить(Новый РеквизитФормы("ИФО",ТипИФО,"ДенежныеОбязательстваПоОснованию","ИФО"));
		ДобРеквизиты.Добавить(Новый РеквизитФормы("ИФО",ТипИФО,"ДенежныеОбязательстваПоОтчету","ИФО"));
		ДобРеквизиты.Добавить(Новый РеквизитФормы("ИФО",ТипИФО,"Авансы","ИФО"));
		ИзменитьРеквизиты(ДобРеквизиты);   
		
		ДобавленыРеквизитыИФО = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьПоДокументуОснованиюНаСервере")
Процедура АБК_ЗаполнитьПоДокументуОснованиюНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
    #Вставка     
	ПроставитьИФО_Пооснованию();
	#КонецВставки
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ОбновитьТаблицуАвансов")
Процедура АБК_ОбновитьТаблицуАвансов()

	Авансы.Очистить();

	ДокументыАванса = Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса");

	Если ДокументыАванса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументыАванса" , Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса"));
	Запрос.УстановитьПараметр("Контрагент" , ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Контрагент"));
	Запрос.УстановитьПараметр("ВалютаРегУчета" , БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета());
	Запрос.УстановитьПараметр("Счет208" , БухгалтерскийУчетПовтИсп.ПолучитьМассивСчетов("208.00"));

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ПодразделениеДт КАК Подразделение,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КФО КАК КФО, 
	#Вставка     
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО КАК ИФО, 
	#КонецВставки
	|	ЖурналПроводокЕПСБУДвиженияССубконто.СчетДт КАК Счет,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КПСДт КАК КПС,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА &ВалютаРегУчета
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК СуммаРасчетов,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Сумма КАК РублевыйЭквивалент
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			СчетДт В (&Счет208)
	|				И Регистратор В (&ДокументыАванса)
	|				И СубконтоДт1 = &Контрагент,
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто";

	Авансы.Загрузить(Запрос.Выполнить().Выгрузить());

	ДатаДокумента = ?(ЗначениеЗаполнено(Объект.ДатаУтверждения), Объект.ДатаУтверждения,
	?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	РегистрыСведений.СоответствиеКПСПриПереносеОстатков.ЗаменитьКПСвТаблицахСУчетомПереносаОстатковПоКПС(
	ДатаДокумента, Авансы);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ОбновитьТаблицуДенежныеОбязательства")
Процедура АБК_ОбновитьТаблицуДенежныеОбязательства(ТолькоРасчет)

	ОстаткиАвансов = Авансы.Выгрузить();
    #Вставка     
	ТипИФО = РасчетыСПодотчетнымиЛицами_ИФО.ОписаниеТипаИФО();
	#КонецВставки
	Счета208 = БухгалтерскиеОперации.СчетПоКоду("208.00", Объект.Дата);
	Счет50211 = БухгалтерскиеОперации.СчетПоКоду("502.11", Объект.Дата);
	Счет50212 = БухгалтерскиеОперации.СчетПоКоду("502.12", Объект.Дата);

	ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2, ДопустимыйЗнак.Любой));

	ТаблицаИзрасходовано = Объект.Суточные.Выгрузить();
	ТаблицаИзрасходовано.Очистить();

	ТаблицаИзрасходовано.Колонки.Добавить("РасчетыВВалюте", Новый ОписаниеТипов("Булево"));
	ТаблицаИзрасходовано.Колонки.Добавить("РублевыйЭквивалент", ОписаниеТипаСуммы);
	ТаблицаИзрасходовано.Колонки.Добавить("СуммаРасчетов", ОписаниеТипаСуммы);
	ТаблицаИзрасходовано.Колонки.Добавить("СчетКредита", Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	#Вставка     
	ТаблицаИзрасходовано.Колонки.Добавить("ИФО", ТипИФО);
	#КонецВставки

	ТипыПриходныхДокументов = Новый Массив;
	ТипыПриходныхДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеМЗ"));
	ТипыПриходныхДокументов.Добавить(Тип("ДокументСсылка.ПоступлениеОС"));
	ТипыПриходныхДокументов.Добавить(Тип("ДокументСсылка.ПриходныйОрдерФондовый"));

	ТаблицаПриходныеДокументы = Новый ТаблицаЗначений;
	ТаблицаПриходныеДокументы.Колонки.Добавить("ПриходныйДокумент", Новый ОписаниеТипов(ТипыПриходныхДокументов));
	ТаблицаПриходныеДокументы.Колонки.Добавить("КЭК", Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));

	ПриходныеДокументы = Новый Массив;

	Для Каждого СтрокаТЧ Из Объект.ТоварыРаботыУслуги Цикл
		Если НЕ СтрокаТЧ.ПоДокументу
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ПриходныйДокумент)
			ИЛИ СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу") Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТаблицаПриходныеДокументы.Добавить(), СтрокаТЧ);
		ПриходныеДокументы.Добавить(СтрокаТЧ.ПриходныйДокумент);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПриходныеДокументы.ПриходныйДокумент КАК ПриходныйДокумент,
	|	ТаблицаПриходныеДокументы.КЭК КАК КЭК
	|ПОМЕСТИТЬ ТаблицаПриходныеДокументы
	|ИЗ
	|	&ТаблицаПриходныеДокументы КАК ТаблицаПриходныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУДвиженияССубконто.КЭКДт) КАК КЭК
	|ПОМЕСТИТЬ ПриходныеДокументыСЕдинственнымКЭК
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			СчетКт В (&Счет208)
	|				И СчетДт В (&СчетаМатериалы)
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						ТаблицаПриходныеДокументы.ПриходныйДокумент
	|					ИЗ
	|						ТаблицаПриходныеДокументы),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЖурналПроводокЕПСБУДвиженияССубконто.КЭКДт) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ПодразделениеДт КАК Подразделение,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.СчетКт КАК СчетКредита,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КФО КАК КФО,
	#Вставка     
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО КАК ИФО,
	#КонецВставки
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КПСКт КАК КПС,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СчетДт В (&СчетаМатериалы)
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.КЭКДт
	|		КОГДА НЕ ПриходныеДокументыСЕдинственнымКЭК.КЭК ЕСТЬ NULL
	|			ТОГДА ПриходныеДокументыСЕдинственнымКЭК.КЭК
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СчетКт = &Счет20834
	|				И ТаблицаПриходныеДокументы.КЭК <> ЗНАЧЕНИЕ(Справочник.КОСГУ.ПустаяСсылка)
	|			ТОГДА ТаблицаПриходныеДокументы.КЭК
	|		ИНАЧЕ СоответствияАналитическихСчетовКЭК.КЭК
	|	КОНЕЦ КАК КЭК,
	|	ЕСТЬNULL(ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт, &ВалютаРегламентированногоУчета) КАК Валюта,
	|	НЕ(ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|			ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРегламентированногоУчета) КАК РасчетыВВалюте,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Сумма КАК РублевыйЭквивалент,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРегламентированногоУчета
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаКт
	|	КОНЕЦ КАК СуммаРасчетов
	|ИЗ
	|	ТаблицаПриходныеДокументы КАК ТаблицаПриходныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|				,
	|				,
	|				СчетКт В (&Счет208)
	|					И СубконтоКт1 = &Контрагент
	|					И Регистратор В (&ПриходныеДокументы),
	|				,
	|				) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|		ПО ТаблицаПриходныеДокументы.ПриходныйДокумент = ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАналитическихСчетовКЭК КАК СоответствияАналитическихСчетовКЭК
	|		ПО (ЖурналПроводокЕПСБУДвиженияССубконто.СчетКт = СоответствияАналитическихСчетовКЭК.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПриходныеДокументыСЕдинственнымКЭК КАК ПриходныеДокументыСЕдинственнымКЭК
	|		ПО ТаблицаПриходныеДокументы.ПриходныйДокумент = ПриходныеДокументыСЕдинственнымКЭК.Регистратор";

	Запрос.УстановитьПараметр("Счет208", БухгалтерскийУчет.СписокСчетов("208.00", Объект.Дата, , Объект.Организация));
	Запрос.УстановитьПараметр("Счет20834", БухгалтерскийУчет.СчетПоКоду("208.34", Объект.Дата, Объект.Организация));
	Запрос.УстановитьПараметр("СчетаМатериалы", БухгалтерскийУчет.СписокСчетов("105.00, 106.2П, 106.3П", Объект.Дата, , Объект.Организация));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Контрагент"));
	Запрос.УстановитьПараметр("ПриходныеДокументы", ПриходныеДокументы);
	Запрос.УстановитьПараметр("ТаблицаПриходныеДокументы", ТаблицаПриходныеДокументы);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаИзрасходовано.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Суточные");
	МассивТЧ.Добавить("Проезд");
	МассивТЧ.Добавить("Проживание");
	МассивТЧ.Добавить("ПрочиеРасходы");
	МассивТЧ.Добавить("ТоварыРаботыУслуги");

	Для Каждого ТЧ Из МассивТЧ Цикл 
		#Вставка
		ТЧ_ИФО = РасчетыСПодотчетнымиЛицами_ИФО.ПолучитьИмяРеквизитаДопКолонки(ЭтаФорма,ТЧ,"ИФО");
		#КонецВставки
		Для Каждого СтрокаТЧ Из Объект[ТЧ] Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "СпособОбеспечения")
				И СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу")
				И СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВозмещениеПоФакту") Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "ПоДокументу")
				И СтрокаТЧ.ПоДокументу Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ТаблицаИзрасходовано.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.СчетКредита = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
			НоваяСтрока.КЭК, Счета208, , Объект.Дата, Объект.Организация, Объект.ИФО);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям")
				И (БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(НоваяСтрока.СчетКредита).УчетПоПодразделениям
				ИЛИ БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет50211).УчетПоПодразделениям
				ИЛИ БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет50212).УчетПоПодразделениям) Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Подразделение) Тогда
					НоваяСтрока.Подразделение = Объект.Подразделение;
				КонецЕсли;
			Иначе
				НоваяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.Подразделения.ПустаяСсылка");
			КонецЕсли;
			НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаПринято;
			Если НоваяСтрока.Валюта = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета()
				ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
				НоваяСтрока.РасчетыВВалюте = Ложь;
				НоваяСтрока.РублевыйЭквивалент = НоваяСтрока.СуммаПринято;
			Иначе
				НоваяСтрока.РасчетыВВалюте = Истина;
				НоваяСтрока.РублевыйЭквивалент = Документы.ОтчетОРасходахПодотчетногоЛица.СуммаВРублевомЭквиваленте(
				НоваяСтрока.СуммаПринято, НоваяСтрока.Валюта, Объект.КурсыВалют);
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "СуммаНДС")
				И НЕ Объект.СуммаВключаетНДС Тогда
				НоваяСтрока.СуммаРасчетов = НоваяСтрока.СуммаРасчетов + СтрокаТЧ.СуммаНДС;
				НоваяСтрока.РублевыйЭквивалент = НоваяСтрока.РублевыйЭквивалент + СтрокаТЧ.СуммаНДС;
			КонецЕсли;
			#Вставка     
			Если ЗначениеЗаполнено(ТЧ_ИФО) Тогда 
				НоваяСтрока.ИФО = СтрокаТЧ[ТЧ_ИФО];	
			КонецЕсли;
			#КонецВставки
		КонецЦикла;
	КонецЦикла;

	ТаблицаИзрасходовано.Колонки.Добавить("СуммаРубПоКурсуАванса", ОписаниеТипаСуммы);

	ТаблицаРасчетов = ТаблицаИзрасходовано.Скопировать();
	ТаблицаРасчетов.Очистить();

	Для Каждого СтрокаДокумента Из ТаблицаИзрасходовано Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаРасчетов;

		Если ОстаткиАвансов.Количество() > 0 Тогда

			Отбор = Новый Структура;
			Отбор.Вставить("КФО", СтрокаДокумента.КФО);
			Отбор.Вставить("Счет", СтрокаДокумента.СчетКредита);
			Отбор.Вставить("КПС", СтрокаДокумента.КПС);
            #Вставка     
			Отбор.Вставить("ИФО", СтрокаДокумента.ИФО);
			#КонецВставки
			СвойстваСчетаРасчетов = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.СчетКредита);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") И СвойстваСчетаРасчетов.Валютный Тогда
				Отбор.Вставить("Валюта", СтрокаДокумента.Валюта);
			ИначеЕсли СтрокаДокумента.РасчетыВВалюте Тогда
				Отбор.Вставить("Валюта", СтрокаДокумента.Валюта);
			КонецЕсли;

			Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям") И СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
				Отбор.Вставить("Подразделение", СтрокаДокумента.Подразделение);
			КонецЕсли;

			НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

			ДобавитьСтрокиЗачтенныхАвансов(
			ТаблицаРасчетов,
			НераспределенныйОстаток,
			НайденныеОстаткиАвансов,
			СтрокаДокумента);

		КонецЕсли;

		// Сумму расчетов, оставшуюся после зачета всех авансов, добавляем отдельной строкой.
		ДобавитьСтрокуЗадолженности(
		ТаблицаРасчетов,
		НераспределенныйОстаток,
		СтрокаДокумента);

	КонецЦикла;
    #Удаление
	КолонкиГруппировки = "КФО, КПС, КЭК, КодЦели, КодМероприятия, ДопКлассификация";
	#КонецУдаления
	#Вставка     
	КолонкиГруппировки = "КФО, КПС, КЭК, КодЦели, КодМероприятия, ДопКлассификация, ИФО";
	#КонецВставки
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям")
		И (БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет50211).УчетПоПодразделениям
		ИЛИ БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(Счет50212).УчетПоПодразделениям)Тогда
		КолонкиГруппировки = КолонкиГруппировки + ", Подразделение";
	КонецЕсли;
	КолонкиСуммирования = "СуммаРубПоКурсуАванса";
	ТаблицаРасчетов.Свернуть(КолонкиГруппировки, КолонкиСуммирования);

	ТекущаяТаблица = Объект.ДенежныеОбязательства.Выгрузить();
    #Вставка  
	ТЧ_ИФО = РасчетыСПодотчетнымиЛицами_ИФО.ПолучитьИмяРеквизитаДопКолонки(ЭтаФорма,"ДенежныеОбязательства","ИФО");
	Если ЗначениеЗаполнено(ТЧ_ИФО) Тогда 
		ТекущаяТаблица.Колонки.Добавить("ИФО",ТипИФО);
		Для Каждого СтрокаДО Из ТекущаяТаблица Цикл 
			СтрокаДО.ИФО = СтрокаДО[ТЧ_ИФО];	
		КонецЦикла;
	КонецЕсли;
	#КонецВставки
	НоваяТаблица = ТекущаяТаблица.Скопировать();
	НоваяТаблица.Очистить();

	Для Каждого СтрокаТЧ Из ДенежныеОбязательстваПоОснованию Цикл 
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.СуммаПоОснованию = СтрокаТЧ.Сумма;
		НоваяСтрока.СуммаБОПоОснованию = СтрокаТЧ.СуммаБО;
	КонецЦикла;

	ДенежныеОбязательстваПоОтчету.Очистить();

	Для Каждого СтрокаТЧ Из ТаблицаРасчетов Цикл
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.СуммаПоОтчету = СтрокаТЧ.СуммаРубПоКурсуАванса;

		НоваяСтрокаДО = ДенежныеОбязательстваПоОтчету.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДО, СтрокаТЧ);
		НоваяСтрокаДО.Сумма = СтрокаТЧ.СуммаРубПоКурсуАванса;
	КонецЦикла;

	НоваяТаблица.Свернуть(КолонкиГруппировки,
	"СуммаПоОснованию, СуммаБОПоОснованию, СуммаПоОтчету");

	Если ТолькоРасчет Тогда
		Возврат;
	КонецЕсли;

	Объект.ДенежныеОбязательства.Очистить();

	Для Каждого Строка Из НоваяТаблица Цикл
		НоваяСтрока = Объект.ДенежныеОбязательства.Добавить();
		Отбор = Новый Структура(КолонкиГруппировки);
		ЗаполнитьЗначенияСвойств(Отбор, Строка);
		ИмеющиесяСтроки = ТекущаяТаблица.НайтиСтроки(Отбор);
		Если ИмеющиесяСтроки.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИмеющиесяСтроки[0]);
			#Вставка     
			НоваяСтрока[ТЧ_ИФО] = ИмеющиесяСтроки[0].ИФО;
			#КонецВставки
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			#Вставка     
			НоваяСтрока[ТЧ_ИФО] = Строка.ИФО;
			#КонецВставки
			НоваяСтрока.ФинансовыйГод = Год(Объект.Дата);
		КонецЕсли;
		НоваяСтрока.СуммаПоОснованию = Строка.СуммаПоОснованию;
		НоваяСтрока.СуммаБОПоОснованию = Строка.СуммаБОПоОснованию;
		НоваяСтрока.СуммаПоОтчету = Строка.СуммаПоОтчету;
		НоваяСтрока.Отклонение = НоваяСтрока.СуммаПоОтчету - НоваяСтрока.СуммаПоОснованию;
		НоваяСтрока.ОтклонениеБО = НоваяСтрока.СуммаПоОтчету - НоваяСтрока.СуммаБОПоОснованию;

		ОбновитьТекстЗаголовковВСтрокеТаблицыДенежныеОбязательства(НоваяСтрока);

	КонецЦикла;

КонецПроцедуры  

&НаСервере
Процедура ПроставитьИФО_ПоОснованию()
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		Возврат;
	КонецЕсли;
		
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Суточные");
	МассивТЧ.Добавить("УсловияПроезда");
	МассивТЧ.Добавить("УсловияПроживания");
	МассивТЧ.Добавить("ПрочиеРасходы");
	МассивТЧ.Добавить("ТоварыРаботыУслуги");
	
	ИсключаемыеТЧ = Новый Массив;
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РешениеОКомандировании") Тогда  
		
		ИсключаемыеТЧ.Добавить("ТоварыРаботыУслуги");  
		ТаблицаДО = Документы.РешениеОКомандировании.ТаблицаОбязательствПоСвязаннымРешениям(Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РешениеОКомпенсацииРасходовДляКрайнегоСевера") Тогда 
		
		ИсключаемыеТЧ.Добавить("Суточные");
		ИсключаемыеТЧ.Добавить("УсловияПроживания");
		ИсключаемыеТЧ.Добавить("ТоварыРаботыУслуги");  
		ТаблицаДО = Документы.РешениеОКомпенсацииРасходовДляКрайнегоСевера.ТаблицаДенежныхОбязательствПоРешению(Объект.ДокументОснование);
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъема") Тогда   
		
		ИсключаемыеТЧ.Добавить("Суточные");
		ИсключаемыеТЧ.Добавить("УсловияПроезда");
		ИсключаемыеТЧ.Добавить("УсловияПроживания");
		ИсключаемыеТЧ.Добавить("ПрочиеРасходы"); 
		ТаблицаДО = Документы[Объект.ДокументОснование.Метаданные().Имя].ТаблицаДенежныхОбязательствПоЗаявке(Объект.ДокументОснование);
		
	КонецЕсли;
	
	ОбщегоНазначенияБГУ.УдалитьНепроверяемыеРеквизитыИзМассива(МассивТЧ,ИсключаемыеТЧ);
	
	СтруктураТЧ = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	
	Для Каждого ТЧ Из МассивТЧ Цикл 
		Запрос.Текст = Запрос.Текст + ТекстЗапросаДляДопКолонки(ТЧ) + ОбщегоНазначения.РазделительПакетаЗапросов(); 
		
		Если ТЧ = "УсловияПроезда" Тогда 
			СтруктураТЧ.Вставить("Проезд", СтруктураТЧ.Количество());
		ИначеЕсли ТЧ = "УсловияПроживания" Тогда 
			СтруктураТЧ.Вставить("Проживание", СтруктураТЧ.Количество()); 
		Иначе
			СтруктураТЧ.Вставить(ТЧ, СтруктураТЧ.Количество());  
		КонецЕсли;
		
	КонецЦикла; 
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для Каждого КлючЗначение Из СтруктураТЧ Цикл 
		
		ТЧ_ИФО = РасчетыСПодотчетнымиЛицами_ИФО.ПолучитьИмяРеквизитаДопКолонки(ЭтаФорма,КлючЗначение.Ключ,"ИФО");
		ТаблицаИФО = Результат[КлючЗначение.Значение].Выгрузить();   
		
		Если ЗначениеЗаполнено(ТЧ_ИФО) И ТаблицаИФО.Количество() Тогда 
			
			Для Каждого Стр Из Объект[КлючЗначение.Ключ] Цикл
				
				НайденныеСтроки = ТаблицаИФО.НайтиСтроки(Новый Структура("НомерСтрокиДокумента",Стр.НомерСтроки));
				
				Если НайденныеСтроки.Количество() Тогда 
					
					Стр[ТЧ_ИФО] = НайденныеСтроки[0].ИФО;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТЧ_ИФО = РасчетыСПодотчетнымиЛицами_ИФО.ПолучитьИмяРеквизитаДопКолонки(ЭтаФорма,"ДенежныеОбязательства","ИФО");
	
	Если ЗначениеЗаполнено(ТЧ_ИФО) Тогда
		
		Объект.ДенежныеОбязательства.Очистить();
		
		Для Каждого СтрокаОбязательства Из ТаблицаДО Цикл
			НоваяСтрока = Объект.ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбязательства);
			НоваяСтрока.СуммаПоОснованию = СтрокаОбязательства.Сумма;  
			
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РешениеОКомандировании") Тогда
				НоваяСтрока.СуммаБОПоОснованию = СтрокаОбязательства.СуммаБО;
			КонецЕсли; 
			
			НоваяСтрока[ТЧ_ИФО] = СтрокаОбязательства.ИФО;
			НоваяСтрока.ФинансовыйГод = Год(ТекущаяДатаСеанса());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроставитьИФО_ПоОснованию()

&НаСервере
Функция ТекстЗапросаДляДопКолонки(ТабЧасть)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗначенияКолонокДополнительныхТабличныхЧастей.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ВЫРАЗИТЬ(ЗначенияКолонокДополнительныхТабличныхЧастей.Значение КАК Справочник.ИсточникиФинансовогоОбеспечения) КАК ИФО
	|ИЗ
	|	РегистрСведений.ЗначенияКолонокДополнительныхТабличныхЧастей КАК ЗначенияКолонокДополнительныхТабличныхЧастей
	|ГДЕ
	|	ЗначенияКолонокДополнительныхТабличныхЧастей.Объект = &Ссылка
	|	И ЗначенияКолонокДополнительныхТабличныхЧастей.ТабличнаяЧасть.ИмяТабличнойЧасти = %ИмяТЧ%
	|	И ЗначенияКолонокДополнительныхТабличныхЧастей.КолонкаТабличнойЧасти.ИмяКолонки = %ИмяДопКолонки%";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяТЧ%","""" + ТабЧасть + """");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ИмяДопКолонки%","""" + "ИФО" + """");
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаДляДопКолонки()

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДобавленныеКолонкиТаблиц")
Процедура АБК_ЗаполнитьДобавленныеКолонкиТаблиц()

	МассивДокументов = Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса");

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,    
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО КАК ИФО,    
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаКт
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетДт В (&РасчетыСПодотчетнымиЛицами)
	|				И СчетКт В (&СчетаДС)
	|				И ИФО = &ИФО
	|				И СубконтоДт1 = &Контрагент
	|				И Регистратор В (&МассивДокументов),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,  
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО,    
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,     
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО,    
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетКт В (&РасчетыСПодотчетнымиЛицами)
	|				И СчетДт В (&СчетаДС)
	|				И ИФО = &ИФО
	|				И СубконтоКт1 = &Контрагент
	|				И Регистратор В (&МассивДокументов),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО,    
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ");
	
	#Удаление
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
		Запрос.УстановитьПараметр("ИФО", Объект.ИФО);
	Иначе                                                       
		#КонецУдаления
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИФО = &ИФО", "");    
		#Удаление
	КонецЕсли; 
	#КонецУдаления

	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Контрагент"));
	Запрос.УстановитьПараметр("ВалютаРуб", ОбщегоНазначенияБГУПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("РасчетыСПодотчетнымиЛицами", БухгалтерскийУчетПовтИсп.ПолучитьМассивСчетов("208.00"));
	Запрос.УстановитьПараметр("СчетаДС", БухгалтерскийУчетПовтИсп.ПолучитьМассивСчетов("201.00,210.03,304.00,000"));  
	
	#Вставка
	ИмяРеквизитаИФО = РасчетыСПодотчетнымиЛицами_ИФО.ПолучитьИмяРеквизитаДопКолонки(ЭтаФорма,"Получено","ИФО");
	#КонецВставки

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		#Удаление
		Строки = Объект.Получено.НайтиСтроки(Новый Структура("ДокументАванса", Выборка.Регистратор));
		#КонецУдаления
		#Вставка          
		Если ЗначениеЗаполнено(ИмяРеквизитаИФО) Тогда
			Строки = Объект.Получено.НайтиСтроки(Новый Структура("ДокументАванса," + ИмяРеквизитаИФО, Выборка.Регистратор,Выборка.ИФО));  
		Иначе
			Строки = Объект.Получено.НайтиСтроки(Новый Структура("ДокументАванса", Выборка.Регистратор));  
		КонецЕсли;
		#КонецВставки

		Если Строки.Количество() > 0 Тогда

			ЗаполнитьЗначенияСвойств(Строки[0], Выборка); 
			
			#Вставка
			Если ЗначениеЗаполнено(ИмяРеквизитаИФО) Тогда
				Строки[0][ИмяРеквизитаИФО] = Выборка.ИФО;	
			КонецЕсли;
			#КонецВставки

		КонецЕсли;

	КонецЦикла;

	Для Каждого Строка Из Объект.ДенежныеОбязательства Цикл
		Строка.Отклонение = Строка.СуммаПоОтчету - Строка.СуммаПоОснованию;
		Строка.ОтклонениеБО = Строка.СуммаПоОтчету - Строка.СуммаБОПоОснованию;
	КонецЦикла;

	ОбновитьТекстыЗаголовковВСтрокахТаблицРасходов();

КонецПроцедуры

&НаКлиенте
Процедура АБК_ПолученоДокументАвансаОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнитьЗначенияСвойств(Элементы.Получено.ТекущиеДанные, ВыбранноеЗначение); 
	
	ИмяРеквизитаИФО = ПолучитьДанныеДопКолонки("ИФО", "Получено").ИмяРеквизита;
	Если ЗначениеЗаполнено(ИмяРеквизитаИФО) Тогда
		Элементы.Получено.ТекущиеДанные[ИмяРеквизитаИФО] = ВыбранноеЗначение.ИФО;		
	КонецЕсли;
	
	ОбновитьТаблицуАвансов();
	
	ОбновитьТаблицуДенежныеОбязательства();
	
	ОбновитьПодсказкуРазницаДО(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ТоварыРаботыУслугиПриходныйДокументОбработкаВыбораВместо(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТоварыРаботыУслуги.ТекущиеДанные;   
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);     
	
	ИмяРеквизитаИФО = ПолучитьДанныеДопКолонки("ИФО", "ТоварыРаботыУслуги").ИмяРеквизита;
	Если ЗначениеЗаполнено(ИмяРеквизитаИФО) Тогда
		ТекущиеДанные[ИмяРеквизитаИФО] = ВыбранноеЗначение.ИФО;		
	КонецЕсли;
	
	ТекущиеДанные.УточнитьКЭК340 = ТипЗнч(ТекущиеДанные.ПриходныйДокумент) = Тип("ДокументСсылка.ПриходныйОрдерФондовый");
	
	ОбновитьТаблицуДенежныеОбязательства();
	
	ОбновитьПодсказкуРазницаДО(ЭтотОбъект);
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДопКолонки(ИмяКолонки, ИмяТаблицы) 
	СтруктураДопКолонки = Новый Структура("ИмяРеквизита, ИмяЭлемента","","");
	
	НайденныеСтроки = ЭтаФорма.БухгалтерскиеОперации_ДобавленныеРеквизитыОперации.НайтиСтроки(Новый Структура("ИмяДляФормулы,ИмяТаблицы",ИмяКолонки,ИмяТаблицы));	
	Если НайденныеСтроки.Количество() Тогда
		СтруктураДопКолонки.ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;	
		СтруктураДопКолонки.ИмяЭлемента = НайденныеСтроки[0].ИмяЭлемента;	
	КонецЕсли;         
	
	Возврат СтруктураДопКолонки;
КонецФункции                                   


&НаКлиенте
Процедура АБК_ТоварыРаботыУслугиПриходныйДокументНачалоВыбораВместо(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.ТоварыРаботыУслуги.ТекущиеДанные.ПоДокументу Тогда
		Возврат;
	КонецЕсли;
	
	//МассивВыбранных = Новый Массив;
	//Для Каждого Стр Из Объект.ТоварыРаботыУслуги Цикл
	//	Если Стр.ПоДокументу И ЗначениеЗаполнено(Стр.ПриходныйДокумент) Тогда
	//		МассивВыбранных.Добавить(Стр.ПриходныйДокумент);
	//	КонецЕсли;
	//КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		НачалоПериода = Объект.ДокументОснование;
	Иначе
		НачалоПериода = ДатаПредыдущегоОтчета;
	КонецЕсли;
	
	ПараметрыВыбораЗначения = Новый Структура;
	ПараметрыВыбораЗначения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыВыбораЗначения.Вставить("КонецПериода", КонецДня(Объект.Дата));
	ПараметрыВыбораЗначения.Вставить("ИФО", Объект.ИФО);
	ПараметрыВыбораЗначения.Вставить("Организация", Объект.Организация);
	ПараметрыВыбораЗначения.Вставить("Сотрудник", Объект.Сотрудник);
	//ПараметрыВыбораЗначения.Вставить("МассивВыбранных", МассивВыбранных);
	ПараметрыВыбораЗначения.Вставить("МассивВыбранных", Новый Массив);
	ПараметрыВыбораЗначения.Вставить("ТекущийДокумент", Объект.Ссылка);
	ПараметрыВыбораЗначения.Вставить("ЗаголовокФормы", НСтр("ru='Выберите документ поступления'"));
	
	ОткрытьФорму("Документ.ОтчетОРасходахПодотчетногоЛица.Форма.ФормаВыбораПриходногоДокумента", ПараметрыВыбораЗначения, Элемент)
	
КонецПроцедуры


&НаКлиенте
Процедура АБК_ПолученоДокументАвансаНачалоВыбораВместо(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключитьДокументы = Новый Массив;
	//Для Каждого СтрокаПолучено Из Объект.Получено Цикл
	//	ИсключитьДокументы.Добавить(СтрокаПолучено.ДокументАванса);
	//КонецЦикла;
	
	ПараметрыВыбораЗначения = Новый Структура("НачалоПериода, КонецПериода, ИФО, Организация, Сотрудник, ИсключитьДокументы, ТекущийДокумент, ЗаголовокФормы",
	ДатаДокументаОснования,
	КонецДня(Объект.Дата),
	Объект.ИФО,
	Объект.Организация,
	Объект.Сотрудник,
	ИсключитьДокументы,
	Объект.Ссылка,
	"Выберите документ выдачи аванса");
	
	ОткрытьФорму("Документ.ОтчетОРасходахПодотчетногоЛица.Форма.ФормаВыбораДокументаОплаты", ПараметрыВыбораЗначения, Элемент)
	
КонецПроцедуры

