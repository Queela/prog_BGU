&ИзменениеИКонтроль("ПередЗаписью")
Процедура АБК_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	// Проверка на непревышение суммы и количества относительно заявки-обоснования закупки малого объема
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъема") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Номенклатура КАК Номенклатура,
		|	СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Количество) КАК Количество,
		|	СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Сумма) КАК Сумма,
		|	СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Сумма) / СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Количество) КАК Цена
		|ИЗ
		|	Документ.ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги КАК ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги
		|ГДЕ
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Номенклатура";
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		ДанныеЗаявки = Запрос.Выполнить().Выгрузить();
		
		ДанныеОтчета = ТоварыРаботыУслуги.Выгрузить(, "Номенклатура, Количество, СуммаПринято");
		ДанныеОтчета.Свернуть("Номенклатура", "Количество, СуммаПринято");
		ДанныеОтчета.Колонки.Добавить("Цена");
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			СтрокаОтчета.Цена = ?(СтрокаОтчета.Количество > 0, СтрокаОтчета.СуммаПринято / СтрокаОтчета.Количество, 0)
		КонецЦикла;
		
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			СтрокаЗаявки = ДанныеЗаявки.Найти(СтрокаОтчета.Номенклатура, "Номенклатура");
			Если СтрокаЗаявки = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании отсутствует номенклатура ""%1""'"),
					СтрокаОтчета.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			Если СтрокаЗаявки.Количество < СтрокаОтчета.Количество Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании указана номенклатура ""%1"" в количестве %2, а в Отчете - %3'"),
					СтрокаОтчета.Номенклатура, СтрокаЗаявки.Количество, СтрокаОтчета.Количество);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			Если СтрокаЗаявки.Сумма < СтрокаОтчета.СуммаПринято Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании указана номенклатура ""%1"" на сумму %2, а в Отчете - %3'"),
					СтрокаОтчета.Номенклатура, СтрокаЗаявки.Сумма, СтрокаОтчета.СуммаПринято);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			Если Окр(СтрокаЗаявки.Цена, 2) < Окр(СтрокаОтчета.Цена, 2) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании указана номенклатура ""%1"" ценой %2, а в Отчете - %3'"),
					СтрокаОтчета.Номенклатура, Окр(СтрокаЗаявки.Цена, 2), Окр(СтрокаОтчета.Цена, 2));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка на непревышение суммы и количества относительно заявки-обоснования закупки малого объема через подотчетное лицо
	#Удаление
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.ОКПД КАК ОКПД,
		|	СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Количество) КАК Количество,
		|	СУММА(ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Сумма) КАК Сумма
		|ИЗ
		|	Документ.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо.ТоварыРаботыУслуги КАК ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги
		|ГДЕ
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаявкаОбоснованиеЗакупкиМалогоОбъемаТоварыРаботыУслуги.ОКПД";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		
		ДанныеЗаявки = Запрос.Выполнить().Выгрузить();
		
		ПриходныеДокументы = Новый Массив;
		Для Каждого Стр Из ТоварыРаботыУслуги Цикл
			Если Стр.ПоДокументу И ЗначениеЗаполнено(Стр.ПриходныйДокумент) Тогда
				ПриходныеДокументы.Добавить(Стр.ПриходныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ВидыДенежныхДокументов).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ВидыДенежныхДокументов).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ВидыДенежныхДокументов).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ДенежныеДокументы).Владелец.ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ДенежныеДокументы).Владелец.ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ДенежныеДокументы).Владелец.ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.Номенклатура).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.Номенклатура).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.Номенклатура).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ОсновныеСредства).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ОсновныеСредства).ОКП
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ОсновныеСредства).ОКП
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
		|	КОНЕЦ КАК ОКПД,
		|	ЖурналПроводокЕПСБУДвиженияССубконто.КоличествоДт КАК Количество,
		|	ЖурналПроводокЕПСБУДвиженияССубконто.Сумма КАК СуммаПринято
		|ИЗ
		|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
		|			,
		|			,
		|			СчетКт В (&Счет208)
		|				И Регистратор В (&ПриходныеДокументы)
		|				И (СубконтоДт1 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|					ИЛИ СубконтоДт2 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|					ИЛИ СубконтоДт3 ССЫЛКА Справочник.ВидыДенежныхДокументов
		|					ИЛИ СубконтоДт1 ССЫЛКА Справочник.ДенежныеДокументы
		|					ИЛИ СубконтоДт2 ССЫЛКА Справочник.ДенежныеДокументы
		|					ИЛИ СубконтоДт3 ССЫЛКА Справочник.ДенежныеДокументы
		|					ИЛИ СубконтоДт1 ССЫЛКА Справочник.Номенклатура
		|					ИЛИ СубконтоДт2 ССЫЛКА Справочник.Номенклатура
		|					ИЛИ СубконтоДт3 ССЫЛКА Справочник.Номенклатура
		|					ИЛИ СубконтоДт1 ССЫЛКА Справочник.ОсновныеСредства
		|					ИЛИ СубконтоДт2 ССЫЛКА Справочник.ОсновныеСредства
		|					ИЛИ СубконтоДт3 ССЫЛКА Справочник.ОсновныеСредства),
		|			,
		|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто";
		
		Запрос.УстановитьПараметр("Счет208", БухгалтерскийУчет.СписокСчетов("208.00"));
		Запрос.УстановитьПараметр("ПриходныеДокументы", ПриходныеДокументы);
		
		ДанныеПриходныхДокументов = Запрос.Выполнить().Выгрузить();
		
		ДанныеОтчета = ТоварыРаботыУслуги.Выгрузить(Новый Структура("ПоДокументу", Ложь), "ОКПД, Количество, СуммаПринято");
		
		Для Каждого ДанныеПриходногоДокумента Из ДанныеПриходныхДокументов Цикл
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Добавить(), ДанныеПриходногоДокумента);
		КонецЦикла;
		
		ДанныеОтчета.Свернуть("ОКПД", "Количество, СуммаПринято");
		
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			Если Не ЗначениеЗаполнено(СтрокаОтчета.ОКПД) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В Отчете указан объект закупки с незаполненным ОКПД'"),
					СтрокаОтчета.ОКПД);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			СтрокаЗаявки = ДанныеЗаявки.Найти(СтрокаОтчета.ОКПД, "ОКПД");
			Если СтрокаЗаявки = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании отсутствует объект закупки с ОКПД ""%1""'"),
					СтрокаОтчета.ОКПД);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			Если СтрокаЗаявки.Количество < СтрокаОтчета.Количество Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании указан объект закупки с ОКПД ""%1"" в количестве %2, а в Отчете - %3'"),
					СтрокаОтчета.ОКПД, СтрокаЗаявки.Количество, СтрокаОтчета.Количество);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
			Если СтрокаЗаявки.Сумма < СтрокаОтчета.СуммаПринято Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В исходной Заявке-обосновании указан объект закупки с ОКПД ""%1"" на сумму %2, а в Отчете - %3'"),
					СтрокаОтчета.ОКПД, СтрокаЗаявки.Сумма, СтрокаОтчета.СуммаПринято);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	#КонецУдаления
	
	СуммаДокумента = 0;
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить("Суточные");
	МассивТЧ.Добавить("Проезд");
	МассивТЧ.Добавить("Проживание");
	МассивТЧ.Добавить("ПрочиеРасходы");
	МассивТЧ.Добавить("ТоварыРаботыУслуги");
	
	Для Каждого ТЧ Из МассивТЧ Цикл
		Для Каждого СтрокаТЧ Из ЭтотОбъект[ТЧ] Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "СпособОбеспечения")
				И СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу")
				И СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов")
				И СтрокаТЧ.СпособОбеспечения <> ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВозмещениеПоФакту") Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "Валюта")
				И ЗначениеЗаполнено(СтрокаТЧ.Валюта)
				И СтрокаТЧ.Валюта <> БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета() Тогда
				СуммаДокумента = СуммаДокумента
					+ Документы.ОтчетОРасходахПодотчетногоЛица.СуммаВРублевомЭквиваленте(СтрокаТЧ.СуммаПринято, СтрокаТЧ.Валюта, КурсыВалют);
				Иначе
					СуммаДокумента = СуммаДокумента + СтрокаТЧ.СуммаПринято;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьПоРешениюОКомандировании")
Процедура АБК_ЗаполнитьПоРешениюОКомандировании(РешениеСсылка)  
	
	#Вставка
	СУчетомИзменений = Ложь;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СУчетомИзменений") Тогда
		СУчетомИзменений = ЭтотОбъект.ДополнительныеСвойства.СУчетомИзменений;	
	КонецЕсли;  
	
	СтруктураТаблицСНомерамиСтрок = ПустаяСтруктураТаблицСНомерамиСтрок();

	Если СУчетомИзменений Тогда         
		МетаданныеДокумента = Метаданные(); 
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл    
			ИмяТабЧасти = ТабличнаяЧасть.Имя; 
			ЕстьЗапретИзменения = ОбщегоНазначенияБГУ.ЕстьРеквизитТабЧастиДокумента("ЗапретИзменения",МетаданныеДокумента,ИмяТабЧасти);
			Если НЕ (ИмяТабЧасти = "Получено"
				ИЛИ ЕстьЗапретИзменения) Тогда  
				ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить(); 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		#КонецВставки
		Для Каждого ТабличнаяЧасть Из Метаданные().ТабличныеЧасти Цикл
			ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла; 
		#Вставка     
	КонецЕсли;
	#КонецВставки

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РешениеОКомандировании.Ссылка КАК ДокументОснование,
	|	РешениеОКомандировании.Организация КАК Организация,
	|	РешениеОКомандировании.Подразделение КАК Подразделение,
	|	РешениеОКомандировании.Сотрудник КАК Сотрудник,
	|	РешениеОКомандировании.РуководительПодразделения КАК РуководительПодразделения,
	|	РешениеОКомандировании.ИФО КАК ИФО,
	|	РешениеОКомандировании.Должность КАК Должность,
	|	РешениеОКомандировании.ОсобыйСтатус КАК ОсобыйСтатус,
	|	РешениеОКомандировании.СодержаниеЗадания КАК СодержаниеЗадания,
	|	РешениеОКомандировании.ОснованиеПринятияОбязательства КАК ОснованиеПринятияОбязательства,
	|	РешениеОКомандировании.РазделЛицевогоСчета КАК РазделЛицевогоСчета,
	|	РешениеОКомандировании.КомандировкаЗаГраницу КАК КомандировкаЗаГраницу,
	|	РешениеОКомандировании.МестоИСроки.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Страна КАК Страна,
	|		ПунктНазначения КАК ПунктНазначения,
	|		ОрганизацияНазначения КАК ОрганизацияНазначения,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		Норматив КАК Норматив,
	|		Валюта КАК Валюта
	|	) КАК МестоИСроки,
	|	РешениеОКомандировании.Суточные.(              
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		Страна КАК Страна,
	|		Территория КАК Территория,
	|		ДополнительноеУсловие КАК ДополнительноеУсловие,
	|		КоличествоДней КАК КоличествоДней,
	|		ВЫБОР
	|			КОГДА РешениеОКомандировании.Суточные.КоличествоДней = 0
	|				ТОГДА РешениеОКомандировании.Суточные.Сумма
	|			ИНАЧЕ РешениеОКомандировании.Суточные.Сумма / РешениеОКомандировании.Суточные.КоличествоДней
	|		КОНЕЦ КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		Валюта КАК Валюта,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК Суточные,
	|	РешениеОКомандировании.УсловияПроезда.(  
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ВидТранспорта КАК ВидТранспорта,
	|		ДатаОтправления КАК ДатаОтправления,
	|		ДатаПрибытия КАК ДатаПрибытия,
	|		ДатаПересеченияГраницы КАК ДатаПересеченияГраницы,
	|		КатегорияФактическая КАК КатегорияПоНормативу,
	|		КатегорияФактическая КАК КатегорияФактическая,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		1 КАК Количество,
	|		Сумма КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		Валюта КАК Валюта,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК УсловияПроезда,
	|	РешениеОКомандировании.УсловияПроживания.(  
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		Страна КАК Страна,
	|		ТерриторияСНадбавками КАК ТерриторияСНадбавками,
	|		УсловиеПроживания КАК УсловиеПроживания,
	|		ДатаЗаезда КАК ДатаЗаезда,
	|		ДатаВыезда КАК ДатаВыезда,
	|		КатегорияФактическая КАК КатегорияПоНормативу,
	|		КатегорияФактическая КАК КатегорияФактическая,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		КоличествоДней КАК КоличествоДней,
	|		Сумма КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		Валюта КАК Валюта,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК УсловияПроживания,
	|	РешениеОКомандировании.ПрочиеРасходы.(   
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		Валюта КАК Валюта,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК ПрочиеРасходы,
	|	РешениеОКомандировании.КурсыВалют.(
	|		Валюта КАК Валюта,
	|		Курс КАК Курс,
	|		Кратность КАК Кратность
	|	) КАК КурсыВалют
	|ИЗ
	|	Документ.РешениеОКомандировании КАК РешениеОКомандировании
	|ГДЕ
	|	РешениеОКомандировании.Ссылка = &Ссылка");

	Запрос.УстановитьПараметр("Ссылка", РешениеСсылка);

	СпособыОбеспеченияАванс = Новый Соответствие;
	СпособыОбеспеченияАванс.Вставить(
	ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу"), Истина);
	СпособыОбеспеченияАванс.Вставить(
	ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов"), Истина);
	СпособыОбеспеченияАванс.Вставить(
	ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВозмещениеПоФакту"), Истина);

	Валюты = Новый Соответствие;

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);

		СтрокиМестоИСроки = Выборка.МестоИСроки.Выгрузить();
		СтрокиМестоИСроки.Сортировать("ДатаНачала, НомерСтроки");

		// поиск крайних дат в условиях проезда
		Если СтрокиМестоИСроки.Количество() = 0 Тогда
			ДеньВыезда = Дата(2999,1,1);
			ДеньПриезда = Дата(1,1,1);
		Иначе
			ДеньВыезда = СтрокиМестоИСроки[0].ДатаНачала;
			ДеньПриезда = СтрокиМестоИСроки[СтрокиМестоИСроки.Количество() - 1].ДатаОкончания;
		КонецЕсли;

		ВыборкаУсловияПроезда = Выборка.УсловияПроезда.Выбрать();
		Пока ВыборкаУсловияПроезда.Следующий() Цикл
			ДеньВыезда = Мин(ДеньВыезда, ВыборкаУсловияПроезда.ДатаОтправления);
			ДеньПриезда = Макс(ДеньПриезда, ВыборкаУсловияПроезда.ДатаПрибытия);
		КонецЦикла;

		Для Каждого СтрокаМестоИСроки Из СтрокиМестоИСроки Цикл

			НоваяСтрока = ОтчетОВыполненнойРаботе.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМестоИСроки);

			Если СтрокиМестоИСроки.Индекс(СтрокаМестоИСроки) = 0 Тогда
				НоваяСтрока.ДеньВыезда = ДеньВыезда;
			КонецЕсли;

			Если СтрокиМестоИСроки.Индекс(СтрокаМестоИСроки) = СтрокиМестоИСроки.Количество() - 1 Тогда
				НоваяСтрока.ДеньПриезда = ДеньПриезда;
				НоваяСтрока.Продолжительность = (ДеньПриезда - ДеньВыезда)/86400 + 1;
			КонецЕсли;

		КонецЦикла;

		ТаблицаКурсыВалют = Выборка.КурсыВалют.Выгрузить();
		
		#Вставка
		ТаблицаНомеровСтрокСуточные = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаСуточные = Суточные.Выгрузить();
		ТаблицаСуточные.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "Суточные", ЭтотОбъект.Ссылка, ТаблицаСуточные);
		#КонецВставки

		ВыборкаРасходы = Выборка.Суточные.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс[ВыборкаРасходы.СпособОбеспечения] = Неопределено Тогда
				Продолжить;
			КонецЕсли;                        
			#Удаление
			НоваяСтрока = Суточные.Добавить();
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаСуточные.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаСуточные.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы); 
			#КонецУдаления
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято"); 
			#КонецВставки
			Если НЕ Выборка.КомандировкаЗаГраницу Тогда
				НоваяСтрока.ДеньВыезда = ДеньВыезда;
				НоваяСтрока.ДеньПриезда = ДеньПриезда;
			КонецЕсли;
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = Документы.РешениеОКомандировании.СуммаВРублевомЭквиваленте(
			НоваяСтрока.СуммаПлан, НоваяСтрока.Валюта, ТаблицаКурсыВалют);
			Валюты.Вставить(ВыборкаРасходы.Валюта);
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокСуточные.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокСуточные.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.Суточные = ТаблицаНомеровСтрокСуточные; 
		
		Суточные.Загрузить(ТаблицаСуточные);  
		
		ТаблицаНомеровСтрокПроезд = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаПроезд = Проезд.Выгрузить();
		ТаблицаПроезд.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "Проезд", ЭтотОбъект.Ссылка, ТаблицаПроезд);
		#КонецВставки

		ВыборкаРасходы = Выборка.УсловияПроезда.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс[ВыборкаРасходы.СпособОбеспечения] = Неопределено Тогда
				Продолжить;
			КонецЕсли;   
			#Удаление
			НоваяСтрока = Проезд.Добавить(); 
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаПроезд.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаПроезд.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);
			#КонецУдаления  
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято"); 
			#КонецВставки
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = Документы.РешениеОКомандировании.СуммаВРублевомЭквиваленте(
			НоваяСтрока.СуммаПлан, НоваяСтрока.Валюта, ТаблицаКурсыВалют);
			Валюты.Вставить(ВыборкаРасходы.Валюта);    
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокПроезд.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокПроезд.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;  
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.Проезд = ТаблицаНомеровСтрокПроезд; 
		
		Проезд.Загрузить(ТаблицаПроезд);  
		
		ТаблицаНомеровСтрокПроживание = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаПроживание = Проживание.Выгрузить();
		ТаблицаПроживание.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "Проживание", ЭтотОбъект.Ссылка, ТаблицаПроживание);
		#КонецВставки

		ВыборкаРасходы = Выборка.УсловияПроживания.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс[ВыборкаРасходы.СпособОбеспечения] = Неопределено Тогда
				Продолжить;
			КонецЕсли;    
			#Удаление
			НоваяСтрока = Проживание.Добавить();
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаПроживание.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаПроживание.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);   
			#КонецУдаления             
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято"); 
			#КонецВставки
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = Документы.РешениеОКомандировании.СуммаВРублевомЭквиваленте(
			НоваяСтрока.СуммаПлан, НоваяСтрока.Валюта, ТаблицаКурсыВалют);
			Валюты.Вставить(ВыборкаРасходы.Валюта);  
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокПроживание.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокПроживание.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;  
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.Проживание = ТаблицаНомеровСтрокПроживание; 
		
		Проживание.Загрузить(ТаблицаПроживание);  
		
		ТаблицаНомеровСтрокПрочиеРасходы = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаПрочиеРасходы = ПрочиеРасходы.Выгрузить();
		ТаблицаПрочиеРасходы.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "ПрочиеРасходы", ЭтотОбъект.Ссылка, ТаблицаПрочиеРасходы);
		#КонецВставки

		ВыборкаРасходы = Выборка.ПрочиеРасходы.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс[ВыборкаРасходы.СпособОбеспечения] = Неопределено Тогда
				Продолжить;
			КонецЕсли;   
			#Удаление
			НоваяСтрока = ПрочиеРасходы.Добавить();  
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаПрочиеРасходы.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаПрочиеРасходы.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы); 
			#КонецУдаления          
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято"); 
			#КонецВставки
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = Документы.РешениеОКомандировании.СуммаВРублевомЭквиваленте(
			НоваяСтрока.СуммаПлан, НоваяСтрока.Валюта, ТаблицаКурсыВалют);
			Валюты.Вставить(ВыборкаРасходы.Валюта);      
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокПрочиеРасходы.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокПрочиеРасходы.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.ПрочиеРасходы = ТаблицаНомеровСтрокПрочиеРасходы; 
		
		ПрочиеРасходы.Загрузить(ТаблицаПрочиеРасходы);  
		#КонецВставки

		ТаблицаОбязательств = Документы.РешениеОКомандировании.ТаблицаОбязательствПоСвязаннымРешениям(
		Выборка.ДокументОснование);
		Для Каждого СтрокаОбязательства Из ТаблицаОбязательств Цикл
			НоваяСтрока = ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбязательства);
			НоваяСтрока.СуммаПоОснованию = СтрокаОбязательства.Сумма;
			НоваяСтрока.СуммаБОПоОснованию = СтрокаОбязательства.СуммаБО;
			НоваяСтрока.ФинансовыйГод = Год(ТекущаяДатаСеанса());
		КонецЦикла;

	КонецЕсли;

	Для Каждого Валюта Из Валюты Цикл

		// В таблицу "Курсы валют" не нужно добавлять валюту рег. учета
		Если НЕ ЗначениеЗаполнено(Валюта.Ключ)
			ИЛИ Валюта.Ключ = ОбщегоНазначенияБГУПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
			Продолжить;
		КонецЕсли;

		Строка = КурсыВалют.Добавить();
		Строка.Валюта = Валюта.Ключ;
		КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта.Ключ, Дата);
		Строка.Курс = КурсКратность.Курс;
		Строка.Кратность = КурсКратность.Кратность;

	КонецЦикла;   
	
	#Вставка            
	ЭтотОбъект.ДополнительныеСвойства.Вставить("СтруктураТаблицСНомерамиСтрок",СтруктураТаблицСНомерамиСтрок);
	#КонецВставки

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьПоРешениюОКомпенсацииРасходов")
Процедура АБК_ЗаполнитьПоРешениюОКомпенсацииРасходов(РешениеСсылка)
	
	#Вставка
	СУчетомИзменений = Ложь;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СУчетомИзменений") Тогда
		СУчетомИзменений = ЭтотОбъект.ДополнительныеСвойства.СУчетомИзменений;	
	КонецЕсли;  
	
	СтруктураТаблицСНомерамиСтрок = ПустаяСтруктураТаблицСНомерамиСтрок();
	
	Если СУчетомИзменений Тогда         
		МетаданныеДокумента = Метаданные(); 
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл    
			ИмяТабЧасти = ТабличнаяЧасть.Имя; 
			ЕстьЗапретИзменения = ОбщегоНазначенияБГУ.ЕстьРеквизитТабЧастиДокумента("ЗапретИзменения",МетаданныеДокумента,ИмяТабЧасти);
			Если НЕ (ИмяТабЧасти = "Получено"
				ИЛИ ЕстьЗапретИзменения) Тогда  
				ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить(); 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		#КонецВставки
		Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла; 
		#Вставка     
	КонецЕсли;
	#КонецВставки

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Ссылка КАК ДокументОснование,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Организация КАК Организация,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Подразделение КАК Подразделение,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Сотрудник КАК Сотрудник,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.ИФО КАК ИФО,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Должность КАК Должность,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.ОснованиеПринятияОбязательства КАК ОснованиеПринятияОбязательства,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.РазделЛицевогоСчета КАК РазделЛицевогоСчета,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.УсловияПроезда.(
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ВидТранспорта КАК ВидТранспорта,
	|		ДатаОтправления КАК ДатаОтправления,
	|		ДатаПрибытия КАК ДатаПрибытия,
	|		КатегорияПоНормативу КАК КатегорияПоНормативу,
	|		КатегорияПоНормативу КАК КатегорияФактическая,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		1 КАК Количество,
	|		Сумма КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК УсловияПроезда,
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.ПрочиеРасходы.( 
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		0 КАК СуммаПринято,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ИСТИНА КАК ЗапретИзменения
	|	) КАК ПрочиеРасходы
	|ИЗ
	|	Документ.РешениеОКомпенсацииРасходовДляКрайнегоСевера КАК РешениеОКомпенсацииРасходовДляКрайнегоСевера
	|ГДЕ
	|	РешениеОКомпенсацииРасходовДляКрайнегоСевера.Ссылка = &Ссылка");

	Запрос.УстановитьПараметр("Ссылка", РешениеСсылка);

	СпособыОбеспеченияАванс = Новый Соответствие;
	СпособыОбеспеченияАванс.Вставить(
	ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу"), Истина);
	СпособыОбеспеченияАванс.Вставить(
	ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов"), Истина);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);    
		
		#Вставка
		ТаблицаНомеровСтрокПроезд = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаПроезд = Проезд.Выгрузить();
		ТаблицаПроезд.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "Проезд", ЭтотОбъект.Ссылка, ТаблицаПроезд);
		#КонецВставки

		ВыборкаРасходы = Выборка.УсловияПроезда.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс.Получить(ВыборкаРасходы.СпособОбеспечения) = Неопределено Тогда
				Продолжить;
			КонецЕсли;   
			#Удаление
			НоваяСтрока = Проезд.Добавить();  
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаПроезд.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаПроезд.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);    
			#КонецУдаления           
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято");    
			#КонецВставки
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = ВыборкаРасходы.СуммаПлан;  
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокПроезд.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокПроезд.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;    
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.Проезд = ТаблицаНомеровСтрокПроезд; 
		
		Проезд.Загрузить(ТаблицаПроезд);  
		
		ТаблицаНомеровСтрокПрочиеРасходы = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаПрочиеРасходы = ПрочиеРасходы.Выгрузить();
		ТаблицаПрочиеРасходы.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "ПрочиеРасходы", ЭтотОбъект.Ссылка, ТаблицаПрочиеРасходы);
		#КонецВставки

		ВыборкаРасходы = Выборка.ПрочиеРасходы.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если СпособыОбеспеченияАванс.Получить(ВыборкаРасходы.СпособОбеспечения) = Неопределено Тогда
				Продолжить;
			КонецЕсли;                             
			#Удаление
			НоваяСтрока = ПрочиеРасходы.Добавить();    
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаПрочиеРасходы.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаПрочиеРасходы.Добавить();
			КонецЕсли;
			#КонецВставки      
			#Удаление
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы);   
			#КонецУдаления           
			#Вставка
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы,,"СуммаПринято");    
			#КонецВставки
			НоваяСтрока.СуммаПланВРублевомЭквиваленте = ВыборкаРасходы.СуммаПлан;   
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокПрочиеРасходы.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокПрочиеРасходы.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;       
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.ПрочиеРасходы = ТаблицаНомеровСтрокПрочиеРасходы; 
		
		ПрочиеРасходы.Загрузить(ТаблицаПрочиеРасходы);  
		#КонецВставки

		ТаблицаДО = Документы.РешениеОКомпенсацииРасходовДляКрайнегоСевера.ТаблицаДенежныхОбязательствПоРешению(
		Выборка.ДокументОснование);
		Для Каждого СтрокаДО Из ТаблицаДО Цикл
			НоваяСтрока = ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДО);
			НоваяСтрока.СуммаПоОснованию = СтрокаДО.Сумма;
			НоваяСтрока.ФинансовыйГод = Год(ТекущаяДатаСеанса());
		КонецЦикла;

	КонецЕсли;
	
	#Вставка            
	ЭтотОбъект.ДополнительныеСвойства.Вставить("СтруктураТаблицСНомерамиСтрок",СтруктураТаблицСНомерамиСтрок);
	#КонецВставки

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьПоЗаявкеОбоснованиюНаЗакупкуМалогоОбъема")
Процедура АБК_ЗаполнитьПоЗаявкеОбоснованиюНаЗакупкуМалогоОбъема(ЗаявкаСсылка)
	
	#Вставка
	СУчетомИзменений = Ложь;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СУчетомИзменений") Тогда
		СУчетомИзменений = ЭтотОбъект.ДополнительныеСвойства.СУчетомИзменений;	
	КонецЕсли;  
	
	СтруктураТаблицСНомерамиСтрок = ПустаяСтруктураТаблицСНомерамиСтрок();
	
	Если СУчетомИзменений Тогда         
		МетаданныеДокумента = Метаданные(); 
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл    
			ИмяТабЧасти = ТабличнаяЧасть.Имя; 
			ЕстьЗапретИзменения = ОбщегоНазначенияБГУ.ЕстьРеквизитТабЧастиДокумента("ЗапретИзменения",МетаданныеДокумента,ИмяТабЧасти);
			Если НЕ (ИмяТабЧасти = "Получено" 
				ИЛИ ИмяТабЧасти = "ТоварыРаботыУслуги"
				ИЛИ ЕстьЗапретИзменения) Тогда  
				ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить(); 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		#КонецВставки
		Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла;
		#Вставка     
	КонецЕсли;
	#КонецВставки

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Ссылка КАК ДокументОснование,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Организация КАК Организация,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ИФО КАК ИФО,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Подразделение КАК Подразделение,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ПодотчетноеЛицо КАК Сотрудник,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Руководитель КАК Руководитель,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.РуководительПодразделения КАК РуководительПодразделения,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.РазделЛицевогоСчета КАК РазделЛицевогоСчета,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Договор КАК ОснованиеПринятияОбязательства,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		Номенклатура КАК Номенклатура,
	|		ОКПД КАК ОКПД,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		Подразделение КАК Подразделение,
	|	) КАК ТоварыРаботыУслуги
	|ИЗ
	|	Документ.ЗаявкаОбоснованиеЗакупкиМалогоОбъема КАК ЗаявкаОбоснованиеЗакупкиМалогоОбъема
	|ГДЕ
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Ссылка = &Ссылка");

	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);

		ТребуемыеДанные = Новый Структура("СсылкаНаОбъект, Должность", Выборка.Сотрудник);
		Справочники.Сотрудники.ПолучитьДанныеСотрудника(ТребуемыеДанные, Истина);
		Должность = ТребуемыеДанные.Должность;
		
		#Вставка
		ТаблицаНомеровСтрокТоварыРаботыУслуги = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаТоварыРаботыУслуги = ТоварыРаботыУслуги.Выгрузить();
		ТаблицаТоварыРаботыУслуги.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "ТоварыРаботыУслуги", ЭтотОбъект.Ссылка, ТаблицаТоварыРаботыУслуги);
		#КонецВставки
		
		ВыборкаРасходы = Выборка.ТоварыРаботыУслуги.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл       
			#Удаление
			НоваяСтрока = ТоварыРаботыУслуги.Добавить(); 
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаТоварыРаботыУслуги.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаТоварыРаботыУслуги.Добавить();
			КонецЕсли;
			#КонецВставки      
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы); 
			Если НЕ ЗначениеЗаполнено(ВыборкаРасходы.СпособОбеспечения) Тогда
				НоваяСтрока.СпособОбеспечения = ПредопределенноеЗначение("Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу");
			КонецЕсли; 
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокТоварыРаботыУслуги.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокТоварыРаботыУслуги.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;   
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.ТоварыРаботыУслуги = ТаблицаНомеровСтрокТоварыРаботыУслуги; 
		
		ТоварыРаботыУслуги.Загрузить(ТаблицаТоварыРаботыУслуги);  
		#КонецВставки

		ТаблицаДО = Документы.ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТаблицаДенежныхОбязательствПоЗаявке(
		Выборка.ДокументОснование);
		Для Каждого СтрокаДО Из ТаблицаДО Цикл
			НоваяСтрока = ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДО);
			НоваяСтрока.СуммаПоОснованию = СтрокаДО.Сумма;
			НоваяСтрока.ФинансовыйГод = Год(ТекущаяДатаСеанса());
		КонецЦикла;

	КонецЕсли;  
	
	#Вставка            
	ЭтотОбъект.ДополнительныеСвойства.Вставить("СтруктураТаблицСНомерамиСтрок",СтруктураТаблицСНомерамиСтрок);
	#КонецВставки

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьПоЗаявкеОбоснованиюНаЗакупкуМалогоОбъемаЧерезПодотчетноеЛицо")
Процедура АБК_ЗаполнитьПоЗаявкеОбоснованиюНаЗакупкуМалогоОбъемаЧерезПодотчетноеЛицо(ЗаявкаСсылка)
	
	#Вставка
	СУчетомИзменений = Ложь;
	Если ЭтотОбъект.ДополнительныеСвойства.Свойство("СУчетомИзменений") Тогда
		СУчетомИзменений = ЭтотОбъект.ДополнительныеСвойства.СУчетомИзменений;	
	КонецЕсли;  
	
	СтруктураТаблицСНомерамиСтрок = ПустаяСтруктураТаблицСНомерамиСтрок();
	
	Если СУчетомИзменений Тогда         
		МетаданныеДокумента = Метаданные(); 
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл    
			ИмяТабЧасти = ТабличнаяЧасть.Имя; 
			ЕстьЗапретИзменения = ОбщегоНазначенияБГУ.ЕстьРеквизитТабЧастиДокумента("ЗапретИзменения",МетаданныеДокумента,ИмяТабЧасти);
			Если НЕ (ИмяТабЧасти = "Получено"
				ИЛИ ИмяТабЧасти = "ТоварыРаботыУслуги"
				ИЛИ ЕстьЗапретИзменения) Тогда  
				ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить(); 
			КонецЕсли;
		КонецЦикла; 
	Иначе
		#КонецВставки
		Для Каждого ТабличнаяЧасть Из ЭтотОбъект.Метаданные().ТабличныеЧасти Цикл
			ЭтотОбъект[ТабличнаяЧасть.Имя].Очистить();
		КонецЦикла; 
		#Вставка     
	КонецЕсли;
	#КонецВставки

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Ссылка КАК ДокументОснование,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Организация КАК Организация,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ИФО КАК ИФО,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Подразделение КАК Подразделение,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ПодотчетноеЛицо КАК Сотрудник,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Руководитель КАК Руководитель,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.РуководительПодразделения КАК РуководительПодразделения,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.РазделЛицевогоСчета КАК РазделЛицевогоСчета,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ОснованиеПринятияОбязательства КАК ОснованиеПринятияОбязательства,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.НазначениеАванса КАК НазначениеАванса,
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	#Вставка
	|		НомерСтроки КАК НомерСтрокиДокументаОснования,
	#КонецВставки
	|		ОКПД КАК ОКПД,
	|		Наименование КАК НаименованиеПлан,
	|		ИндивидуальнаяХарактеристика КАК ИндивидуальнаяХарактеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.Количество > 0
	|				ТОГДА ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.Сумма / ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.Количество
	|			ИНАЧЕ ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.Сумма
	|		КОНЕЦ КАК Цена,
	|		Сумма КАК СуммаПлан,
	|		Сумма КАК СуммаФакт,
	|		КФО КАК КФО,
	|		КПС КАК КПС,
	|		КЭК КАК КЭК,
	|		КодЦели КАК КодЦели,
	|		КодМероприятия КАК КодМероприятия,
	|		ДопКлассификация КАК ДопКлассификация,
	|		ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|		ВЫБОР
	|			КОГДА ЗаявкаОбоснованиеЗакупкиМалогоОбъема.ТоварыРаботыУслуги.Ссылка.СпособВыдачиДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.СпособыВыдачиДенежныхСредствПодотчетномуЛицу.ДенежныеДокументы)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|		КОНЕЦ КАК СпособОбеспечения,
	|		Подразделение КАК Подразделение
	|	) КАК ТоварыРаботыУслуги
	|ИЗ
	|	Документ.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо КАК ЗаявкаОбоснованиеЗакупкиМалогоОбъема
	|ГДЕ
	|	ЗаявкаОбоснованиеЗакупкиМалогоОбъема.Ссылка = &Ссылка");

	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);

		ТребуемыеДанные = Новый Структура("СсылкаНаОбъект, Должность", Выборка.Сотрудник);
		Справочники.Сотрудники.ПолучитьДанныеСотрудника(ТребуемыеДанные, Истина);
		Должность = ТребуемыеДанные.Должность; 
		
		#Вставка
		ТаблицаНомеровСтрокТоварыРаботыУслуги = ПустаяТаблицаНомеровСтрокДокументаОснования();  
		
		ТаблицаТоварыРаботыУслуги = ТоварыРаботыУслуги.Выгрузить();
		ТаблицаТоварыРаботыУслуги.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
		
		ЗаполнитьДопКолонку("НомерСтрокиДокументаОснования", "ТоварыРаботыУслуги", ЭтотОбъект.Ссылка, ТаблицаТоварыРаботыУслуги);
		#КонецВставки

		ВыборкаРасходы = Выборка.ТоварыРаботыУслуги.Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл    
			#Удаление
			НоваяСтрока = ТоварыРаботыУслуги.Добавить(); 
			#КонецУдаления
			#Вставка
			НайдСтроки = ТаблицаТоварыРаботыУслуги.НайтиСтроки(Новый Структура("НомерСтрокиДокументаОснования",ВыборкаРасходы.НомерСтрокиДокументаОснования));
			СтрокаНайдена = НайдСтроки.Количество();
			Если СтрокаНайдена Тогда
				НоваяСтрока = НайдСтроки[0];
			Иначе	
				НоваяСтрока = ТаблицаТоварыРаботыУслуги.Добавить();
			КонецЕсли;
			#КонецВставки      
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРасходы); 
			Если НЕ ПустаяСтрока(ВыборкаРасходы.ИндивидуальнаяХарактеристика) Тогда
				НоваяСтрока.НаименованиеПлан = ВыборкаРасходы.НаименованиеПлан
				+ " " + ВыборкаРасходы.ИндивидуальнаяХарактеристика;
			КонецЕсли;  
			#Вставка
			НовыйНомерСтрокиДокументаОснования = ТаблицаНомеровСтрокТоварыРаботыУслуги.Добавить();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиОтчетаОРасходах = ТаблицаНомеровСтрокТоварыРаботыУслуги.Количество();
			НовыйНомерСтрокиДокументаОснования.НомерСтрокиДокументаОснования = ВыборкаРасходы.НомерСтрокиДокументаОснования;
			#КонецВставки
		КонецЦикла;   
		
		#Вставка
		СтруктураТаблицСНомерамиСтрок.ТоварыРаботыУслуги = ТаблицаНомеровСтрокТоварыРаботыУслуги; 
		
		ТоварыРаботыУслуги.Загрузить(ТаблицаТоварыРаботыУслуги);  
		#КонецВставки

		ТаблицаДО = Документы.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо.ТаблицаДенежныхОбязательствПоЗаявке(
		Выборка.ДокументОснование);
		Для Каждого СтрокаДО Из ТаблицаДО Цикл
			НоваяСтрока = ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДО);
			НоваяСтрока.СуммаПоОснованию = СтрокаДО.Сумма;
			НоваяСтрока.ФинансовыйГод = Год(ТекущаяДатаСеанса());
		КонецЦикла;

	КонецЕсли;       
	
	#Вставка            
	ЭтотОбъект.ДополнительныеСвойства.Вставить("СтруктураТаблицСНомерамиСтрок",СтруктураТаблицСНомерамиСтрок);
	#КонецВставки

КонецПроцедуры

Функция ПустаяСтруктураТаблицСНомерамиСтрок()
	Возврат Новый Структура("Суточные,Проезд,Проживание,ПрочиеРасходы,ТоварыРаботыУслуги");	
КонецФункции  

Функция ПустаяТаблицаНомеровСтрокДокументаОснования()
	ТаблицаНомеровСтрокДокументаОснования = Новый ТаблицаЗначений;
	ТаблицаНомеровСтрокДокументаОснования.Колонки.Добавить("НомерСтрокиОтчетаОРасходах",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	ТаблицаНомеровСтрокДокументаОснования.Колонки.Добавить("НомерСтрокиДокументаОснования",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0)));
	
	Возврат ТаблицаНомеровСтрокДокументаОснования;
КонецФункции         

Функция ПолучитьДопТабЧастьДокумента(Наименование,Документ)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДополнительныеТабличныеЧастиДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДополнительныеТабличныеЧастиДокументов КАК ДополнительныеТабличныеЧастиДокументов
	|ГДЕ
	|	ДополнительныеТабличныеЧастиДокументов.ИмяТабличнойЧасти = &Наименование
	|	И ДополнительныеТабличныеЧастиДокументов.ИдентификаторДокумента = &ИдентификаторДокумента
	|	И НЕ ДополнительныеТабличныеЧастиДокументов.ПометкаУдаления"); 
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("ИдентификаторДокумента",Справочники.ИдентификаторыОбъектовМетаданных.ИдентификаторОбъектаМетаданных(Документ.Метаданные(),Ложь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат	Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.ДополнительныеТабличныеЧастиДокументов.ПустаяСсылка();
КонецФункции

Процедура ЗаполнитьДопКолонку(ИмяДопКолонки, ИмяДопТабЧасти, ДокументСсылка, ТаблицаДокумента) Экспорт
	ДопТабЧасть = ПолучитьДопТабЧастьДокумента(ИмяДопТабЧасти, ДокументСсылка);
	ДопКолонка = Справочники.КолонкиДополнительныхТабличныхЧастей.НайтиПоРеквизиту("ИмяКолонки", ИмяДопКолонки,,ДопТабЧасть);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияКолонокДополнительныхТабличныхЧастей.НомерСтрокиДокумента КАК НомерСтроки,
	|	ЗначенияКолонокДополнительныхТабличныхЧастей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияКолонокДополнительныхТабличныхЧастей КАК ЗначенияКолонокДополнительныхТабличныхЧастей
	|ГДЕ
	|	ЗначенияКолонокДополнительныхТабличныхЧастей.Объект = &Объект
	|	И ЗначенияКолонокДополнительныхТабличныхЧастей.ТабличнаяЧасть = &ТабличнаяЧасть
	|	И ЗначенияКолонокДополнительныхТабличныхЧастей.КолонкаТабличнойЧасти = &КолонкаТабличнойЧасти");
	Запрос.УстановитьПараметр("Объект", ДокументСсылка);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ДопТабЧасть);
	Запрос.УстановитьПараметр("КолонкаТабличнойЧасти", ДопКолонка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайдСтроки = ТаблицаДокумента.НайтиСтроки(Новый Структура("НомерСтроки", Выборка.НомерСтроки));
		
		Для Каждого НайдСтрока из НайдСтроки Цикл
			НайдСтрока[ИмяДопКолонки] = Выборка.Значение;	
		КонецЦикла;;
	КонецЦикла;
КонецПроцедуры


