&НаСервере
Процедура АБК_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)     
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ДобавитьКолонкиТаблиц();	
		
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура АБК_ПриЧтенииНаСервереПеред(ТекущийОбъект) 
	
	ДобавитьКолонкиТаблиц();	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиТаблиц() 
	Если НЕ КолонкиДобавлены Тогда
		
		МассивРеквизитов = Новый Массив;
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИФО", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"), 
		"Объект.Получено", "ИФО"));
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИФОПерерасхода", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"), 
		"Объект.ОстатокПерерасход", "ИФО"));   
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИФООстатка", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"), 
		"Объект.ОстатокПерерасход", "ИФО"));   
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИФО", Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"), 
		"НезавершенныеРасчеты", "ИФО"));   
		
		ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
		
		НовЭл = Элементы.Вставить("ПолученоИФО", Тип("ПолеФормы"), Элементы.Получено, Элементы.ПолученоВалюта);
		НовЭл.ПутьКДанным = "Объект.Получено.ИФО";
		НовЭл.Вид = ВидПоляФормы.ПолеВвода;
		НовЭл.ТолькоПросмотр = Истина;;
		
		НовЭл = Элементы.Вставить("ОстатокПерерасходИФОПерерасхода", Тип("ПолеФормы"), Элементы.ПерерасходВыдан, Элементы.ОстатокПерерасходВалютаПерерасхода);
		НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ИФОПерерасхода";
		НовЭл.Вид = ВидПоляФормы.ПолеВвода;
		НовЭл.ТолькоПросмотр = Истина;;
		
		НовЭл = Элементы.Вставить("ОстатокПерерасходИФООстатка", Тип("ПолеФормы"), Элементы.ОстатокВнесен, Элементы.ОстатокПерерасходВалютаОстатка);
		НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ИФООстатка";
		НовЭл.Вид = ВидПоляФормы.ПолеВвода;
		НовЭл.ТолькоПросмотр = Истина;;
		
		НовЭл = Элементы.Вставить("НезавершенныеРасчетыИФО", Тип("ПолеФормы"), Элементы.НезавершенныеРасчеты, Элементы.НезавершенныеРасчетыВалюта);
		НовЭл.ПутьКДанным = "НезавершенныеРасчеты.ИФО"; 
		НовЭл.Вид = ВидПоляФормы.ПолеВвода;          
		НовЭл.ТолькоПросмотр = Истина;;
		
		КолонкиДобавлены = Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПолучитьДанныеОстаткаПерерасхода")
Функция АБК_ПолучитьДанныеОстаткаПерерасхода()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пСчет", БухгалтерскийУчет.СписокСчетов("208.00"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ИФО", Объект.ИФО);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Субконто1", КонтрагентСотрудника(Объект.Сотрудник));

	Если Объект.Проведен
		ИЛИ Объект.Получено.Количество() > 0
		ИЛИ Объект.Израсходовано.НайтиСтроки(Новый Структура("ПоДокументу", Истина)).Количество() > 0 Тогда
		ОбъектДокумент = РеквизитФормыВЗначение("Объект");
		Запрос.УстановитьПараметр("Дата", РасчетыСПодотчетнымиЛицами.МоментВремениДокументаНачальногоОстатка(ОбъектДокумент));
	Иначе
		// Считаем остаток на дату документа, сотрудника, организацию, ИФО
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЖурналПроводокЕПСБУОстатки.СуммаОстатокДт), 0) КАК ОстатокПредыдущегоАванса,
	|	ЕСТЬNULL(СУММА(ЖурналПроводокЕПСБУОстатки.СуммаОстатокКт), 0) КАК ПерерасходПредыдущегоАванса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Валюты.Ссылка ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокДт
	|			КОНЕЦ), 0) КАК ОстатокПредыдущегоАвансаВВалюте,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Валюты.Ссылка ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокКт
	|			КОНЕЦ), 0) КАК ПерерасходПредыдущегоАвансаВвалюте,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.Счет) КАК Счет,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.КПС) КАК КПС,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.КФО) КАК КФО
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
	|			&Дата,
	|			Счет В (&пСчет),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Субконто1
	|				И ИФО = &ИФО) КАК ЖурналПроводокЕПСБУОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЖурналПроводокЕПСБУОстатки.Валюта = Валюты.Ссылка
	|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)";
	
	#Удаление
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда  
		#КонецУдаления  
	#Вставка
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ИФО)  Тогда            
		#КонецВставки
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИФО = &ИФО", "ИСТИНА");   
	КонецЕсли;

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

&НаСервере
Функция ПолучитьДанныеДопКолонки(ИмяКолонки, ИмяТаблицы) 
	СтруктураДопКолонки = Новый Структура("ИмяРеквизита, ИмяЭлемента","","");
	
	НайденныеСтроки = ЭтаФорма.БухгалтерскиеОперации_ДобавленныеРеквизитыОперации.НайтиСтроки(Новый Структура("ИмяДляФормулы, ИмяТаблицы", ИмяКолонки, ИмяТаблицы));	
	Если НайденныеСтроки.Количество() Тогда
		СтруктураДопКолонки.ИмяРеквизита = НайденныеСтроки[0].ИмяРеквизита;	
		СтруктураДопКолонки.ИмяЭлемента = НайденныеСтроки[0].ИмяЭлемента;	
	КонецЕсли;         
	
	Возврат СтруктураДопКолонки;
КонецФункции

&НаСервере
&ИзменениеИКонтроль("ОбновитьТаблицуНезавершенныхРасчетов")
Процедура АБК_ОбновитьТаблицуНезавершенныхРасчетов(ОбновитьПодсказку) 
	
	#Вставка
	ДанныеКолонкиИФО = ПолучитьДанныеДопКолонки("ИФО", "Израсходовано");
	#КонецВставки

	НезавершенныеРасчеты.Очистить();

	ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2, ДопустимыйЗнак.Любой));

	ТаблицаИзрасходовано = Новый ТаблицаЗначений;
	ТаблицаИзрасходовано.Колонки.Добавить("КФО", 	Новый ОписаниеТипов("ПеречислениеСсылка.КВД"));
	ТаблицаИзрасходовано.Колонки.Добавить("КПС", 	Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
	ТаблицаИзрасходовано.Колонки.Добавить("Счет", 	Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	ТаблицаИзрасходовано.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаИзрасходовано.Колонки.Добавить("Сумма", 	ОписаниеТипаСуммы);
	#Вставка
	ТаблицаИзрасходовано.Колонки.Добавить("ИФО", 	Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"));
	#КонецВставки

	Для Каждого СтрокаРасходов Из Объект.Израсходовано Цикл
		Если СтрокаРасходов.ПоДокументу Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИзрасходовано = ТаблицаИзрасходовано.Добавить();
		СтрокаИзрасходовано.КФО = СтрокаРасходов.КФО;
		СтрокаИзрасходовано.КПС = СтрокаРасходов.КПС;
		СтрокаИзрасходовано.Счет = СтрокаРасходов.СчетКредита;
		СтрокаИзрасходовано.Валюта = ?(СтрокаРасходов.Сумма=0, Объект.ВалютаДокумента, ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
		СтрокаИзрасходовано.Сумма = ?(СтрокаРасходов.Сумма=0, СтрокаРасходов.СуммаВВалюте, СтрокаРасходов.Сумма);;
		#Вставка
		СтрокаИзрасходовано.ИФО = ?(ЗначениеЗаполнено(ДанныеКолонкиИФО.ИмяРеквизита), СтрокаРасходов[ДанныеКолонкиИФО.ИмяРеквизита], Справочники.ИсточникиФинансовогоОбеспечения.ПустаяСсылка());
		#КонецВставки
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пСчет", 							БухгалтерскийУчет.СписокСчетов("208.00")); 
	Запрос.УстановитьПараметр("Организация", 					Объект.Организация);
	Запрос.УстановитьПараметр("ИФО", 							Объект.ИФО);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Субконто1", 						КонтрагентСотрудника(Объект.Сотрудник));
	Запрос.УстановитьПараметр("ТаблицаРасходовПоОтчету", 		ТаблицаИзрасходовано);
	Запрос.УстановитьПараметр("ДокументыАвансов", 				Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса"));
	Запрос.УстановитьПараметр("ДокументыИзрасходовано", 		Объект.Израсходовано.Выгрузить().ВыгрузитьКолонку("ПриходныйДокумент"));
	Запрос.УстановитьПараметр("ДокументыПерерасхода", 			Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументПерерасхода"));
	Запрос.УстановитьПараметр("ДокументыОстатка", 				Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументОстатка"));

	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыИзрасходовано, Неопределено);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыПерерасхода, Неопределено);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыОстатка, Неопределено);

	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Запрос.УстановитьПараметр("МоментВремени", РасчетыСПодотчетнымиЛицами.МоментВремениДокументаНачальногоОстатка(ОбъектДокумент));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасходовПоОтчету.Счет КАК Счет,
	|	ТаблицаРасходовПоОтчету.КПС КАК КПС,
	|	ТаблицаРасходовПоОтчету.КФО КАК КФО, 
	#Вставка
	|	ТаблицаРасходовПоОтчету.ИФО КАК ИФО,
	#КонецВставки
	|	ТаблицаРасходовПоОтчету.Валюта КАК Валюта,
	|	ТаблицаРасходовПоОтчету.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРасходовПоОтчету
	|ИЗ
	|	&ТаблицаРасходовПоОтчету КАК ТаблицаРасходовПоОтчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасходовПоОтчету.Счет КАК Счет,
	|	ТаблицаРасходовПоОтчету.КПС КАК КПС,
	|	ТаблицаРасходовПоОтчету.КФО КАК КФО,  
	#Вставка
	|	ТаблицаРасходовПоОтчету.ИФО КАК ИФО,
	#КонецВставки
	|	ТаблицаРасходовПоОтчету.Валюта КАК Валюта,
	|	0 КАК ПредыдущийАвансОстаток,
	|	0 КАК ПредыдущийАвансПерерасход,
	|	0 КАК Получено,
	|	ТаблицаРасходовПоОтчету.Сумма КАК Израсходовано,
	|	0 КАК ВозвращенОстаток,
	|	0 КАК ВыданПерерасход
	|ПОМЕСТИТЬ ДетальныеДанные
	|ИЗ
	|	ТаблицаРасходовПоОтчету КАК ТаблицаРасходовПоОтчету
	|";
	Если НЕ ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЖурналПроводокЕПСБУОстатки.Счет,
		|	ЖурналПроводокЕПСБУОстатки.КПС,
		|	ЖурналПроводокЕПСБУОстатки.КФО,
		#Вставка
		|	ЖурналПроводокЕПСБУОстатки.ИФО,
		#КонецВставки
		|	ЕСТЬNULL(Валюты.Ссылка, &ВалютаРегламентированногоУчета),
		|	ВЫБОР
		|		КОГДА Валюты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЖурналПроводокЕПСБУОстатки.СуммаОстатокДт
		|		ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокДт
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Валюты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЖурналПроводокЕПСБУОстатки.СуммаОстатокКт
		|		ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокКт
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
		|			&МоментВремени,
		|			Счет В (&пСчет),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Субконто1
		|				И ИФО = &ИФО) КАК ЖурналПроводокЕПСБУОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО ЖурналПроводокЕПСБУОстатки.Валюта = Валюты.Ссылка
		|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУОбороты.Счет,
	|	ЖурналПроводокЕПСБУОбороты.КПС,
	|	ЖурналПроводокЕПСБУОбороты.КФО,
	#Вставка
	|	ЖурналПроводокЕПСБУОбороты.ИФО,
	#КонецВставки
	|	ЕСТЬNULL(Валюты.Ссылка, &ВалютаРегламентированногоУчета),
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыАвансов)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотДт - ЖурналПроводокЕПСБУОбороты.СуммаОборотКт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыИзрасходовано)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотКт - ЖурналПроводокЕПСБУОбороты.СуммаОборотДт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыОстатка)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотКт - ЖурналПроводокЕПСБУОбороты.СуммаОборотДт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыПерерасхода)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотДт - ЖурналПроводокЕПСБУОбороты.СуммаОборотКт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Обороты(
	|			&МоментВремени,
	|			,
	|			Регистратор,
	|			Счет В (&пСчет),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Субконто1
	|				И ИФО = &ИФО,
	|			,
	|			) КАК ЖурналПроводокЕПСБУОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЖурналПроводокЕПСБУОбороты.Валюта = Валюты.Ссылка
	|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	(ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыАвансов)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыИзрасходовано)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыОстатка)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыПерерасхода))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДетальныеДанные.Счет КАК Счет,
	|	ДетальныеДанные.КПС КАК КПС,
	|	ДетальныеДанные.КФО КАК КФО,
	#Вставка
	|	ДетальныеДанные.ИФО КАК ИФО,
	#КонецВставки
	|	ДетальныеДанные.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) > 0
	|			ТОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) < 0
	|			ТОГДА -СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) + СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) - СУММА(ДетальныеДанные.Получено) + СУММА(ДетальныеДанные.Израсходовано) + СУММА(ДетальныеДанные.ВозвращенОстаток) - СУММА(ДетальныеДанные.ВыданПерерасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерасход
	|ИЗ
	|	ДетальныеДанные КАК ДетальныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеДанные.Счет,
	|	ДетальныеДанные.КПС,
	|	ДетальныеДанные.КФО,
	#Вставка
	|	ДетальныеДанные.ИФО,
	#КонецВставки
	|	ДетальныеДанные.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДетальныеДанные.КПС.Код,
	|	ДетальныеДанные.КФО.Порядок,
	|	ДетальныеДанные.Счет.Код";
	
	#Удаление
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда 
		#КонецУдаления                               
	#Вставка
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ИФО)  Тогда 
		#КонецВставки
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИФО = &ИФО", "ИСТИНА"); 
	КонецЕсли;

	ТаблицаНезавершенныхРасчетов = Запрос.Выполнить().Выгрузить();

	НезавершенныеРасчеты.Загрузить(ТаблицаНезавершенныхРасчетов);

	ТаблицаНезавершенныхРасчетов.Свернуть("Валюта","Остаток,Перерасход");

	НезавершенныеРасчетыПоВалютам.Загрузить(ТаблицаНезавершенныхРасчетов);

	Если ОбновитьПодсказку Тогда
		Если ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных Тогда
			Элементы.ГруппаНезавершенныеРасчеты.Подсказка =
			НСтр("ru = 'Итоги рассчитаны без учета предыдущего аванса, так как сумма входящего остатка/перерасхода на закладке ""Аванс"" не соответствует данным учета'");
		Иначе
			Элементы.ГруппаНезавершенныеРасчеты.Подсказка = "";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДобавленныеКолонкиТаблиц")
Процедура АБК_ЗаполнитьДобавленныеКолонкиТаблиц()

	МассивДокументов = Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса");

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов,  Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументПерерасхода"), Истина);

	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов,  Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументОстатка"), Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО КАК ИФО,
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаКт
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетДт В (&РасчетыСПодотчетнымиЛицами)
	|				И СчетКт В (&СчетаДС)
	|				И ИФО = &ИФО
	|				И СубконтоДт1 = &Контрагент
	|				И Регистратор В (&МассивДокументов),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО,
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО КАК ИФО,
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ,
	|	СУММА(ВЫБОР
	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|		КОНЕЦ)
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			Организация = &Организация
	|				И СчетКт В (&РасчетыСПодотчетнымиЛицами)
	|				И СчетДт В (&СчетаДС)
	|				И ИФО = &ИФО
	|				И СубконтоКт1 = &Контрагент
	|				И Регистратор В (&МассивДокументов),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
	#Вставка
	|	ЖурналПроводокЕПСБУДвиженияССубконто.ИФО,
	#КонецВставки
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
	|			ТОГДА &ВалютаРуб
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ");

	Запрос.УстановитьПараметр("ИФО", 						Объект.ИФО);
	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудник", 					Объект.Сотрудник);
	Запрос.УстановитьПараметр("Контрагент", 				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Контрагент"));
	Запрос.УстановитьПараметр("ВалютаРуб", 					ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("МассивДокументов",			МассивДокументов);
	Запрос.УстановитьПараметр("РасчетыСПодотчетнымиЛицами", БухгалтерскийУчет.СписокСчетов("208.00"));
	Запрос.УстановитьПараметр("СчетаДС", 					БухгалтерскийУчет.СписокСчетов("201.00,210.03,304.00"));
	
	#Удаление
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
		#КонецУдаления
		#Вставка
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО")
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ИФО) Тогда
		#КонецВставки
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИФО = &ИФО", "ИСТИНА");
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Строки = Объект.Получено.НайтиСтроки(Новый Структура("ДокументАванса", Выборка.Регистратор));

		Если Строки.Количество() > 0 Тогда

			ЗаполнитьЗначенияСвойств(Строки[0], Выборка);

		КонецЕсли;

		Строки = Объект.ОстатокПерерасход.НайтиСтроки(Новый Структура("ДокументПерерасхода", Выборка.Регистратор));

		Если Строки.Количество() > 0 Тогда

			Строки[0].ВалютаПерерасхода = Выборка.Валюта;
			Строки[0].СуммаПерерасхода = Выборка.Сумма;
			
			#Вставка
			Строки[0].ИФОПерерасхода = Выборка.ИФО;
			#КонецВставки

		КонецЕсли;

		Строки = Объект.ОстатокПерерасход.НайтиСтроки(Новый Структура("ДокументОстатка", Выборка.Регистратор));

		Если Строки.Количество() > 0 Тогда

			Строки[0].ВалютаОстатка = Выборка.Валюта;
			Строки[0].СуммаОстатка = Выборка.Сумма; 
			
			#Вставка
			Строки[0].ИФООстатка = Выборка.ИФО;
			#КонецВставки

		КонецЕсли;

	КонецЦикла;

	ИзрасходованоОтражениеВУчетеОбновитьТекстВсехСтрок(ЭтотОбъект, Объект);

КонецПроцедуры

&НаКлиенте
Процедура АБК_ОстатокПерерасходДокументПерерасходаОбработкаВыбораПеред(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//АпогейБК
	Элементы.ОстатокПерерасход.ТекущиеДанные.ИФОПерерасхода 		= ВыбранноеЗначение.ИФО;
	//АпогейБК
КонецПроцедуры

&НаКлиенте
Процедура АБК_ОстатокПерерасходДокументОстаткаОбработкаВыбораПеред(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//АпогейБК
	Элементы.ОстатокПерерасход.ТекущиеДанные.ИФООстатка 		= ВыбранноеЗначение.ИФО;
	//АпогейБК
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДОНаСервере")
Процедура АБК_ЗаполнитьДОНаСервере()

	Если ЗначениеЗаполнено(Объект.ЗаявлениеНаВыдачуАванса) Тогда
		РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ЗаявлениеНаВыдачуАванса, "ОснованиеПринятияОбязательства, РазделЛицевогоСчета");
		Обязательство = РеквизитыЗаявления.ОснованиеПринятияОбязательства;
		РазделЛицСчета = РеквизитыЗаявления.РазделЛицевогоСчета;
	Иначе
		Обязательство = Объект.ОснованиеПринятияОбязательства;
		РазделЛицСчета = Объект.РазделЛицевогоСчета;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Обязательство) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		НСтр("ru='Не заполнено обязательное поле ""Основание принятия обязательства""'"));
		Возврат;
	КонецЕсли;

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка", Объект.Ссылка);
	Реквизиты.Вставить("Организация", Объект.Организация);
	Реквизиты.Вставить("Дата", Объект.Дата);
	Реквизиты.Вставить("СчетРасчетов", БухгалтерскийУчет.СчетПоКоду("208.00", Объект.Дата, Объект.Организация));
	Реквизиты.Вставить("Курс", Объект.Курс);
	Реквизиты.Вставить("Кратность", Объект.Кратность);

	Отказ = Ложь;
	ТаблицаРасходовПоДокументу = РасчетыСПодотчетнымиЛицами.ПодготовитьТаблицуРасходовПоАвансовомуОтчету(
	Объект.Ссылка, Реквизиты, Ложь);
	ТаблицаРасходов = РасчетыСПодотчетнымиЛицами.ТаблицаРасходовПоАвансовомуОтчетуСКурсамиВыдачи(
	ТаблицаРасходовПоДокументу, Объект.Ссылка, Реквизиты, Ложь);

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка", Объект.Ссылка);
	Реквизиты.Вставить("ЗаявлениеНаВыдачуАванса", Объект.ЗаявлениеНаВыдачуАванса);
	Реквизиты.Вставить("Обязательство", Обязательство);
	Реквизиты.Вставить("РазделЛицСчета", РазделЛицСчета);

	ТаблицаОбязательств = РасчетыСПодотчетнымиЛицами.ТаблицаКорректировкиДенежныхОбязательствПоАвансовомуОтчету(
	Реквизиты, ТаблицаРасходов);
	
	#Удаление
	Объект.ДенежныеОбязательства.Загрузить(ТаблицаОбязательств);
	#КонецУдаления
	
	#Вставка   
	Объект.ДенежныеОбязательства.Очистить();
	
	ДанныеКолонкиИФО = ПолучитьДанныеДопКолонки("ИФО", "ДенежныеОбязательства");
	
	ИмяРеквизита = ДанныеКолонкиИФО.ИмяРеквизита;
	
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Для Каждого Стр из ТаблицаОбязательств Цикл
			НовСтр = Объект.ДенежныеОбязательства.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			НовСтр[ИмяРеквизита] = Стр.ИФО;
		КонецЦикла;                                                
	Иначе
		Объект.ДенежныеОбязательства.Загрузить(ТаблицаОбязательств);
	КонецЕсли;
	#КонецВставки


	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Функция ЕстьРеквизитОбъекта(ДокументСсылка, ИмяРеквизита)
	Возврат ОбщегоНазначенияБГУ.ЕстьРеквизитДокумента(ИмяРеквизита, ДокументСсылка.Метаданные());	
КонецФункции


&НаКлиенте
Процедура АБК_ИзрасходованоПриходныйДокументОбработкаВыбораПеред(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Израсходовано.ТекущиеДанные;
	//АпогейБК   
	ДанныеКолонкиИФО = ПолучитьДанныеДопКолонки("ИФО", "Израсходовано");
	
	ИмяРеквизита = ДанныеКолонкиИФО.ИмяРеквизита;
	
	Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
		ТекущиеДанные[ИмяРеквизита] = ВыбранноеЗначение.ИФО;                                                
	КонецЕсли;
	//АпогейБК                                  
КонецПроцедуры


&НаСервере
Процедура АБК_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	// Типовые операции и дополнительные табличные части
	БухгалтерскиеОперацииСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец Типовые операции и дополнительные табличные части
КонецПроцедуры

