
&После("ДобавитьКомандыПечати")
Процедура АБК_ДобавитьКомандыПечати(КомандыПечати)

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.ОтчетОРасходахПодотчетногоЛица";
	КомандаПечати.Идентификатор = "ПФ_MXL_ОтчетОРасходахПодотчетногоЛица504520_ОстатокПерерасход";
	КомандаПечати.Представление = НСтр("ru = 'Отчет о расходах подотчетного лица (остаток/перерасход)'");
	КомандаПечати.Порядок = 3;

КонецПроцедуры


&После("Печать")
Процедура АБК_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ОтчетОРасходахПодотчетногоЛица504520_ОстатокПерерасход") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПФ_MXL_ОтчетОРасходахПодотчетногоЛица504520_ОстатокПерерасход",
		"Отчет о расходах подотчетного лица",
		ПечатьОтчетаОРасходахПодотчетногоЛица_ОстатокПерерасход(МассивОбъектов, ОбъектыПечати));

	КонецЕсли;

КонецПроцедуры


Функция ПечатьОтчетаОРасходахПодотчетногоЛица_ОстатокПерерасход(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПФ_MXL_ОтчетОРасходахПодотчетногоЛица504520_ОстатокПерерасход";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетОРасходахПодотчетногоЛица.ПФ_MXL_ОтчетОРасходахПодотчетногоЛица504520_ОстатокПерерасход");

	ОбластьЗаголовок 										= Макет.ПолучитьОбласть("Заголовок");
	ОбластьСтрокаРасчеты 									= Макет.ПолучитьОбласть("СтрокаРасчеты");
	ОбластьШапкаУведомление 								= Макет.ПолучитьОбласть("ШапкаУведомление");
	ОбластьСтрокаУведомление 								= Макет.ПолучитьОбласть("СтрокаУведомление");
	ОбластьПодвалУведомление 								= Макет.ПолучитьОбласть("ПодвалУведомление");
	ОбластьШапкаАвансовыйОтчет 								= Макет.ПолучитьОбласть("ШапкаАвансовыйОтчет");
	ОбластьСтрокаАвансовыйОтчет 							= Макет.ПолучитьОбласть("СтрокаАвансовыйОтчет");

	ОбластьШапкаРасходы 									= Макет.ПолучитьОбласть("ШапкаРасходы");
	ОбластьСтрокаРасходы 									= Макет.ПолучитьОбласть("СтрокаРасходы");
	ОбластьИтогоРасходы 									= Макет.ПолучитьОбласть("ИтогоРасходы");
	ОбластьСтрокаРасходыПоКодамВалютПервая 					= Макет.ПолучитьОбласть("СтрокаРасходыПоКодамВалютПервая");
	ОбластьСтрокаРасходыПоКодамВалют 						= Макет.ПолучитьОбласть("СтрокаРасходыПоКодамВалют");
	ОбластьСтрокаРасходыПоСпособамОбеспеченияПервая 		= Макет.ПолучитьОбласть("СтрокаРасходыПоСпособамОбеспеченияПервая");
	ОбластьСтрокаРасходыПоСпособамОбеспечения 				= Макет.ПолучитьОбласть("СтрокаРасходыПоСпособамОбеспечения");
	ОбластьСтрокаРасходыПоКОСГУПервая 						= Макет.ПолучитьОбласть("СтрокаРасходыПоКОСГУПервая");
	ОбластьСтрокаРасходыПоКОСГУ 							= Макет.ПолучитьОбласть("СтрокаРасходыПоКОСГУ");
	ОбластьПодвалРасходы 									= Макет.ПолучитьОбласть("ПодвалРасходы");

	ОбластьШапкаРасходыЗакупка 								= Макет.ПолучитьОбласть("ШапкаРасходыЗакупка");
	ОбластьСтрокаРасходыЗакупка 							= Макет.ПолучитьОбласть("СтрокаРасходыЗакупка");
	ОбластьИтогоРасходыЗакупка 								= Макет.ПолучитьОбласть("ИтогоРасходыЗакупка");
	ОбластьСтрокаРасходыЗакупкаПоКБКПервая 					= Макет.ПолучитьОбласть("СтрокаРасходыЗакупкаПоКБКПервая");
	ОбластьСтрокаРасходыЗакупкаПоКБК 						= Макет.ПолучитьОбласть("СтрокаРасходыЗакупкаПоКБК");
	ОбластьСтрокаРасходыЗакупкаПоКОСГУПервая 				= Макет.ПолучитьОбласть("СтрокаРасходыЗакупкаПоКОСГУПервая");
	ОбластьСтрокаРасходыЗакупкаПоКОСГУ 						= Макет.ПолучитьОбласть("СтрокаРасходыЗакупкаПоКОСГУ");
	ОбластьПодвалРасходыЗакупка 							= Макет.ПолучитьОбласть("ПодвалРасходыЗакупка");

	ОбластьШапкаОтчетОВыполненнойРаботе 					= Макет.ПолучитьОбласть("ШапкаОтчетОВыполненнойРаботе");
	ОбластьСтрокаОтчетОВыполненнойРаботе 					= Макет.ПолучитьОбласть("СтрокаОтчетОВыполненнойРаботе");
	ОбластьПодвалОтчетОВыполненнойРаботе 					= Макет.ПолучитьОбласть("ПодвалОтчетОВыполненнойРаботе");
	ОбластьШапкаОбоснованиеРасходов 						= Макет.ПолучитьОбласть("ШапкаОбоснованиеРасходов");
	ОбластьСтрокаОбоснованиеРасходов 						= Макет.ПолучитьОбласть("СтрокаОбоснованиеРасходов");
	ОбластьИтогоОбоснованиеРасходов 						= Макет.ПолучитьОбласть("ИтогоОбоснованиеРасходов");
	ОбластьСтрокаОбоснованиеПоКодамВалютПервая 				= Макет.ПолучитьОбласть("СтрокаОбоснованиеПоКодамВалютПервая");
	ОбластьСтрокаОбоснованиеПоКодамВалют 					= Макет.ПолучитьОбласть("СтрокаОбоснованиеПоКодамВалют");
	ОбластьПодвалОбоснованиеРасходов 						= Макет.ПолучитьОбласть("ПодвалОбоснованиеРасходов");
	ОбластьШапкаОбязательства 								= Макет.ПолучитьОбласть("ШапкаОбязательства");
	ОбластьШапкаПринятыеРасходы 							= Макет.ПолучитьОбласть("ШапкаПринятыеРасходы");
	ОбластьСтрокаПринятыеРасходы 							= Макет.ПолучитьОбласть("СтрокаПринятыеРасходы");
	ОбластьИтогоПринятыеРасходы 							= Макет.ПолучитьОбласть("ИтогоПринятыеРасходы");
	ОбластьСтрокаПринятыеРасходыПоКодамВалютПервая 			= Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоКодамВалютПервая");
	ОбластьСтрокаПринятыеРасходыПоКодамВалют 				= Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоКодамВалют");
	ОбластьСтрокаПринятыеРасходыПоСпособамОбеспеченияПервая = Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоСпособамОбеспеченияПервая");
	ОбластьСтрокаПринятыеРасходыПоСпособамОбеспечения 		= Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоСпособамОбеспечения");
	ОбластьСтрокаПринятыеРасходыПоКОСГУПервая 				= Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоКОСГУПервая");
	ОбластьСтрокаПринятыеРасходыПоКОСГУ 					= Макет.ПолучитьОбласть("СтрокаПринятыеРасходыПоКОСГУ");
	ОбластьШапкаДО 											= Макет.ПолучитьОбласть("ШапкаДО");
	ОбластьСтрокаДО 										= Макет.ПолучитьОбласть("СтрокаДО");
	ОбластьИтогоДО 											= Макет.ПолучитьОбласть("ИтогоДО");
	ОбластьСтрокаДОПоКБКПервая 								= Макет.ПолучитьОбласть("СтрокаДОПоКБКПервая");
	ОбластьСтрокаДОПоКБК 									= Макет.ПолучитьОбласть("СтрокаДОПоКБК");
	ОбластьСтрокаДОПоКОСГУПервая 							= Макет.ПолучитьОбласть("СтрокаДОПоКОСГУПервая");
	ОбластьСтрокаДОПоКОСГУ 									= Макет.ПолучитьОбласть("СтрокаДОПоКОСГУ");
	ОбластьПодвалДО 										= Макет.ПолучитьОбласть("ПодвалДО");

	ВалютаРегламентированногоУчета = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета();
	КодВалютыРегламентированногоУчета = ВалютаРегламентированногоУчета.Код;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРасходахПодотчетногоЛицаПолучено.НомерСтроки КАК НомерСтроки,
	|	ОтчетОРасходахПодотчетногоЛицаПолучено.ДокументАванса КАК ДокументАванса,
	|	ОтчетОРасходахПодотчетногоЛицаПолучено.Ссылка КАК Ссылка,
	|	ОтчетОРасходахПодотчетногоЛицаПолучено.Ссылка.Сотрудник.Контрагент КАК СотрудникКонтрагент
	|ПОМЕСТИТЬ ПОЛУЧЕНОАВАНСОВ
	|ИЗ
	|	Документ.ОтчетОРасходахПодотчетногоЛица.Получено КАК ОтчетОРасходахПодотчетногоЛицаПолучено
	|ГДЕ
	|	ОтчетОРасходахПодотчетногоЛицаПолучено.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Период КАК Дата,
	|	ГОД(ЖурналПроводокЕПСБУДвиженияССубконто.Период) КАК Год,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КФО КАК КФО,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.СчетДт КАК Счет,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КПСДт КАК КБК,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.КПСДт.Код КАК КБККод,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА &ВалютаРегУчета
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА &КодВалютыРегУчета
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт.Код
	|	КОНЕЦ КАК КодВалюты,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВРублях,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА 0
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК СуммаВВалюте,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК СуммаРасчетов,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРегУчета
	|			ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК СуммаРасчетовПоОтчету,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Сумма КАК РублевыйЭквивалент,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.Сумма КАК РублевыйЭквивалентПоОтчету,
	|	ПОЛУЧЕНОАВАНСОВ.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
	|			,
	|			,
	|			СчетДт В (&Счет208)
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						ПОЛУЧЕНОАВАНСОВ.ДокументАванса
	|					ИЗ
	|						ПОЛУЧЕНОАВАНСОВ)
	|				И СубконтоДт1 В
	|					(ВЫБРАТЬ
	|						ПОЛУЧЕНОАВАНСОВ.СотрудникКонтрагент
	|					ИЗ
	|						ПОЛУЧЕНОАВАНСОВ),
	|			,
	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПОЛУЧЕНОАВАНСОВ КАК ПОЛУЧЕНОАВАНСОВ
	|		ПО ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор = ПОЛУЧЕНОАВАНСОВ.ДокументАванса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЖурналПроводокЕПСБУДвиженияССубконто.МоментВремени,
	|	ЖурналПроводокЕПСБУДвиженияССубконто.НомерСтроки";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("КодВалютыРегУчета", КодВалютыРегламентированногоУчета);
	Запрос.УстановитьПараметр("Счет208", БухгалтерскийУчет.СписокСчетов("208.00"));

	Авансы = Запрос.Выполнить().Выгрузить();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетОРасходахПодотчетногоЛица.Ссылка КАК Ссылка,
	|	ОтчетОРасходахПодотчетногоЛица.Номер КАК Номер,
	|	ОтчетОРасходахПодотчетногоЛица.Дата КАК Дата,
	|	ОтчетОРасходахПодотчетногоЛица.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ОтчетОРасходахПодотчетногоЛица.Организация.НаименованиеПолное = """"
	|			ТОГДА ВЫБОР
	|					КОГДА ОтчетОРасходахПодотчетногоЛица.Организация.НаименованиеСокращенное = """"
	|						ТОГДА ОтчетОРасходахПодотчетногоЛица.Организация.Наименование
	|					ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Организация.НаименованиеСокращенное
	|				КОНЕЦ
	|		ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Организация.НаименованиеПолное
	|	КОНЕЦ КАК НаименованиеОрганизации,
	|	ОтчетОРасходахПодотчетногоЛица.Организация.КодПоРПБС КАК КодПоСводномуРееструОрганизации,
	|	ЕСТЬNULL(ОтчетОРасходахПодотчетногоЛица.Организация.КодПоППП.Код, ""000"") КАК КодПоППП,
	|	ОтчетОРасходахПодотчетногоЛица.ИФО КАК ИФО,
	|	ОтчетОРасходахПодотчетногоЛица.Подразделение КАК Подразделение,
	|	ОтчетОРасходахПодотчетногоЛица.Подразделение.Наименование КАК СтруктурноеПодразделение,
	|	ОтчетОРасходахПодотчетногоЛица.Подразделение.Код КАК КодСтруктурногоПодразделения,
	|	ОтчетОРасходахПодотчетногоЛица.Сотрудник КАК Сотрудник,
	|	ОтчетОРасходахПодотчетногоЛица.Сотрудник.Код КАК ТабельныйНомер,
	|	ОтчетОРасходахПодотчетногоЛица.Должность КАК Должность,
	|	ОтчетОРасходахПодотчетногоЛица.ОсобыйСтатус КАК ОсобыйСтатус,
	|	ОтчетОРасходахПодотчетногоЛица.НазначениеАванса КАК НазначениеАванса,
	|	ОтчетОРасходахПодотчетногоЛица.СодержаниеЗадания КАК СодержаниеЗадания,
	|	ОтчетОРасходахПодотчетногоЛица.РезультатыВыполненнойРаботы КАК РезультатыВыполненнойРаботы,
	|	ОтчетОРасходахПодотчетногоЛица.КоличествоДокументов КАК КоличествоДокументов,
	|	ОтчетОРасходахПодотчетногоЛица.КоличествоЛистов КАК КоличествоЛистов,
	|	ОтчетОРасходахПодотчетногоЛица.Руководитель КАК Руководитель,
	|	ОтчетОРасходахПодотчетногоЛица.РуководительПодразделения КАК РуководительПодразделения,
	|	ОтчетОРасходахПодотчетногоЛица.РуководительФинЭкономПодразделения КАК РуководительФинЭкономПодразделения,
	|	ОтчетОРасходахПодотчетногоЛица.Ответственный КАК Ответственный,
	|	ОтчетОРасходахПодотчетногоЛица.ОтветственныйИсполнительБух КАК ОтветственныйИсполнительБух,
	|	ОтчетОРасходахПодотчетногоЛица.ОтветственныйЗаПроверкуДокументов КАК ОтветственныйЗаПроверкуДокументов,
	|	ОтчетОРасходахПодотчетногоЛица.Комментарий КАК Комментарий,
	|	ОтчетОРасходахПодотчетногоЛица.КомандировкаЗаГраницу КАК КомандировкаЗаГраницу,
	|	ПРЕДСТАВЛЕНИЕ(ОтчетОРасходахПодотчетногоЛица.ДокументОснование) КАК ДокументОснованиеВид,
	|	ТИПЗНАЧЕНИЯ(ОтчетОРасходахПодотчетногоЛица.ДокументОснование) КАК ДокументОснованиеТип,
	|	ОтчетОРасходахПодотчетногоЛица.ДокументОснование.Номер КАК ДокументОснованиеНомер,
	|	ОтчетОРасходахПодотчетногоЛица.ДокументОснование.Дата КАК ДокументОснованиеДата,
	|	ОтчетОРасходахПодотчетногоЛица.ДатаУтверждения КАК ДатаУтверждения,
	|	ОтчетОРасходахПодотчетногоЛица.ОтчетОВыполненнойРаботе.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ОтчетОВыполненнойРаботе.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|				ТОГДА &СтранаРоссия
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ОтчетОВыполненнойРаботе.Страна
	|		КОНЕЦ КАК Страна,
	|		ПунктНазначения КАК ПунктНазначения,
	|		ДатаНачала КАК ДатаНачала,
	|		ДатаОкончания КАК ДатаОкончания,
	|		ДеньВыезда КАК ДеньВыезда,
	|		ДеньПриезда КАК ДеньПриезда,
	|		Продолжительность КАК Продолжительность
	|	) КАК ОтчетОВыполненнойРаботе,
	|	ОтчетОРасходахПодотчетногоЛица.Суточные.(
	|		""1_Суточные"" КАК ВидРасхода,
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		НаименованиеДокумента КАК НаименованиеДокумента,
	|		ДеньВыезда КАК ДатаОтправленияЗаезда,
	|		ДеньПриезда КАК ДатаПрибытияВыезда,
	|		НЕОПРЕДЕЛЕНО КАК ДатаПересеченияГраницы,
	|		НЕОПРЕДЕЛЕНО КАК КатегорияПоНормативу,
	|		НЕОПРЕДЕЛЕНО КАК КатегорияФактическая,
	|		КоличествоДней КАК Количество,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.КоличествоДней = 0
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаФакт
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаФакт / ОтчетОРасходахПодотчетногоЛица.Суточные.КоличествоДней
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &ВалютаРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Суточные.Валюта
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &КодВалютыРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Суточные.Валюта.Код
	|		КОНЕЦ КАК КодВалюты,
	|		СуммаПлан КАК СуммаПлан,
	|		СуммаПланВРублевомЭквиваленте КАК СуммаПланВРублевомЭквиваленте,
	|		СуммаФакт КАК СуммаФакт,
	|		СуммаПринято КАК СуммаПринято,
	|		ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу) КАК СпособОбеспечения,
	|		ИСТИНА КАК РасчетыПоАвансовомуОтчету,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		ПричинаОтклонения КАК ПричинаОтклонения,
	|		ПричинаОтклонения.Код КАК КодПричиныОтклонения,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаФакт
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаФакт > 0
	|					И ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаПринято = 0
	|				ТОГДА ""О""
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Суточные.СуммаФакт
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировкиО,
	|		Страна КАК Страна,
	|		Территория КАК Территория,
	|		ДополнительноеУсловие КАК ДополнительноеУсловие,
	|		ЛОЖЬ КАК ПоДокументу
	|	) КАК Суточные,
	|	ОтчетОРасходахПодотчетногоЛица.Проезд.(
	|		ВЫРАЗИТЬ(""2_Проезд"" КАК СТРОКА(20)) КАК ВидРасхода,
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		НаименованиеДокумента КАК НаименованиеДокумента,
	|		ДатаОтправления КАК ДатаОтправленияЗаезда,
	|		ДатаПрибытия КАК ДатаПрибытияВыезда,
	|		ДатаПересеченияГраницы КАК ДатаПересеченияГраницы,
	|		1 КАК Количество,
	|		СуммаФакт КАК Цена,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &ВалютаРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проезд.Валюта
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &КодВалютыРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проезд.Валюта.Код
	|		КОНЕЦ КАК КодВалюты,
	|		СуммаПлан КАК СуммаПлан,
	|		СуммаПланВРублевомЭквиваленте КАК СуммаПланВРублевомЭквиваленте,
	|		СуммаФакт КАК СуммаФакт,
	|		СуммаПринято КАК СуммаПринято,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|					ИЛИ ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК РасчетыПоАвансовомуОтчету,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		ПричинаОтклонения КАК ПричинаОтклонения,
	|		ПричинаОтклонения.Код КАК КодПричиныОтклонения,
	|		ВЫБОР
	|			КОГДА ПОДСТРОКА(ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияПоНормативу.Описание, 1, 1) = """"
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияПоНормативу.Наименование
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияПоНормативу.Описание
	|		КОНЕЦ КАК КатегорияПоНормативу,
	|		ВЫБОР
	|			КОГДА ПОДСТРОКА(ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияФактическая.Описание, 1, 1) = """"
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияФактическая.Наименование
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проезд.КатегорияФактическая.Описание
	|		КОНЕЦ КАК КатегорияФактическая,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаФакт > 0
	|					И ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаПринято = 0
	|					И (ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""О""
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Проезд.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проезд.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировкиО,
	|		ВидТранспорта КАК ВидТранспорта,
	|		ЛОЖЬ КАК ПоДокументу
	|	) КАК Проезд,
	|	ОтчетОРасходахПодотчетногоЛица.Проживание.(
	|		""3_Проживание"" КАК ВидРасхода,
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		НаименованиеДокумента КАК НаименованиеДокумента,
	|		ДатаЗаезда КАК ДатаОтправленияЗаезда,
	|		ДатаВыезда КАК ДатаПрибытияВыезда,
	|		НЕОПРЕДЕЛЕНО КАК ДатаПересеченияГраницы,
	|		КоличествоДней КАК Количество,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.КоличествоДней = 0
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаФакт
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаФакт / ОтчетОРасходахПодотчетногоЛица.Проживание.КоличествоДней
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &ВалютаРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проживание.Валюта
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &КодВалютыРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проживание.Валюта.Код
	|		КОНЕЦ КАК КодВалюты,
	|		СуммаПлан КАК СуммаПлан,
	|		СуммаПланВРублевомЭквиваленте КАК СуммаПланВРублевомЭквиваленте,
	|		СуммаФакт КАК СуммаФакт,
	|		СуммаПринято КАК СуммаПринято,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК РасчетыПоАвансовомуОтчету,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		ПричинаОтклонения КАК ПричинаОтклонения,
	|		ПричинаОтклонения.Код КАК КодПричиныОтклонения,
	|		ВЫБОР
	|			КОГДА ПОДСТРОКА(ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияПоНормативу.Описание, 1, 1) = """"
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияПоНормативу.Наименование
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияПоНормативу.Описание
	|		КОНЕЦ КАК КатегорияПоНормативу,
	|		ВЫБОР
	|			КОГДА ПОДСТРОКА(ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияФактическая.Описание, 1, 1) = """"
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияФактическая.Наименование
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.Проживание.КатегорияФактическая.Описание
	|		КОНЕЦ КАК КатегорияФактическая,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаФакт > 0
	|					И ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаПринято = 0
	|					И (ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""О""
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.Проживание.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.Проживание.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировкиО,
	|		Страна КАК Страна,
	|		ТерриторияСНадбавками КАК ТерриторияСНадбавками,
	|		УсловиеПроживания КАК УсловиеПроживания,
	|		ЛОЖЬ КАК ПоДокументу
	|	) КАК Проживание,
	|	ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.(
	|		""4_ПрочиеРасходы"" КАК ВидРасхода,
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НаименованиеРасхода КАК НаименованиеРасхода,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		НаименованиеДокумента КАК НаименованиеДокумента,
	|		НЕОПРЕДЕЛЕНО КАК ДатаОтправленияЗаезда,
	|		НЕОПРЕДЕЛЕНО КАК ДатаПрибытияВыезда,
	|		НЕОПРЕДЕЛЕНО КАК ДатаПересеченияГраницы,
	|		НЕОПРЕДЕЛЕНО КАК КатегорияПоНормативу,
	|		НЕОПРЕДЕЛЕНО КАК КатегорияФактическая,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Количество = 0
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаФакт
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаФакт / ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Количество
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &ВалютаРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Валюта
	|		КОНЕЦ КАК Валюта,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА &КодВалютыРегУчета
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.Валюта.Код
	|		КОНЕЦ КАК КодВалюты,
	|		СуммаПлан КАК СуммаПлан,
	|		СуммаПланВРублевомЭквиваленте КАК СуммаПланВРублевомЭквиваленте,
	|		СуммаФакт КАК СуммаФакт,
	|		СуммаПринято КАК СуммаПринято,
	|		СпособОбеспечения КАК СпособОбеспечения,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК РасчетыПоАвансовомуОтчету,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		ПричинаОтклонения КАК ПричинаОтклонения,
	|		ПричинаОтклонения.Код КАК КодПричиныОтклонения,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаФакт > 0
	|					И ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаПринято = 0
	|					И (ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""О""
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СуммаФакт
	|					И (ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.АвансПодотчетномуЛицу)
	|						ИЛИ ОтчетОРасходахПодотчетногоЛица.ПрочиеРасходы.СпособОбеспечения = ЗНАЧЕНИЕ(Перечисление.СпособыОбеспеченияКомандировки.ВыдачаДенежныхДокументов))
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировкиО,
	|		ЛОЖЬ КАК ПоДокументу
	|	) КАК ПрочиеРасходы,
	|	ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.(
	|		""5_ТоварыРаботыУслуги"" КАК ВидРасхода,
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НомерСтроки КАК НомерСтрокиДокумента,
	|		ДатаДокумента КАК ДатаДокумента,
	|		НомерДокумента КАК НомерДокумента,
	|		НаименованиеДокумента КАК НаименованиеДокумента,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.НаименованиеСокращенное = """"
	|				ТОГДА ВЫБОР
	|						КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|								И НЕ ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное = """"
	|							ТОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное
	|						ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.Наименование
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Контрагент.НаименованиеСокращенное, """")
	|		КОНЕЦ КАК НаименованиеКонтрагента,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Номенклатура ССЫЛКА Справочник.ДенежныеДокументы
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Номенклатура.Наименование
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Номенклатура.НаименованиеПолное = """"
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Номенклатура.Наименование
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Номенклатура.НаименованиеПолное
	|		КОНЕЦ КАК НоменклатураПредставление,
	|		ПРЕДСТАВЛЕНИЕ(ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|		&ВалютаРегУчета КАК Валюта,
	|		&КодВалютыРегУчета КАК КодВалюты,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		СуммаПлан КАК СуммаПлан,
	|		СуммаФакт КАК СуммаФакт,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.Ссылка.СуммаВключаетНДС
	|				ТОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаПринято
	|			ИНАЧЕ ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаПринято + ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаНДС
	|		КОНЕЦ КАК СуммаПринято,
	|		ИСТИНА КАК РасчетыПоАвансовомуОтчету,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаФакт
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировки,
	|		ВЫБОР
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаФакт > 0
	|					И ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаПринято = 0
	|				ТОГДА ""О""
	|			КОГДА ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаПлан <> ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги.СуммаФакт
	|				ТОГДА ""К""
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК КодКорректировкиО,
	|		ПоДокументу КАК ПоДокументу
	|	) КАК ТоварыРаботыУслуги,
	|	ОтчетОРасходахПодотчетногоЛица.Получено.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ДокументАванса КАК ДокументАванса
	|	) КАК Получено,
	|	ОтчетОРасходахПодотчетногоЛица.ДенежныеОбязательства.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		КФО КАК КФО,
	|		КПС КАК КБК,
	|		КПС.Код КАК КБККод,
	|		КЭК КАК КОСГУ,
	|		СуммаПоОснованию КАК СуммаПоОснованию,
	|		СуммаПоОтчету КАК СуммаПоОтчету,
	|		ОтчетОРасходахПодотчетногоЛица.ДенежныеОбязательства.СуммаПоОтчету - ОтчетОРасходахПодотчетногоЛица.ДенежныеОбязательства.СуммаПоОснованию КАК Отклонение,
	|		ФинансовыйГод КАК ФинансовыйГод
	|	) КАК ДенежныеОбязательства,
	|	ОтчетОРасходахПодотчетногоЛица.СпособыВыдачи.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Валюта КАК Валюта,
	|		Валюта.Код КАК КодВалюты,
	|		СпособВыдачи КАК СпособВыдачи
	|	) КАК СпособыВыдачи,
	|	ОтчетОРасходахПодотчетногоЛица.КурсыВалют.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Валюта КАК Валюта,
	|		Курс КАК Курс,
	|		Кратность КАК Кратность
	|	) КАК КурсыВалют
	|ИЗ
	|	Документ.ОтчетОРасходахПодотчетногоЛица КАК ОтчетОРасходахПодотчетногоЛица
	|ГДЕ
	|	ОтчетОРасходахПодотчетногоЛица.Ссылка В(&МассивОбъектов)";

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СтранаРоссия", ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));
	Запрос.УстановитьПараметр("ВалютаРегУчета", ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("КодВалютыРегУчета", КодВалютыРегламентированногоУчета);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	ПервыйДокумент = Истина;

	Пока Выборка.Следующий() Цикл

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		СтруктураДанных = Новый Структура;
		Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
			СтруктураДанных.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;

		ДокументОснованиеРешение = СтруктураДанных.ДокументОснованиеТип = Тип("ДокументСсылка.РешениеОКомандировании");
		ДокументОснованиеЗакупка = СтруктураДанных.ДокументОснованиеТип = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъема")
		ИЛИ СтруктураДанных.ДокументОснованиеТип = Тип("ДокументСсылка.ЗаявкаОбоснованиеЗакупкиМалогоОбъемаЧерезПодотчетноеЛицо");
		ДокументОснованиеСеверяне = СтруктураДанных.ДокументОснованиеТип = Тип("ДокументСсылка.РешениеОКомпенсацииРасходовДляКрайнегоСевера");

		Сотрудники = Новый Массив;
		Сотрудники.Добавить(СтруктураДанных.Сотрудник);
		Сотрудники.Добавить(СтруктураДанных.Руководитель);
		Сотрудники.Добавить(СтруктураДанных.РуководительПодразделения);
		Сотрудники.Добавить(СтруктураДанных.РуководительФинЭкономПодразделения);
		Сотрудники.Добавить(СтруктураДанных.ОтветственныйИсполнительБух);
		Сотрудники.Добавить(СтруктураДанных.ОтветственныйЗаПроверкуДокументов);

		ТребуемыеДанные = Новый Массив;
		ТребуемыеДанные.Добавить("Фамилия");
		ТребуемыеДанные.Добавить("Имя");
		ТребуемыеДанные.Добавить("Отчество");
		ТребуемыеДанные.Добавить("Должность");
		ТребуемыеДанные.Добавить("КатегорияДолжностиГосударственнойСлужбы");
		ТребуемыеДанные.Добавить("ГруппаДолжностиГосударственнойСлужбы");
		ТребуемыеДанные.Добавить("ВидДоговора");

		ДанныеСотрудников = Справочники.Сотрудники.ПолучитьДанныеСотрудников(Сотрудники, ТребуемыеДанные, СтруктураДанных.Дата);

		СтруктрураФИО = Новый Структура;

		Если ЗначениеЗаполнено(СтруктураДанных.Сотрудник) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.Сотрудник, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("СотрудникФамилия", ДанныеСотрудника.Фамилия);
			СтруктураДанных.Вставить("СотрудникИмя", ДанныеСотрудника.Имя);
			СтруктураДанных.Вставить("СотрудникОтчество", ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("СотрудникДолжность", СтруктураДанных.Должность);
			СтруктураДанных.Вставить("СотрудникИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("СотрудникКатегорияДолжностиГосударственнойСлужбы", ДанныеСотрудника.КатегорияДолжностиГосударственнойСлужбы);
			СтруктураДанных.Вставить("СотрудникГруппаДолжностиГосударственнойСлужбы", ДанныеСотрудника.ГруппаДолжностиГосударственнойСлужбы);
			СтруктураДанных.Вставить("СотрудникВидДоговора", ДанныеСотрудника.ВидДоговора);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.Руководитель) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.Руководитель, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("РуководительИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("РуководительДолжность", ДанныеСотрудника.ДолжностьНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.РуководительПодразделения) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.РуководительПодразделения, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("РуководительПодразделенияИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("РуководительПодразделенияДолжность", ДанныеСотрудника.ДолжностьНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.РуководительФинЭкономПодразделения) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.РуководительФинЭкономПодразделения, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("РуководительФЭПИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("РуководительФЭПДолжность", ДанныеСотрудника.ДолжностьНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОтветственныйИсполнительБух) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.ОтветственныйИсполнительБух, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("ОтветственныйИсполнительБухИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("ОтветственныйИсполнительБухДолжность", ДанныеСотрудника.ДолжностьНаименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОтветственныйЗаПроверкуДокументов) Тогда
			ДанныеСотрудника = ДанныеСотрудников.Найти(СтруктураДанных.ОтветственныйЗаПроверкуДокументов, "Ссылка");
			СтруктрураФИО.Вставить("Фамилия", 	ДанныеСотрудника.Фамилия);
			СтруктрураФИО.Вставить("Имя", 		ДанныеСотрудника.Имя);
			СтруктрураФИО.Вставить("Отчество", 	ДанныеСотрудника.Отчество);
			СтруктураДанных.Вставить("ОтветственныйЗаПроверкуДокументовИнициалыФамилия", КорреспондентыКлиентСервер.ФИО(СтруктрураФИО, Истина));
			СтруктураДанных.Вставить("ОтветственныйЗаПроверкуДокументовДолжность", ДанныеСотрудника.ДолжностьНаименование);
		КонецЕсли;

		СтруктураДаты = ПлатежноРасчетныеДокументы.РазложитьДатуДляПечати(СтруктураДанных.Дата);
		СтруктураДанных.Вставить("ЧислоДаты", 	СтруктураДаты.Число);
		СтруктураДанных.Вставить("МесяцДаты", 	СтруктураДаты.Месяц);
		СтруктураДанных.Вставить("ГодДаты", 	СтруктураДаты.Год);

		СтруктураДаты = ПлатежноРасчетныеДокументы.РазложитьДатуДляПечати(СтруктураДанных.ДатаУтверждения);
		СтруктураДанных.Вставить("ЧислоДатыУтв",СтруктураДаты.Число);
		СтруктураДанных.Вставить("МесяцДатыУтв",СтруктураДаты.Месяц);
		СтруктураДанных.Вставить("ГодДатыУтв", 	СтруктураДаты.Год);

		СтруктураДанных.Номер = ОбщегоНазначенияБГУ.ПолучитьНомерДляПечатиПоНастройке(СтруктураДанных.Ссылка, СтруктураДанных.Номер);

		ПозицияНомера = СтрНайти(СтруктураДанных.ДокументОснованиеВид, СтруктураДанных.ДокументОснованиеНомер);

		Если ПозицияНомера > 0 Тогда
			СтруктураДанных.ДокументОснованиеВид = Лев(СтруктураДанных.ДокументОснованиеВид, ПозицияНомера - 2);
		КонецЕсли;

		ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанных);

		ТабличныйДокумент.Вывести(ОбластьЗаголовок);

		АвансыПоОтчету = Авансы.Скопировать(Новый Структура("Ссылка", СтруктураДанных.Ссылка));

		ДатаДокумента = ?(ЗначениеЗаполнено(СтруктураДанных.ДатаУтверждения), СтруктураДанных.ДатаУтверждения,
		?(ЗначениеЗаполнено(СтруктураДанных.Дата), СтруктураДанных.Дата, ТекущаяДатаСеанса()));

		РегистрыСведений.СоответствиеКПСПриПереносеОстатков.ЗаменитьКПСвТаблицахСУчетомПереносаОстатковПоКПС(
		ДатаДокумента, АвансыПоОтчету, "КБК");

		Для Каждого СтрокаАванс Из АвансыПоОтчету Цикл
			СтрокаАванс.КБККод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаАванс.КБК, "Код");
		КонецЦикла;

		ОстаткиАвансов = АвансыПоОтчету.Скопировать();
		ОстаткиАвансов.Свернуть(
		"Год,КФО,Счет,КБК,КБККод,Валюта",
		"СуммаРасчетов,СуммаРасчетовПоОтчету,РублевыйЭквивалент,РублевыйЭквивалентПоОтчету");
		ОстаткиАвансов.Сортировать("Год");

		КурсыВалют = СтруктураДанных.КурсыВалют.Выгрузить();

		Счета208 = БухгалтерскиеОперации.СчетПоКоду("208.00", СтруктураДанных.Дата);

		ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));

		МассивТЧ = Новый Массив;

		Если ДокументОснованиеЗакупка Тогда

			МассивТЧ.Добавить("ТоварыРаботыУслуги");

			ТаблицаИзрасходовано = СтруктураДанных.ТоварыРаботыУслуги.Выгрузить();

		ИначеЕсли ДокументОснованиеСеверяне Тогда

			МассивТЧ.Добавить("Проезд");
			МассивТЧ.Добавить("ПрочиеРасходы");

			ТаблицаИзрасходовано = СтруктураДанных.Проезд.Выгрузить();

			СтруктураДанных.Вставить("КолонтитулСтраницы4", "Форма 0504520, с. 4");

		Иначе

			МассивТЧ.Добавить("Суточные");
			МассивТЧ.Добавить("Проезд");
			МассивТЧ.Добавить("Проживание");
			МассивТЧ.Добавить("ПрочиеРасходы");

			ТаблицаИзрасходовано = СтруктураДанных.Проезд.Выгрузить();

			СтруктураДанных.Вставить("КолонтитулСтраницы4", "");

		КонецЕсли;

		ТаблицаИзрасходовано.Очистить();

		ТаблицаИзрасходовано.Колонки.Добавить("СуммаФактВВалюте", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("СуммаПринятоВВалюте", ОписаниеТипаСуммы);

		ТаблицаИзрасходовано.Колонки.Добавить("РасчетыВВалюте", Новый ОписаниеТипов("Булево"));
		ТаблицаИзрасходовано.Колонки.Добавить("РублевыйЭквивалент", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("РублевыйЭквивалентПоОтчету", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("СуммаРасчетов", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("СуммаРасчетовПоОтчету", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("СчетКредита", Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));

		Для Каждого ТЧ Из МассивТЧ Цикл
			ВыборкаРасходы = СтруктураДанных[ТЧ].Выбрать();
			Пока ВыборкаРасходы.Следующий() Цикл
				Если ВыборкаРасходы.ПоДокументу Тогда
					Продолжить;
				КонецЕсли;

				ДобавитьСтрокуИзрасходовано(ТаблицаИзрасходовано, ВыборкаРасходы, СтруктураДанных, Счета208, КурсыВалют);

			КонецЦикла;
		КонецЦикла;

		// Дополнение таблицы расходов данными приходных документов
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ПриходныйДокумент КАК ПриходныйДокумент
		|ПОМЕСТИТЬ ДОКУМЕНТЫПРИХОДНЫЕ
		|ИЗ
		|	Документ.ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги КАК ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги
		|ГДЕ
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Ссылка В(&МассивОбъектов)
		|	И ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ПоДокументу
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПриходныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,
		|	МАКСИМУМ(ЖурналПроводокЕПСБУДвиженияССубконто.КПСКт) КАК КПСКт,
		|	ВЫБОР
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ОсновныеСредства)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ОсновныеСредства)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ОсновныеСредства)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Номенклатура
		|ПОМЕСТИТЬ КПСКредитаВПриходныхДокументах
		|ИЗ
		|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
		|			,
		|			,
		|			СчетКт В (&Счет208)
		|				И Регистратор В
		|					(ВЫБРАТЬ
		|						ДОКУМЕНТЫПРИХОДНЫЕ.ПриходныйДокумент
		|					ИЗ
		|						ДОКУМЕНТЫПРИХОДНЫЕ),
		|			,
		|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
		|	ВЫБОР
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ДенежныеДокументы
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ДенежныеДокументы)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.Номенклатура)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт1 КАК Справочник.ОсновныеСредства)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт2 КАК Справочник.ОсновныеСредства)
		|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.ОсновныеСредства
		|			ТОГДА ВЫРАЗИТЬ(ЖурналПроводокЕПСБУДвиженияССубконто.СубконтоДт3 КАК Справочник.ОсновныеСредства)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеМЗМатериалы.Ссылка КАК ПриходныйДокумент,
		|	ПоступлениеМЗМатериалы.НомерСтроки КАК НомерСтрокиДокумента,
		|	ПоступлениеМЗМатериалы.Номенклатура КАК Номенклатура,
		|	ПоступлениеМЗМатериалы.Номенклатура.Наименование КАК НоменклатураПредставление,
		|	ПоступлениеМЗМатериалы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
		|	ПоступлениеМЗМатериалы.Количество КАК Количество,
		|	ВЫБОР
		|		КОГДА ПоступлениеМЗМатериалы.Количество <> 0
		|			ТОГДА ПоступлениеМЗМатериалы.Всего / ПоступлениеМЗМатериалы.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ПоступлениеМЗМатериалы.Всего КАК Сумма,
		|	ПоступлениеМЗМатериалы.СчетУчета КАК СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.ЕПСБУ.ПустаяСсылка) КАК СчетРасчетов,
		|	ПоступлениеМЗМатериалы.КФО КАК КФО,
		|	ПоступлениеМЗМатериалы.КПС КАК КПС,
		|	ПоступлениеМЗМатериалы.КЭК КАК КЭК
		|ПОМЕСТИТЬ ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА
		|ИЗ
		|	Документ.ПоступлениеМЗ.Материалы КАК ПоступлениеМЗМатериалы
		|ГДЕ
		|	ПоступлениеМЗМатериалы.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ПриходныйДокумент
		|			ИЗ
		|				ДОКУМЕНТЫПРИХОДНЫЕ КАК Т)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеОСКапВложения.Ссылка,
		|	ПоступлениеОСКапВложения.НомерСтроки,
		|	ПоступлениеОСКапВложения.ВнеоборотныйАктив,
		|	ПоступлениеОСКапВложения.ВнеоборотныйАктив.Наименование,
		|	""шт"",
		|	ПоступлениеОСКапВложения.Количество,
		|	ВЫБОР
		|		КОГДА ПоступлениеОСКапВложения.Количество <> 0
		|			ТОГДА ПоступлениеОСКапВложения.Всего / ПоступлениеОСКапВложения.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ПоступлениеОСКапВложения.Всего,
		|	ПоступлениеОСКапВложения.СчетУчета,
		|	ЗНАЧЕНИЕ(ПланСчетов.ЕПСБУ.ПустаяСсылка),
		|	ПоступлениеОСКапВложения.КФО,
		|	ПоступлениеОСКапВложения.КПС,
		|	ЗНАЧЕНИЕ(Справочник.КОСГУ.ПустаяСсылка)
		|ИЗ
		|	Документ.ПоступлениеОС.КапВложения КАК ПоступлениеОСКапВложения
		|ГДЕ
		|	ПоступлениеОСКапВложения.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ПриходныйДокумент
		|			ИЗ
		|				ДОКУМЕНТЫПРИХОДНЫЕ КАК Т)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриходныйОрдерФондовыйРасшифровка.Ссылка,
		|	ПриходныйОрдерФондовыйРасшифровка.НомерСтроки,
		|	ПриходныйОрдерФондовыйРасшифровка.ДенежныйДокумент,
		|	ПриходныйОрдерФондовыйРасшифровка.ДенежныйДокумент.Наименование,
		|	ПриходныйОрдерФондовыйРасшифровка.ДенежныйДокумент.ЕдиницаИзмерения.Наименование,
		|	ПриходныйОрдерФондовыйРасшифровка.Количество,
		|	ВЫБОР
		|		КОГДА ПриходныйОрдерФондовыйРасшифровка.Количество <> 0
		|			ТОГДА ПриходныйОрдерФондовыйРасшифровка.Сумма / ПриходныйОрдерФондовыйРасшифровка.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ПриходныйОрдерФондовыйРасшифровка.Сумма,
		|	&Счет20135,
		|	ПриходныйОрдерФондовыйРасшифровка.Ссылка.КорСчет,
		|	ПриходныйОрдерФондовыйРасшифровка.КФО,
		|	ПриходныйОрдерФондовыйРасшифровка.КПС,
		|	ЗНАЧЕНИЕ(Справочник.КОСГУ.ПустаяСсылка)
		|ИЗ
		|	Документ.ПриходныйОрдерФондовый.Расшифровка КАК ПриходныйОрдерФондовыйРасшифровка
		|ГДЕ
		|	ПриходныйОрдерФондовыйРасшифровка.Ссылка В
		|			(ВЫБРАТЬ
		|				Т.ПриходныйДокумент
		|			ИЗ
		|				ДОКУМЕНТЫПРИХОДНЫЕ КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""5_ТоварыРаботыУслуги"" КАК ВидРасхода,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Ссылка КАК Ссылка,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ДатаДокумента КАК ДатаДокумента,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.НомерДокумента КАК НомерДокумента,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.НаименованиеДокумента КАК НаименованиеДокумента,
		|	ВЫБОР
		|		КОГДА ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.НаименованиеСокращенное = """"
		|			ТОГДА ВЫБОР
		|					КОГДА ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|							И НЕ ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное = """"
		|						ТОГДА ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное
		|					ИНАЧЕ ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.Наименование
		|				КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Контрагент.НаименованиеСокращенное, """")
		|	КОНЕЦ КАК НаименованиеКонтрагента,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Номенклатура КАК Номенклатура,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.НоменклатураПредставление КАК НоменклатураПредставление,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	&ВалютаРегУчета КАК Валюта,
		|	&КодВалютыРегУчета КАК КодВалюты,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Количество КАК Количество,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Цена КАК Цена,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Сумма КАК СуммаПлан,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Сумма КАК СуммаФакт,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Сумма КАК СуммаПринято,
		|	ИСТИНА КАК РасчетыПоАвансовомуОтчету,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.СчетУчета КАК СчетУчета,
		|	ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.КФО КАК КФО,
		|	ВЫБОР
		|		КОГДА НЕ КПСКредитаВПриходныхДокументах.КПСКт ЕСТЬ NULL
		|			ТОГДА КПСКредитаВПриходныхДокументах.КПСКт
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)
		|	КОНЕЦ КАК КБК,
		|	ВЫБОР
		|		КОГДА НЕ КПСКредитаВПриходныхДокументах.КПСКт ЕСТЬ NULL
		|			ТОГДА КПСКредитаВПриходныхДокументах.КПСКт.Код
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КБККод,
		|	ВЫБОР
		|		КОГДА ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.СчетУчета = &Счет20135
		|			ТОГДА ВЫБОР
		|					КОГДА ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.КЭК <> ЗНАЧЕНИЕ(Справочник.КОСГУ.ПустаяСсылка)
		|						ТОГДА ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.КЭК
		|					ИНАЧЕ СоответствияАналитическихСчетовКЭК.КЭК
		|				КОНЕЦ
		|		ИНАЧЕ ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.КЭК
		|	КОНЕЦ КАК КОСГУ,
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	"""" КАК КодКорректировки,
		|	"""" КАК КодКорректировкиО,
		|	ИСТИНА КАК ПоДокументу
		|ИЗ
		|	Документ.ОтчетОРасходахПодотчетногоЛица.ТоварыРаботыУслуги КАК ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА КАК ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА
		|		ПО ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ПриходныйДокумент = ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.ПриходныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствияАналитическихСчетовКЭК КАК СоответствияАналитическихСчетовКЭК
		|		ПО (ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.СчетРасчетов = СоответствияАналитическихСчетовКЭК.Счет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КПСКредитаВПриходныхДокументах КАК КПСКредитаВПриходныхДокументах
		|		ПО (ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.ПриходныйДокумент = КПСКредитаВПриходныхДокументах.Регистратор)
		|			И (ДОКУМЕНТЫПРИХОДНЫЕРАСШИФРОВКА.Номенклатура = КПСКредитаВПриходныхДокументах.Номенклатура)
		|ГДЕ
		|	ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.ПоДокументу
		|	И ОтчетОРасходахПодотчетногоЛицаТоварыРаботыУслуги.Ссылка В(&МассивОбъектов)";

		Запрос.УстановитьПараметр("Счет20135", БухгалтерскийУчет.СчетПоКоду("201.35"));
		Запрос.УстановитьПараметр("Счет208", БухгалтерскийУчет.СписокСчетов("208.00"));

		ДанныеДляРасчетаКЭК = БухгалтерскийУчетКлиентСервер.ПараметрыРасчетаКЭКПроводки();
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчетаКЭК, СтруктураДанных, "Дата, Организация, ИФО");
		ДанныеДляРасчетаКЭК.ДтКт = "Дт";

		РасходыПоПриходнымДокументам = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаРасходы Из РасходыПоПриходнымДокументам Цикл

			Если НЕ ЗначениеЗаполнено(СтрокаРасходы.КОСГУ) Тогда
				ДанныеДляРасчетаКЭК.КФО = СтрокаРасходы.КФО;
				ДанныеДляРасчетаКЭК.Счет = СтрокаРасходы.СчетУчета;
				ДанныеДляРасчетаКЭК.Субконто1 = СтрокаРасходы.Номенклатура;
				СтрокаРасходы.КОСГУ = БухгалтерскийУчет.КЭКПроводки(ДанныеДляРасчетаКЭК);
			КонецЕсли;

			ДобавитьСтрокуИзрасходовано(ТаблицаИзрасходовано, СтрокаРасходы, СтруктураДанных, Счета208, КурсыВалют);

		КонецЦикла;

		ТаблицаИзрасходовано.Колонки.Добавить("СуммаРубПоКурсуАванса", ОписаниеТипаСуммы);
		ТаблицаИзрасходовано.Колонки.Добавить("СуммаРубПоКурсуАвансаПоОтчету", ОписаниеТипаСуммы);

		ТаблицаРасчетов = ТаблицаИзрасходовано.Скопировать();
		ТаблицаРасчетов.Очистить();

		Для Каждого СтрокаДокумента Из ТаблицаИзрасходовано Цикл

			НераспределенныйОстаток = СтрокаДокумента.СуммаРасчетов;
			НераспределенныйОстатокПоОтчету = СтрокаДокумента.СуммаРасчетовПоОтчету;

			Если ОстаткиАвансов.Количество() > 0 Тогда

				Отбор = Новый Структура;
				Отбор.Вставить("КФО" ,СтрокаДокумента.КФО);
				Отбор.Вставить("Счет", СтрокаДокумента.СчетКредита);
				Отбор.Вставить("КБК", СтрокаДокумента.КБК);

				СвойстваСчетаРасчетов = БухгалтерскийУчетПовтИсп.ПолучитьСвойстваСчета(СтрокаДокумента.СчетКредита);
				Если ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет") И СвойстваСчетаРасчетов.Валютный Тогда
					Отбор.Вставить("Валюта", СтрокаДокумента.Валюта);
				ИначеЕсли СтрокаДокумента.РасчетыВВалюте Тогда
					Отбор.Вставить("Валюта", СтрокаДокумента.Валюта);
				КонецЕсли;

				НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

				ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаРасчетов,
				НераспределенныйОстаток,
				НераспределенныйОстатокПоОтчету,
				НайденныеОстаткиАвансов,
				СтрокаДокумента);

			КонецЕсли;

			// Сумму расчетов, оставшуюся после зачета всех авансов, добавляем отдельной строкой.
			ДобавитьСтрокуЗадолженности(
			ТаблицаРасчетов,
			НераспределенныйОстаток,
			НераспределенныйОстатокПоОтчету,
			СтрокаДокумента);

		КонецЦикла;

		ТаблицаРасчетовПоКПС = ТаблицаРасчетов.Скопировать();
		ТаблицаРасчетовПоКПС.Свернуть("КБК, КБККод, Валюта, КодВалюты, РасчетыВВалюте", "СуммаРубПоКурсуАванса, СуммаРасчетов");
		ТаблицаРасчетовПоКПС.Сортировать("КодВалюты");

		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;

		НаименованиеРасчетов = НСтр("ru = 'Принято расходов по Авансовому отчету'");

		Для Каждого Строка Из ТаблицаРасчетовПоКПС Цикл

			Если Строка.СуммаРубПоКурсуАванса = 0 И Строка.СуммаРасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;

			ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
			ОбластьСтрокаРасчеты.Параметры.Год = Год(СтруктураДанных.Дата);
			ОбластьСтрокаРасчеты.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
			ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = Строка.СуммаРубПоКурсуАванса;
			ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = ?(Строка.РасчетыВВалюте, Строка.СуммаРасчетов, 0);
			ОбластьСтрокаРасчеты.Параметры.КодВалюты = Строка.КодВалюты;
			ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
		КонецЦикла;

		Если НомерПервойСтроки > ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
			ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
		ИначеЕсли НомерПервойСтроки < ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьДляОбъединения = ТабличныйДокумент.Область(НомерПервойСтроки, 1, ТабличныйДокумент.ВысотаТаблицы, 19);
			ОбластьДляОбъединения.Объединить();
		КонецЕсли;

		ТаблицаРасчетовПоКПСДляРасчетаОстаткаПоГодам = ТаблицаРасчетовПоКПС.Скопировать();

		// Для расчета остатка перерасхода необходимо объединить таблицы расходов и авансов
		ТаблицаРасчетовПоКПС.Колонки.Добавить("ОстатокПерерасходРуб");
		ТаблицаРасчетовПоКПС.Колонки.Добавить("ОстатокПерерасходВал");
		Для Каждого СтрокаРасчеты Из ТаблицаРасчетовПоКПС Цикл
			СтрокаРасчеты.ОстатокПерерасходРуб = - СтрокаРасчеты.СуммаРубПоКурсуАванса;
			СтрокаРасчеты.ОстатокПерерасходВал = ?(СтрокаРасчеты.РасчетыВВалюте, - Строка.СуммаРасчетов, 0);
		КонецЦикла;

		АвансыПоКПС = АвансыПоОтчету.Скопировать();
		АвансыПоКПС.Свернуть("КБК, КБККод, Валюта, КодВалюты", "РублевыйЭквивалент, СуммаВВалюте");

		Для Каждого СтрокаАвансы Из АвансыПоКПС Цикл
			НоваяСтрока = ТаблицаРасчетовПоКПС.Добавить();
			НоваяСтрока.КБК = СтрокаАвансы.КБК;
			НоваяСтрока.КБККод = СтрокаАвансы.КБККод;
			НоваяСтрока.Валюта = СтрокаАвансы.Валюта;
			НоваяСтрока.КодВалюты = СтрокаАвансы.КодВалюты;
			НоваяСтрока.ОстатокПерерасходРуб = СтрокаАвансы.РублевыйЭквивалент;
			НоваяСтрока.ОстатокПерерасходВал = СтрокаАвансы.СуммаВВалюте;
		КонецЦикла;

		ТаблицаРасчетовПоКПС.Свернуть("КБК, КБККод, Валюта, КодВалюты", "ОстатокПерерасходРуб, ОстатокПерерасходВал");
		ТаблицаРасчетовПоКПС.Сортировать("КодВалюты");

		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;

		НаименованиеРасчетов = НСтр("ru = 'из них:'");
		НаименованиеРасчетов = НаименованиеРасчетов + Символы.ПС + НСтр("ru = 'приняты обязательства по перерасходу'");

		Для Каждого Строка Из ТаблицаРасчетовПоКПС Цикл
			Если Строка.ОстатокПерерасходРуб < 0 ИЛИ Строка.ОстатокПерерасходВал < 0 Тогда
				ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
				ОбластьСтрокаРасчеты.Параметры.Год = Год(СтруктураДанных.Дата);
				ОбластьСтрокаРасчеты.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
				ОбластьСтрокаРасчеты.Параметры.КодВалюты = Строка.КодВалюты;
				Если Строка.ОстатокПерерасходРуб < 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = - Строка.ОстатокПерерасходРуб;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = 0;
				КонецЕсли;
				Если НЕ Строка.Валюта = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета()
					И Строка.ОстатокПерерасходВал < 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = - Строка.ОстатокПерерасходВал;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = 0;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
			КонецЕсли;
		КонецЦикла;

		Если НомерПервойСтроки > ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
			ОбластьСтрокаРасчеты.Параметры.Год = "";
			ОбластьСтрокаРасчеты.Параметры.КБК = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = "";
			ОбластьСтрокаРасчеты.Параметры.КодВалюты = "";
			ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
		ИначеЕсли НомерПервойСтроки < ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьДляОбъединения = ТабличныйДокумент.Область(НомерПервойСтроки, 1, ТабличныйДокумент.ВысотаТаблицы, 19);
			ОбластьДляОбъединения.Объединить();
		КонецЕсли;

		ОстаткиРасчетовПоКПС = ТаблицаРасчетовПоКПСДляРасчетаОстаткаПоГодам.Скопировать();

		АвансыПоКПС = АвансыПоОтчету.Скопировать();
		АвансыПоКПС.Свернуть("Год, КБК, КБККод, Валюта, КодВалюты", "РублевыйЭквивалент, СуммаВВалюте");
		АвансыПоКПС.Сортировать("Год");

		// зачет аванса по годам, по FIFO
		Для Каждого СтрокаАвансы Из АвансыПоКПС Цикл

			НераспределенныйОстатокРуб = СтрокаАвансы.РублевыйЭквивалент;
			НераспределенныйОстатокВал = СтрокаАвансы.СуммаВВалюте;

			Если ОстаткиРасчетовПоКПС.Количество() > 0 Тогда

				Отбор = Новый Структура;
				Отбор.Вставить("КБК", СтрокаАвансы.КБК);
				Отбор.Вставить("Валюта", СтрокаАвансы.Валюта);
				Отбор.Вставить("КодВалюты", СтрокаАвансы.КодВалюты);

				НайденныеОстаткиРасчетов = ОстаткиРасчетовПоКПС.НайтиСтроки(Отбор);

				Для Каждого СтрокаОстатка Из НайденныеОстаткиРасчетов Цикл

					Если НераспределенныйОстатокРуб <= 0 И НераспределенныйОстатокВал <= 0 Тогда
						Прервать;
					КонецЕсли;

					ЗачитываемыйАвансРуб = Мин(НераспределенныйОстатокРуб, СтрокаОстатка.СуммаРубПоКурсуАванса);
					ЗачитываемыйАвансВал = Мин(НераспределенныйОстатокВал, СтрокаОстатка.СуммаРасчетов);

					Если ЗачитываемыйАвансРуб <= 0 И ЗачитываемыйАвансВал <= 0 Тогда
						Продолжить;
					КонецЕсли;

					Если НераспределенныйОстатокРуб > 0 И ЗачитываемыйАвансРуб > 0 Тогда
						СтрокаАвансы.РублевыйЭквивалент = СтрокаАвансы.РублевыйЭквивалент - ЗачитываемыйАвансРуб;
						СтрокаОстатка.СуммаРубПоКурсуАванса = СтрокаОстатка.СуммаРубПоКурсуАванса - ЗачитываемыйАвансРуб;
						НераспределенныйОстатокРуб = НераспределенныйОстатокРуб - ЗачитываемыйАвансРуб;
					КонецЕсли;

					Если НераспределенныйОстатокВал > 0 И ЗачитываемыйАвансВал > 0 Тогда
						СтрокаАвансы.СуммаВВалюте = СтрокаАвансы.СуммаВВалюте - ЗачитываемыйАвансВал;
						СтрокаОстатка.СуммаРасчетов = СтрокаОстатка.СуммаРасчетов - ЗачитываемыйАвансВал;
						НераспределенныйОстатокВал = НераспределенныйОстатокВал - ЗачитываемыйАвансВал;
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		АвансыПоКПС.Колонки.Добавить("ОстатокПерерасходРуб");
		АвансыПоКПС.Колонки.Добавить("ОстатокПерерасходВал");
		Для Каждого СтрокаАвансы Из АвансыПоКПС Цикл
			СтрокаАвансы.ОстатокПерерасходРуб = СтрокаАвансы.РублевыйЭквивалент;
			СтрокаАвансы.ОстатокПерерасходВал = СтрокаАвансы.СуммаВВалюте;
		КонецЦикла;

		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;

		НаименованиеРасчетов = НСтр("ru = 'к возврату полученного аванса текущего года'");

		Для Каждого Строка Из АвансыПоКПС Цикл
			Если Строка.Год <> Год(СтруктураДанных.Дата) Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ОстатокПерерасходРуб > 0 ИЛИ Строка.ОстатокПерерасходВал > 0 Тогда
				ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
				ОбластьСтрокаРасчеты.Параметры.Год = Год(СтруктураДанных.Дата);
				ОбластьСтрокаРасчеты.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
				ОбластьСтрокаРасчеты.Параметры.КодВалюты = Строка.КодВалюты;
				Если Строка.ОстатокПерерасходРуб > 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = Строка.ОстатокПерерасходРуб;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = 0;
				КонецЕсли;
				Если НЕ Строка.Валюта = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета()
					И Строка.ОстатокПерерасходВал > 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = Строка.ОстатокПерерасходВал;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = 0;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
			КонецЕсли;
		КонецЦикла;

		Если НомерПервойСтроки > ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
			ОбластьСтрокаРасчеты.Параметры.Год = "";
			ОбластьСтрокаРасчеты.Параметры.КБК = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = "";
			ОбластьСтрокаРасчеты.Параметры.КодВалюты = "";
			ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
		ИначеЕсли НомерПервойСтроки < ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьДляОбъединения = ТабличныйДокумент.Область(НомерПервойСтроки, 1, ТабличныйДокумент.ВысотаТаблицы, 19);
			ОбластьДляОбъединения.Объединить();
		КонецЕсли;

		НомерПервойСтроки = ТабличныйДокумент.ВысотаТаблицы + 1;

		НаименованиеРасчетов = НСтр("ru = 'к возврату полученного аванса прошлых лет'");

		Для Каждого Строка Из АвансыПоКПС Цикл
			Если Строка.Год = Год(СтруктураДанных.Дата) Тогда
				Продолжить;
			КонецЕсли;
			Если Строка.ОстатокПерерасходРуб > 0 ИЛИ Строка.ОстатокПерерасходВал > 0 Тогда
				ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
				ОбластьСтрокаРасчеты.Параметры.Год = Строка.Год;
				ОбластьСтрокаРасчеты.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
				ОбластьСтрокаРасчеты.Параметры.КодВалюты = Строка.КодВалюты;
				Если Строка.ОстатокПерерасходРуб > 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = Строка.ОстатокПерерасходРуб;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = 0;
				КонецЕсли;
				Если НЕ Строка.Валюта = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета()
					И Строка.ОстатокПерерасходВал > 0 Тогда
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = Строка.ОстатокПерерасходВал;
				Иначе
					ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = 0;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
			КонецЕсли;
		КонецЦикла;

		Если НомерПервойСтроки > ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьСтрокаРасчеты.Параметры.НаименованиеРасчетов = НаименованиеРасчетов;
			ОбластьСтрокаРасчеты.Параметры.Год = "";
			ОбластьСтрокаРасчеты.Параметры.КБК = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВРублях = "";
			ОбластьСтрокаРасчеты.Параметры.РасчетыВВалюте = "";
			ОбластьСтрокаРасчеты.Параметры.КодВалюты = "";
			ТабличныйДокумент.Вывести(ОбластьСтрокаРасчеты);
		ИначеЕсли НомерПервойСтроки < ТабличныйДокумент.ВысотаТаблицы Тогда
			ОбластьДляОбъединения = ТабличныйДокумент.Область(НомерПервойСтроки, 1, ТабличныйДокумент.ВысотаТаблицы, 19);
			ОбластьДляОбъединения.Объединить();
		КонецЕсли;

		ОбластьШапкаУведомление.Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластьШапкаУведомление);

		ТаблицаРасходыПоВалюте = ТаблицаИзрасходовано.Скопировать();
		ТаблицаРасходыПоВалюте.Свернуть("КодВалюты, РасчетыВВалюте", "СуммаФакт");

		Для Каждого Строка Из ТаблицаРасходыПоВалюте Цикл
			ОбластьСтрокаУведомление.Параметры.Заполнить(Строка);
			ОбластьСтрокаУведомление.Параметры.СуммаФактВРублях = ?(Строка.РасчетыВВалюте, 0, Строка.СуммаФакт);
			ОбластьСтрокаУведомление.Параметры.СуммаФактВВалюте = ?(НЕ Строка.РасчетыВВалюте, 0, Строка.СуммаФакт);
			ТабличныйДокумент.Вывести(ОбластьСтрокаУведомление);
		КонецЦикла;

		ОбластьПодвалУведомление.Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластьПодвалУведомление);

		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		ОбластьШапкаАвансовыйОтчет.Параметры.Заполнить(СтруктураДанных);
		ТабличныйДокумент.Вывести(ОбластьШапкаАвансовыйОтчет);

		АвансыДляПечати = АвансыПоОтчету.Скопировать();
		АвансыДляПечати.Свернуть("Дата, КодВалюты", "СуммаВРублях, СуммаВВалюте");
		Для Каждого ВыборкаПоАвансам Из АвансыДляПечати Цикл
			ОбластьСтрокаАвансовыйОтчет.Параметры.Заполнить(ВыборкаПоАвансам);
			ТабличныйДокумент.Вывести(ОбластьСтрокаАвансовыйОтчет);
		КонецЦикла;

		Если ДокументОснованиеЗакупка Тогда

			ОбластьШапкаРасходыЗакупка.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьШапкаРасходыЗакупка);

			ТаблицаПоКБК = Новый ТаблицаЗначений;
			ТаблицаПоКБК.Колонки.Добавить("СуммаПринято", ОписаниеТипаСуммы);
			ТаблицаПоКБК.Колонки.Добавить("КБК", Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
			ТаблицаПоКБК.Колонки.Добавить("КБККод", Новый ОписаниеТипов("Строка"));

			ТаблицаПоКОСГУ = Новый ТаблицаЗначений;
			ТаблицаПоКОСГУ.Колонки.Добавить("СуммаПринято", ОписаниеТипаСуммы);
			ТаблицаПоКОСГУ.Колонки.Добавить("КОСГУ", Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));

			ИтогоСуммаФакт = 0;
			ИтогоСуммаПринято = 0;

			КолонкиГруппировки = 
			"Ссылка, НомерСтроки, НомерСтрокиДокумента, КодКорректировки, КодКорректировкиО,
			|ДатаДокумента, НомерДокумента, НаименованиеДокумента, НаименованиеКонтрагента, НоменклатураПредставление,
			|ЕдиницаИзмерения, Количество, Цена, КБК, КБККод, КОСГУ, ДополнительнаяИнформация";
			КолонкиСуммирования = "СуммаРубПоКурсуАванса, СуммаРубПоКурсуАвансаПоОтчету";

			ТаблицаРасчетов.Свернуть(КолонкиГруппировки, КолонкиСуммирования);

			ТаблицаРасчетов.Сортировать("Ссылка, НомерСтроки, НомерСтрокиДокумента");

			НомерСтроки = 1;

			Для Каждого СтрокиРасходы Из ТаблицаРасчетов Цикл

				ОбластьСтрокаРасходыЗакупка.Параметры.Заполнить(СтрокиРасходы);

				ОбластьСтрокаРасходыЗакупка.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаРасходыЗакупка.Параметры.КБК = СтруктураДанных.КодПоППП + СтрокиРасходы.КБККод;

				ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыЗакупка);

				ИтогоСуммаФакт = ИтогоСуммаФакт + СтрокиРасходы.СуммаРубПоКурсуАвансаПоОтчету;
				ИтогоСуммаПринято = ИтогоСуммаПринято + СтрокиРасходы.СуммаРубПоКурсуАванса;

				НоваяСтрока = ТаблицаПоКБК.Добавить();
				НоваяСтрока.СуммаПринято = СтрокиРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.КБК = СтрокиРасходы.КБК;
				НоваяСтрока.КБККод = СтрокиРасходы.КБККод;

				НоваяСтрока = ТаблицаПоКОСГУ.Добавить();
				НоваяСтрока.СуммаПринято = СтрокиРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.КОСГУ = СтрокиРасходы.КОСГУ;

				НомерСтроки = НомерСтроки + 1;

			КонецЦикла;

			ОбластьИтогоРасходыЗакупка.Параметры.СуммаФакт = ИтогоСуммаФакт;
			ОбластьИтогоРасходыЗакупка.Параметры.СуммаПринято = ИтогоСуммаПринято;
			ТабличныйДокумент.Вывести(ОбластьИтогоРасходыЗакупка);

			ТаблицаПоКБК.Свернуть("КБК, КБККод", "СуммаПринято");

			Для Каждого Строка Из ТаблицаПоКБК Цикл
				Если ТаблицаПоКБК.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыЗакупкаПоКБКПервая.Параметры, Строка);
					ОбластьСтрокаРасходыЗакупкаПоКБКПервая.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыЗакупкаПоКБКПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыЗакупкаПоКБК.Параметры, Строка);
					ОбластьСтрокаРасходыЗакупкаПоКБК.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыЗакупкаПоКБК);
				КонецЕсли;
			КонецЦикла;

			ТаблицаПоКОСГУ.Свернуть("КОСГУ", "СуммаПринято");

			Для Каждого Строка Из ТаблицаПоКОСГУ Цикл
				Если ТаблицаПоКОСГУ.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыЗакупкаПоКОСГУПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыЗакупкаПоКОСГУПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыЗакупкаПоКОСГУ.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыЗакупкаПоКОСГУ);
				КонецЕсли;
			КонецЦикла;

			ОбластьПодвалРасходыЗакупка.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьПодвалРасходыЗакупка);

		Иначе

			ОбластьШапкаРасходы.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьШапкаРасходы);

			ТаблицаПоКодамВалют = Новый ТаблицаЗначений;
			ТаблицаПоКодамВалют.Колонки.Добавить("СуммаФактВВалюте", ОписаниеТипаСуммы);
			ТаблицаПоКодамВалют.Колонки.Добавить("СуммаПринятоВРублях", ОписаниеТипаСуммы);
			ТаблицаПоКодамВалют.Колонки.Добавить("СуммаПринятоВВалюте", ОписаниеТипаСуммы);
			ТаблицаПоКодамВалют.Колонки.Добавить("КодВалюты", ОбщегоНазначенияБГУ.ПолучитьОписаниеТиповСтроки(3));

			ТаблицаПоСпособамОбеспечения = Новый ТаблицаЗначений;
			ТаблицаПоСпособамОбеспечения.Колонки.Добавить("СуммаПринятоВРублях", ОписаниеТипаСуммы);
			ТаблицаПоСпособамОбеспечения.Колонки.Добавить("СпособОбеспечения", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбеспеченияКомандировки"));

			ТаблицаПоКОСГУ = Новый ТаблицаЗначений;
			ТаблицаПоКОСГУ.Колонки.Добавить("СуммаПринятоВРублях", ОписаниеТипаСуммы);
			ТаблицаПоКОСГУ.Колонки.Добавить("КОСГУ", Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));

			ИтогоСуммаФактВРублях = 0;
			ИтогоСуммаПринятоВРублях = 0;

			КолонкиГруппировки = 
			"ВидРасхода, Ссылка, НомерСтроки, КодКорректировки, КодКорректировкиО, ДатаДокумента, НомерДокумента, НаименованиеДокумента,
			|НаименованиеРасхода, РасчетыВВалюте, ДатаОтправленияЗаезда, ДатаПрибытияВыезда, ДатаПересеченияГраницы, Количество,
			|Цена, КатегорияПоНормативу, КатегорияФактическая, Валюта, КодВалюты, ПричинаОтклонения, КодПричиныОтклонения,
			|СуммаПлан, СуммаПланВРублевомЭквиваленте, СуммаФактВВалюте, СуммаПринятоВВалюте, СпособОбеспечения, КОСГУ";
			КолонкиСуммирования = "СуммаРубПоКурсуАванса, СуммаРубПоКурсуАвансаПоОтчету";

			ТаблицаРасчетов.Свернуть(КолонкиГруппировки, КолонкиСуммирования);

			ТаблицаРасчетов.Сортировать("Ссылка, ВидРасхода, НомерСтроки");

			НомерСтроки = 1;

			Для Каждого СтрокиРасходы Из ТаблицаРасчетов Цикл

				ОбластьСтрокаРасходы.Параметры.Заполнить(СтрокиРасходы);
				ОбластьСтрокаРасходы.Параметры.НомерСтроки = НомерСтроки;

				ТабличныйДокумент.Вывести(ОбластьСтрокаРасходы);

				НомерСтроки = НомерСтроки + 1;

				ИтогоСуммаФактВРублях = ИтогоСуммаФактВРублях + СтрокиРасходы.СуммаРубПоКурсуАвансаПоОтчету;
				ИтогоСуммаПринятоВРублях = ИтогоСуммаПринятоВРублях + СтрокиРасходы.СуммаРубПоКурсуАванса;

				НоваяСтрока = ТаблицаПоКодамВалют.Добавить();
				НоваяСтрока.СуммаФактВВалюте = СтрокиРасходы.СуммаФактВВалюте;
				НоваяСтрока.СуммаПринятоВРублях = СтрокиРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.СуммаПринятоВВалюте = СтрокиРасходы.СуммаПринятоВВалюте;
				НоваяСтрока.КодВалюты = СтрокиРасходы.КодВалюты;

				НоваяСтрока = ТаблицаПоСпособамОбеспечения.Добавить();
				НоваяСтрока.СуммаПринятоВРублях = СтрокиРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.СпособОбеспечения = СтрокиРасходы.СпособОбеспечения;

				НоваяСтрока = ТаблицаПоКОСГУ.Добавить();
				НоваяСтрока.СуммаПринятоВРублях = СтрокиРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.КОСГУ = СтрокиРасходы.КОСГУ;

			КонецЦикла;

			ОбластьИтогоРасходы.Параметры.СуммаФактВРублях = ИтогоСуммаФактВРублях;
			ОбластьИтогоРасходы.Параметры.СуммаПринятоВРублях = ИтогоСуммаПринятоВРублях;
			ТабличныйДокумент.Вывести(ОбластьИтогоРасходы);

			ТаблицаПоКодамВалют.Свернуть("КодВалюты", "СуммаФактВВалюте, СуммаПринятоВРублях, СуммаПринятоВВалюте");

			Для Каждого Строка Из ТаблицаПоКодамВалют Цикл
				Если ТаблицаПоКодамВалют.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоКодамВалютПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоКодамВалютПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоКодамВалют.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоКодамВалют);
				КонецЕсли;
			КонецЦикла;

			ТаблицаПоСпособамОбеспечения.Свернуть("СпособОбеспечения", "СуммаПринятоВРублях");

			Для Каждого Строка Из ТаблицаПоСпособамОбеспечения Цикл
				Если ТаблицаПоСпособамОбеспечения.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоСпособамОбеспеченияПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоСпособамОбеспеченияПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоСпособамОбеспечения.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоСпособамОбеспечения);
				КонецЕсли;
			КонецЦикла;

			ТаблицаПоКОСГУ.Свернуть("КОСГУ", "СуммаПринятоВРублях");

			Для Каждого Строка Из ТаблицаПоКОСГУ Цикл
				Если ТаблицаПоКОСГУ.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоКОСГУПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоКОСГУПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаРасходыПоКОСГУ.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаРасходыПоКОСГУ);
				КонецЕсли;
			КонецЦикла;

			ОбластьПодвалРасходы.Параметры.Заполнить(СтруктураДанных);

			СпособыВыдачи = Новый Массив;
			СпособыВыдачиУникальные = Новый Соответствие;

			СтрокиСпособыВыдачи = СтруктураДанных.СпособыВыдачи.Выбрать();
			Пока СтрокиСпособыВыдачи.Следующий() Цикл
				СпособыВыдачи.Добавить(Строка(СтрокиСпособыВыдачи.СпособВыдачи)
				+ НСтр("ru = ' (код валюты по ОКВ '") + СтрокиСпособыВыдачи.КодВалюты + ")");
				СпособыВыдачиУникальные.Вставить(СтрокиСпособыВыдачи.СпособВыдачи);
			КонецЦикла;

			Если СпособыВыдачиУникальные.Количество() = 1 Тогда
				Для Каждого СпособВыдачи Из СпособыВыдачиУникальные Цикл
					ОбластьПодвалРасходы.Параметры.СпособВыдачи = СпособВыдачи.Ключ;
				КонецЦикла;
			Иначе
				ОбластьПодвалРасходы.Параметры.СпособВыдачи = СтрСоединить(СпособыВыдачи, ", ");
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьПодвалРасходы);

			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			Если ДокументОснованиеРешение Тогда

				ОбластьШапкаОтчетОВыполненнойРаботе.Параметры.Заполнить(СтруктураДанных);
				ТабличныйДокумент.Вывести(ОбластьШапкаОтчетОВыполненнойРаботе);

				СтрокиОтчетОВыполненнойРаботе = СтруктураДанных.ОтчетОВыполненнойРаботе.Выбрать();
				Пока СтрокиОтчетОВыполненнойРаботе.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаОтчетОВыполненнойРаботе.Параметры, СтрокиОтчетОВыполненнойРаботе);
					ТабличныйДокумент.Вывести(ОбластьСтрокаОтчетОВыполненнойРаботе);
				КонецЦикла;

				ОбластьПодвалОтчетОВыполненнойРаботе.Параметры.Заполнить(СтруктураДанных);
				ТабличныйДокумент.Вывести(ОбластьПодвалОтчетОВыполненнойРаботе);

			КонецЕсли;

			СформированРазделОбоснованиеРасходов = Ложь;

			НомерСтроки = 1;

			Для Каждого СтрокаРасходы Из ТаблицаРасчетов Цикл

				Если Не ЗначениеЗаполнено(СтрокаРасходы.КодКорректировки) Тогда
					Продолжить;
				КонецЕсли;

				Если НЕ СформированРазделОбоснованиеРасходов Тогда

					СформированРазделОбоснованиеРасходов = Истина;

					ОбластьШапкаОбоснованиеРасходов.Параметры.Заполнить(СтруктураДанных);
					ТабличныйДокумент.Вывести(ОбластьШапкаОбоснованиеРасходов);

					ТаблицаПоКодамВалютОбоснование = Новый ТаблицаЗначений;
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СуммаФактВРублях", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СуммаФактВВалюте", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("ОтклонениеВРублях", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("ОтклонениеВВалюте", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СверхНормативаВРублях", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СверхНормативаВВалюте", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СуммаПринятоВРублях", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("СуммаПринятоВВалюте", ОписаниеТипаСуммы);
					ТаблицаПоКодамВалютОбоснование.Колонки.Добавить("КодВалюты", ОбщегоНазначенияБГУ.ПолучитьОписаниеТиповСтроки(3));

					ИтогоОбоснованиеСуммаФактВРублях = 0;
					ИтогоОбоснованиеОтклонениеВРублях = 0;
					ИтогоОбоснованиеСверхНормативаВРублях = 0;
					ИтогоОбоснованиеСуммаПринятоВРублях = 0;

				КонецЕсли;

				СуммаПоНормативуВРублях = 0;
				СуммаПоНормативуВВалюте = 0;

				КатегорияПоНормативу = "";

				СуммовойНорматив = Ложь;

				Если СтрокаРасходы.ВидРасхода = "1_Суточные" Тогда

					ВыборкаРасходы = СтруктураДанных.Суточные.Выбрать();
					СтруктураПоиска = Новый Структура("НомерСтроки", СтрокаРасходы.НомерСтроки);

					Если НЕ ВыборкаРасходы.НайтиСледующий(СтруктураПоиска) Тогда
						Продолжить;
					КонецЕсли;

					Отбор = Новый Структура;
					Отбор.Вставить("Период", СтруктураДанных.Дата);
					Отбор.Вставить("Организация", СтруктураДанных.Организация);
					Отбор.Вставить("ВидДоговора", СтруктураДанных.СотрудникВидДоговора);
					Отбор.Вставить("ОсобыйСтатус", СтруктураДанных.ОсобыйСтатус);
					Отбор.Вставить("Страна", ?(ЗначениеЗаполнено(ВыборкаРасходы.Страна),
					ВыборкаРасходы.Страна, ПредопределенноеЗначение("Справочник.СтраныМира.Россия")));
					Отбор.Вставить("Территория", ВыборкаРасходы.Территория);
					Отбор.Вставить("ДополнительноеУсловие", ВыборкаРасходы.ДополнительноеУсловие);

					СуточныеПоНормативу = РасчетыСПодотчетнымиЛицами.СуточныеПоНормативу(Отбор);

					Отбор = Новый Структура;
					Отбор.Вставить("КФО", ВыборкаРасходы.КФО);
					НормативыСуточных = СуточныеПоНормативу.НайтиСтроки(Отбор);
					Если НормативыСуточных.Количество() > 0 Тогда
						НормативСуточных = НормативыСуточных[0];
					Иначе
						Отбор = Новый Структура;
						Отбор.Вставить("КФО", ПредопределенноеЗначение("Перечисление.КВД.ПустаяСсылка"));
						НормативыСуточных = СуточныеПоНормативу.НайтиСтроки(Отбор);
						Если НормативыСуточных.Количество() > 0 Тогда
							НормативСуточных = НормативыСуточных[0];
						Иначе
							НормативСуточных = Неопределено;
						КонецЕсли;
					КонецЕсли;

					Если НормативСуточных <> Неопределено Тогда

						СуммовойНорматив = Истина;

						Норматив = НормативСуточных.Норматив;
						ВалютаПоНормативу = НормативСуточных.Валюта;

						Если ВалютаПоНормативу = ВалютаРегламентированногоУчета
							И СтрокаРасходы.Валюта = ВалютаРегламентированногоУчета Тогда
							СуммаПоНормативуВРублях = Норматив * СтрокаРасходы.Количество;
							СуммаПоНормативуВВалюте = 0;
						КонецЕсли;

						Если ВалютаПоНормативу <> ВалютаРегламентированногоУчета Тогда
							Если ВалютаПоНормативу = СтрокаРасходы.Валюта Тогда
								СуммаПоНормативуВВалюте = Норматив * СтрокаРасходы.Количество;
							Иначе
								СуммаПоНормативуВВалюте = 0;
							КонецЕсли;
							СуммаПоНормативуВРублях = СуммаВРублевомЭквиваленте(Норматив * СтрокаРасходы.Количество, ВалютаПоНормативу, КурсыВалют);
						КонецЕсли;

					КонецЕсли;

				ИначеЕсли СтрокаРасходы.ВидРасхода = "2_Проезд" Тогда

					ВыборкаРасходы = СтруктураДанных.Проезд.Выбрать();
					СтруктураПоиска = Новый Структура("НомерСтроки", СтрокаРасходы.НомерСтроки);

					Если НЕ ВыборкаРасходы.НайтиСледующий(СтруктураПоиска) Тогда
						Продолжить;
					КонецЕсли;

					Отбор = Новый Структура;
					Отбор.Вставить("Период", СтруктураДанных.Дата);
					Отбор.Вставить("Организация", СтруктураДанных.Организация);
					Отбор.Вставить("ВидТранспорта", ВыборкаРасходы.ВидТранспорта);

					Если ДокументОснованиеРешение Тогда

						Отбор.Вставить("ВидДоговора", СтруктураДанных.СотрудникВидДоговора);
						Отбор.Вставить("КатегорияДолжностиГосударственнойСлужбы", СтруктураДанных.СотрудникКатегорияДолжностиГосударственнойСлужбы);
						Отбор.Вставить("ГруппаДолжностиГосударственнойСлужбы", СтруктураДанных.СотрудникГруппаДолжностиГосударственнойСлужбы);
						Отбор.Вставить("ОсобыйСтатус", СтруктураДанных.ОсобыйСтатус);

						КатегорияПоНормативу = РасчетыСПодотчетнымиЛицами.УсловиеПроездаПоНормативу(Отбор);

						Если КатегорияПоНормативу <> Неопределено Тогда
							СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияПоНормативу, "Наименование, Описание");
							КатегорияПоНормативу = ?(ЗначениеЗаполнено(СвойстваКатегории.Описание), СвойстваКатегории.Описание, СвойстваКатегории.Наименование);
						КонецЕсли;

					ИначеЕсли ДокументОснованиеСеверяне Тогда

						КатегорияПоНормативу = РасчетыСПодотчетнымиЛицами.УсловиеПроездаКМестуОтпускаДляКрайнегоСевераПоНормативу(Отбор);

						Если КатегорияПоНормативу <> Неопределено Тогда
							СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияПоНормативу, "Наименование, Описание");
							КатегорияПоНормативу = ?(ЗначениеЗаполнено(СвойстваКатегории.Описание), СвойстваКатегории.Описание, СвойстваКатегории.Наименование);
						КонецЕсли;

					КонецЕсли;

				ИначеЕсли СтрокаРасходы.ВидРасхода = "3_Проживание" Тогда

					ВыборкаРасходы = СтруктураДанных.Проживание.Выбрать();
					СтруктураПоиска = Новый Структура("НомерСтроки", СтрокаРасходы.НомерСтроки);

					Если НЕ ВыборкаРасходы.НайтиСледующий(СтруктураПоиска) Тогда
						Продолжить;
					КонецЕсли;

					Страна = ?(ЗначениеЗаполнено(ВыборкаРасходы.Страна), ВыборкаРасходы.Страна, ПредопределенноеЗначение("Справочник.СтраныМира.Россия"));

					Отбор = Новый Структура;
					Отбор.Вставить("Период", СтруктураДанных.Дата);
					Отбор.Вставить("Организация", СтруктураДанных.Организация);
					Отбор.Вставить("ВидДоговора", СтруктураДанных.СотрудникВидДоговора);
					Отбор.Вставить("УсловиеПроживания", ВыборкаРасходы.УсловиеПроживания);
					Если Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
						Отбор.Вставить("КатегорияДолжностиГосударственнойСлужбы", СтруктураДанных.СотрудникКатегорияДолжностиГосударственнойСлужбы);
						Отбор.Вставить("ГруппаДолжностиГосударственнойСлужбы", СтруктураДанных.СотрудникГруппаДолжностиГосударственнойСлужбы);
					Иначе
						Отбор.Вставить("КатегорияДолжностиГосударственнойСлужбы", ПредопределенноеЗначение("Перечисление.КатегорииДолжностейГосударственнойСлужбы.ПустаяСсылка"));
						Отбор.Вставить("ГруппаДолжностиГосударственнойСлужбы", ПредопределенноеЗначение("Перечисление.ГруппыДолжностейГосударственнойСлужбы.ПустаяСсылка"));
					КонецЕсли;
					Отбор.Вставить("Страна", Страна);
					Отбор.Вставить("Территория", ВыборкаРасходы.ТерриторияСНадбавками);
					Отбор.Вставить("ОсобыйСтатус", СтруктураДанных.ОсобыйСтатус);

					НормативПроживания = РасчетыСПодотчетнымиЛицами.УсловиеПроживанияПоНормативу(Отбор);

					Если ЗначениеЗаполнено(НормативПроживания.Категория) Тогда

						КатегорияПоНормативу = НормативПроживания.Категория;

						СвойстваКатегории = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КатегорияПоНормативу, "Наименование, Описание");

						КатегорияПоНормативу = ?(ЗначениеЗаполнено(СвойстваКатегории.Описание), СвойстваКатегории.Описание, СвойстваКатегории.Наименование);

					ИначеЕсли НормативПроживания.Сумма <> Неопределено Тогда

						СуммовойНорматив = Истина;

						Норматив = НормативПроживания.Сумма;
						ВалютаПоНормативу = НормативПроживания.Валюта;

						Если ВалютаПоНормативу = ВалютаРегламентированногоУчета
							И СтрокаРасходы.Валюта = ВалютаРегламентированногоУчета Тогда
							СуммаПоНормативуВРублях = Норматив * СтрокаРасходы.Количество;
							СуммаПоНормативуВВалюте = 0;
						КонецЕсли;

						Если ВалютаПоНормативу <> ВалютаРегламентированногоУчета Тогда
							Если ВалютаПоНормативу = СтрокаРасходы.Валюта Тогда
								СуммаПоНормативуВВалюте = Норматив * СтрокаРасходы.Количество;
							Иначе
								СуммаПоНормативуВВалюте = 0;
							КонецЕсли;
							СуммаПоНормативуВРублях = СуммаВРублевомЭквиваленте(Норматив * СтрокаРасходы.Количество, ВалютаПоНормативу, КурсыВалют);
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

				ОбластьСтрокаОбоснованиеРасходов.Параметры.Заполнить(СтрокаРасходы);
				ОбластьСтрокаОбоснованиеРасходов.Параметры.НомерСтроки = НомерСтроки;
				ОбластьСтрокаОбоснованиеРасходов.Параметры.ОтклонениеВРублях =
				СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СтрокаРасходы.СуммаПланВРублевомЭквиваленте;
				ОбластьСтрокаОбоснованиеРасходов.Параметры.ОтклонениеВВалюте =
				?(СтрокаРасходы.РасчетыВВалюте, СтрокаРасходы.СуммаФактВВалюте - СтрокаРасходы.СуммаПлан, 0);
				ОбластьСтрокаОбоснованиеРасходов.Параметры.СверхНормативаВРублях =
				?(СуммовойНорматив И СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету > СуммаПоНормативуВРублях,
				СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СуммаПоНормативуВРублях, 0);
				ОбластьСтрокаОбоснованиеРасходов.Параметры.СверхНормативаВВалюте =
				?(СуммовойНорматив И СтрокаРасходы.СуммаФактВВалюте > СуммаПоНормативуВВалюте,
				СтрокаРасходы.СуммаФактВВалюте - СуммаПоНормативуВВалюте, 0);
				ОбластьСтрокаОбоснованиеРасходов.Параметры.КатегорияПоНормативу = КатегорияПоНормативу;
				ОбластьСтрокаОбоснованиеРасходов.Параметры.ОтметкаОСогласовании =
				?(СтрокаРасходы.СуммаРубПоКурсуАванса > 0, "V", "");
				ОбластьСтрокаОбоснованиеРасходов.Параметры.КодПричиныОтклонения =
				ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(СтрокаРасходы.КодПричиныОтклонения);

				ТабличныйДокумент.Вывести(ОбластьСтрокаОбоснованиеРасходов);

				НомерСтроки = НомерСтроки + 1;

				ИтогоОбоснованиеСуммаФактВРублях = ИтогоОбоснованиеСуммаФактВРублях + СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету;
				ИтогоОбоснованиеОтклонениеВРублях = ИтогоОбоснованиеОтклонениеВРублях +
				СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СтрокаРасходы.СуммаПланВРублевомЭквиваленте;
				ИтогоОбоснованиеСверхНормативаВРублях = ИтогоОбоснованиеСверхНормативаВРублях +
				?(СуммовойНорматив И СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету > СуммаПоНормативуВРублях,
				СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СуммаПоНормативуВРублях, 0);
				ИтогоОбоснованиеСуммаПринятоВРублях = ИтогоОбоснованиеСуммаПринятоВРублях + СтрокаРасходы.СуммаРубПоКурсуАванса;

				НоваяСтрока = ТаблицаПоКодамВалютОбоснование.Добавить();
				НоваяСтрока.СуммаФактВРублях = СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету;
				НоваяСтрока.СуммаФактВВалюте = СтрокаРасходы.СуммаФактВВалюте;
				НоваяСтрока.ОтклонениеВРублях = СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СтрокаРасходы.СуммаПланВРублевомЭквиваленте;
				НоваяСтрока.ОтклонениеВВалюте = ?(СтрокаРасходы.РасчетыВВалюте, СтрокаРасходы.СуммаФактВВалюте - СтрокаРасходы.СуммаПлан, 0);
				НоваяСтрока.СверхНормативаВРублях =
				?(СуммовойНорматив И СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету > СуммаПоНормативуВРублях,
				СтрокаРасходы.СуммаРубПоКурсуАвансаПоОтчету - СуммаПоНормативуВРублях, 0);
				НоваяСтрока.СверхНормативаВВалюте =
				?(СуммовойНорматив И СтрокаРасходы.СуммаФактВВалюте > СуммаПоНормативуВВалюте,
				СтрокаРасходы.СуммаФактВВалюте - СуммаПоНормативуВВалюте, 0);
				НоваяСтрока.СуммаПринятоВРублях = СтрокаРасходы.СуммаРубПоКурсуАванса;
				НоваяСтрока.СуммаПринятоВВалюте = СтрокаРасходы.СуммаПринятоВВалюте;
				НоваяСтрока.КодВалюты = СтрокаРасходы.КодВалюты;

			КонецЦикла;

			Если СформированРазделОбоснованиеРасходов Тогда

				ОбластьИтогоОбоснованиеРасходов.Параметры.СуммаФактВРублях = ИтогоОбоснованиеСуммаФактВРублях;
				ОбластьИтогоОбоснованиеРасходов.Параметры.ОтклонениеВРублях = ИтогоОбоснованиеОтклонениеВРублях;
				ОбластьИтогоОбоснованиеРасходов.Параметры.СверхНормативаВРублях = ИтогоОбоснованиеСверхНормативаВРублях;
				ОбластьИтогоОбоснованиеРасходов.Параметры.СуммаПринятоВРублях = ИтогоОбоснованиеСуммаПринятоВРублях;
				ТабличныйДокумент.Вывести(ОбластьИтогоОбоснованиеРасходов);

				ТаблицаПоКодамВалютОбоснование.Свернуть("КодВалюты", "СуммаФактВРублях, СуммаФактВВалюте, ОтклонениеВРублях, ОтклонениеВВалюте,
				|СверхНормативаВРублях, СверхНормативаВВалюте, СуммаПринятоВРублях, СуммаПринятоВВалюте");

				Для Каждого Строка Из ТаблицаПоКодамВалютОбоснование Цикл
					Если ТаблицаПоКодамВалютОбоснование.Индекс(Строка) = 0 Тогда
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаОбоснованиеПоКодамВалютПервая.Параметры, Строка);
						ТабличныйДокумент.Вывести(ОбластьСтрокаОбоснованиеПоКодамВалютПервая);
					Иначе
						ЗаполнитьЗначенияСвойств(ОбластьСтрокаОбоснованиеПоКодамВалют.Параметры, Строка);
						ТабличныйДокумент.Вывести(ОбластьСтрокаОбоснованиеПоКодамВалют);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			Если СформированРазделОбоснованиеРасходов ИЛИ ДокументОснованиеРешение Тогда

				ОбластьПодвалОбоснованиеРасходов.Параметры.Заполнить(СтруктураДанных);
				ТабличныйДокумент.Вывести(ОбластьПодвалОбоснованиеРасходов);

				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьШапкаОбязательства);

			ОбластьШапкаПринятыеРасходы.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьШапкаПринятыеРасходы);

			НомерСтроки = 1;

			Для Каждого СтрокиРасходы Из ТаблицаРасчетов Цикл

				ОбластьСтрокаПринятыеРасходы.Параметры.Заполнить(СтрокиРасходы);
				ОбластьСтрокаПринятыеРасходы.Параметры.НомерСтроки = НомерСтроки;

				ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходы);

				НомерСтроки = НомерСтроки + 1;

			КонецЦикла;

			ОбластьИтогоПринятыеРасходы.Параметры.СуммаФактВРублях = ИтогоСуммаФактВРублях;
			ОбластьИтогоПринятыеРасходы.Параметры.СуммаПринятоВРублях = ИтогоСуммаПринятоВРублях;
			ТабличныйДокумент.Вывести(ОбластьИтогоПринятыеРасходы);

			Для Каждого Строка Из ТаблицаПоКодамВалют Цикл
				Если ТаблицаПоКодамВалют.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоКодамВалютПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоКодамВалютПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоКодамВалют.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоКодамВалют);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Строка Из ТаблицаПоСпособамОбеспечения Цикл
				Если ТаблицаПоСпособамОбеспечения.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоСпособамОбеспеченияПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоСпособамОбеспеченияПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоСпособамОбеспечения.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоСпособамОбеспечения);
				КонецЕсли;
			КонецЦикла;

			Для Каждого Строка Из ТаблицаПоКОСГУ Цикл
				Если ТаблицаПоКОСГУ.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоКОСГУПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоКОСГУПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПринятыеРасходыПоКОСГУ.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаПринятыеРасходыПоКОСГУ);
				КонецЕсли;
			КонецЦикла;

			ОбластьШапкаДО.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьШапкаДО);

			ТаблицаДОПоКБК = Новый ТаблицаЗначений;
			ТаблицаДОПоКБК.Колонки.Добавить("СуммаПоОснованию", ОписаниеТипаСуммы);
			ТаблицаДОПоКБК.Колонки.Добавить("СуммаПоОтчету", ОписаниеТипаСуммы);
			ТаблицаДОПоКБК.Колонки.Добавить("Отклонение", ОписаниеТипаСуммы);
			ТаблицаДОПоКБК.Колонки.Добавить("КБК", Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
			ТаблицаДОПоКБК.Колонки.Добавить("КБККод", Новый ОписаниеТипов("Строка"));

			ТаблицаДОПоКОСГУ = Новый ТаблицаЗначений;
			ТаблицаДОПоКОСГУ.Колонки.Добавить("СуммаПоОснованию", ОписаниеТипаСуммы);
			ТаблицаДОПоКОСГУ.Колонки.Добавить("СуммаПоОтчету", ОписаниеТипаСуммы);
			ТаблицаДОПоКОСГУ.Колонки.Добавить("Отклонение", ОписаниеТипаСуммы);
			ТаблицаДОПоКОСГУ.Колонки.Добавить("КОСГУ", Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));

			ИтогоСуммаПоОснованию = 0;
			ИтогоСуммаПоОтчету = 0;
			ИтогоОтклонение = 0;

			СтрокиДО = СтруктураДанных.ДенежныеОбязательства.Выбрать();
			Пока СтрокиДО.Следующий() Цикл

				ОбластьСтрокаДО.Параметры.Заполнить(СтрокиДО);

				ОбластьСтрокаДО.Параметры.КБК = СтруктураДанных.КодПоППП + СтрокиДО.КБККод;

				ТабличныйДокумент.Вывести(ОбластьСтрокаДО);

				ИтогоСуммаПоОснованию = ИтогоСуммаПоОснованию + СтрокиДО.СуммаПоОснованию;
				ИтогоСуммаПоОтчету = ИтогоСуммаПоОтчету + СтрокиДО.СуммаПоОтчету;
				ИтогоОтклонение = ИтогоОтклонение + СтрокиДО.Отклонение;

				НоваяСтрока = ТаблицаДОПоКБК.Добавить();
				НоваяСтрока.СуммаПоОснованию = СтрокиДО.СуммаПоОснованию;
				НоваяСтрока.СуммаПоОтчету = СтрокиДО.СуммаПоОтчету;
				НоваяСтрока.Отклонение = СтрокиДО.Отклонение;
				НоваяСтрока.КБК = СтрокиДО.КБК;
				НоваяСтрока.КБККод = СтрокиДО.КБККод;

				НоваяСтрока = ТаблицаДОПоКОСГУ.Добавить();
				НоваяСтрока.СуммаПоОснованию = СтрокиДО.СуммаПоОснованию;
				НоваяСтрока.СуммаПоОтчету = СтрокиДО.СуммаПоОтчету;
				НоваяСтрока.Отклонение = СтрокиДО.Отклонение;
				НоваяСтрока.КОСГУ = СтрокиДО.КОСГУ;

			КонецЦикла;

			ОбластьИтогоДО.Параметры.СуммаПоОснованию = ИтогоСуммаПоОснованию;
			ОбластьИтогоДО.Параметры.СуммаПоОтчету = ИтогоСуммаПоОтчету;
			ОбластьИтогоДО.Параметры.Отклонение = ИтогоОтклонение;
			ТабличныйДокумент.Вывести(ОбластьИтогоДО);

			ТаблицаДОПоКБК.Свернуть("КБК, КБККод", "СуммаПоОснованию, СуммаПоОтчету, Отклонение");

			Для Каждого Строка Из ТаблицаДОПоКБК Цикл
				Если ТаблицаДОПоКБК.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаДОПоКБКПервая.Параметры, Строка);
					ОбластьСтрокаДОПоКБКПервая.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
					ТабличныйДокумент.Вывести(ОбластьСтрокаДОПоКБКПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаДОПоКБК.Параметры, Строка);
					ОбластьСтрокаДОПоКБК.Параметры.КБК = СтруктураДанных.КодПоППП + Строка.КБККод;
					ТабличныйДокумент.Вывести(ОбластьСтрокаДОПоКБК);
				КонецЕсли;
			КонецЦикла;

			ТаблицаДОПоКОСГУ.Свернуть("КОСГУ", "СуммаПоОснованию, СуммаПоОтчету, Отклонение");

			Для Каждого Строка Из ТаблицаДОПоКОСГУ Цикл
				Если ТаблицаДОПоКОСГУ.Индекс(Строка) = 0 Тогда
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаДОПоКОСГУПервая.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаДОПоКОСГУПервая);
				Иначе
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаДОПоКОСГУ.Параметры, Строка);
					ТабличныйДокумент.Вывести(ОбластьСтрокаДОПоКОСГУ);
				КонецЕсли;
			КонецЦикла;

			ОбластьПодвалДО.Параметры.Заполнить(СтруктураДанных);
			ТабличныйДокумент.Вывести(ОбластьПодвалДО);

		КонецЕсли;

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

