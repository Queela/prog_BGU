&НаСервере
Процедура АБК_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)    
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ИнициализироватьФорму();	
		
	КонецЕсли;                   
	
КонецПроцедуры

&НаСервере
Процедура АБК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)   
	
	НайтиПредыдущийАвансовыйОтчет();
	
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	
КонецПроцедуры

&НаСервере
Процедура АБК_ПриЧтенииНаСервереПеред(ТекущийОбъект)        
	
	ИнициализироватьФорму();	    
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()         
	
	#Область ТаблицаОстатокПерерасход 
	
	МассивРеквизитов = Новый Массив;    
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВалютаПерерасхода", Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Объект.ОстатокПерерасход", "Валюта перерасхода"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ВалютаОстатка", Новый ОписаниеТипов("СправочникСсылка.Валюты"), "Объект.ОстатокПерерасход", "Валюта остатка"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СуммаПерерасхода", 
		Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), "Объект.ОстатокПерерасход", "Сумма перерасхода" ));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СуммаОстатка", 
		Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), "Объект.ОстатокПерерасход", "Сумма остатка"));
	
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	НовСтраница = Элементы.Вставить("СведенияОстатокПерерасход", Тип("ГруппаФормы"), Элементы.Страницы, Элементы.ГруппаДополнительно);
	НовСтраница.Вид = ВидГруппыФормы.Страница;
	НовСтраница.Заголовок = "Сведения о внесении остатка, выдаче перерасхода";
	
	НовТаблица = Элементы.Добавить("ОстатокПерерасход", Тип("ТаблицаФормы"), НовСтраница);
	НовТаблица.ПутьКДанным = "Объект.ОстатокПерерасход";
	НовТаблица.УстановитьДействие("ПриИзменении", "АБК_ОстатокПерерасходПриИзмененииПосле");
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходНомерСтроки", Тип("ПолеФормы"), НовТаблица);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.НомерСтроки";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;
	
	НовЭлГруппы = Элементы.Добавить("ПерерасходВыдан", Тип("ГруппаФормы"), НовТаблица);
	НовЭлГруппы.Заголовок = "Перерасход выдан";
	НовЭлГруппы.Вид = ВидГруппыФормы.ГруппаКолонок;
	НовЭлГруппы.ОтображатьВШапке = Истина;
	НовЭлГруппы.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НовЭлГруппы.ОтображатьЗаголовок = Истина;
	НовЭлГруппы.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходДокументПерерасхода", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ДокументПерерасхода";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;
	НовЭл.УстановитьДействие("НачалоВыбора","ОстатокПерерасходДокументПерерасходаНачалоВыбора");
	НовЭл.УстановитьДействие("ОбработкаВыбора","ОстатокПерерасходДокументПерерасходаОбработкаВыбора");
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходВалютаПерерасхода", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ВалютаПерерасхода";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.ТолькоПросмотр = Истина; 
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходСуммаПерерасхода", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.СуммаПерерасхода";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.ТолькоПросмотр = Истина; 
	
	НовЭлГруппы = Элементы.Добавить("ОстатокВнесен", Тип("ГруппаФормы"), НовТаблица);
	НовЭлГруппы.Заголовок = "Остаток внесен";
	НовЭлГруппы.Вид = ВидГруппыФормы.ГруппаКолонок;
	НовЭлГруппы.ОтображатьВШапке = Истина;
	НовЭлГруппы.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	НовЭлГруппы.ОтображатьЗаголовок = Истина;
	НовЭлГруппы.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходДокументОстатка", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ДокументОстатка";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.УстановитьДействие("НачалоВыбора","ОстатокПерерасходДокументОстаткаНачалоВыбора");
	НовЭл.УстановитьДействие("ОбработкаВыбора","ОстатокПерерасходДокументОстаткаОбработкаВыбора");
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходВалютаОстатка", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.ВалютаОстатка";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.ТолькоПросмотр = Истина; 
	
	НовЭл = Элементы.Добавить("ОстатокПерерасходСуммаОстатка", Тип("ПолеФормы"), НовЭлГруппы);
	НовЭл.ПутьКДанным = "Объект.ОстатокПерерасход.СуммаОстатка";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.ТолькоПросмотр = Истина;    
	
	#КонецОбласти 
	
	#Область ОстатокПерерасходПредыдущегоАванса  
	
	НовЭл = Элементы.Вставить("ПредыдущийОтчет", Тип("ПолеФормы"), Элементы.ГруппаАвансы, Элементы.Получено);
	НовЭл.ПутьКДанным = "ПредыдущийОтчет";
	НовЭл.Вид = ВидПоляФормы.ПолеНадписи;
	НовЭл.АвтоМаксимальнаяШирина = Ложь;
	НовЭл.МаксимальнаяШирина = 0;
	
	НовГруппаВерхняя = Элементы.Вставить("ПолученоСотрудником", Тип("ГруппаФормы"), Элементы.ГруппаАвансы, Элементы.Получено);
	НовГруппаВерхняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовГруппаВерхняя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	НовГруппаСредняя = Элементы.Добавить("ПредыдущийАванс", Тип("ГруппаФормы"), НовГруппаВерхняя);
	НовГруппаСредняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;                     
	НовГруппаСредняя.ОтображатьЗаголовок = Истина;                     
	НовГруппаСредняя.Заголовок = "Предыдущий аванс";                     
	
	НовГруппаНижняя = Элементы.Добавить("Остаток", Тип("ГруппаФормы"), НовГруппаСредняя);
	НовГруппаНижняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовГруппаНижняя.ОтображатьЗаголовок = Истина;    
	НовГруппаНижняя.Заголовок = "Остаток";                     
	НовГруппаНижняя.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;                     
	
	НовЭл = Элементы.Добавить("ОстатокПредыдущегоАванса", Тип("ПолеФормы"), НовГруппаНижняя);
	НовЭл.ПутьКДанным = "Объект.ОстатокПредыдущегоАванса";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;   
	НовЭл.Заголовок = "В рублях";
	НовЭл.УстановитьДействие("ПриИзменении", "ОстатокПерерасходПриИзменении");
	
	НовЭл = Элементы.Добавить("ОстатокПредыдущегоАвансаВВалюте", Тип("ПолеФормы"), НовГруппаНижняя);
	НовЭл.ПутьКДанным = "Объект.ОстатокПредыдущегоАвансаВВалюте";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;
	НовЭл.Заголовок = "В ин. валюте";     
	НовЭл.УстановитьДействие("ПриИзменении", "ОстатокПерерасходПриИзменении");
	
	НовГруппаНижняя = Элементы.Добавить("Перерасход", Тип("ГруппаФормы"), НовГруппаСредняя);
	НовГруппаНижняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовГруппаНижняя.ОтображатьЗаголовок = Истина;    
	НовГруппаНижняя.Заголовок = "Перерасход";                     
	НовГруппаНижняя.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;                     

	НовЭл = Элементы.Добавить("ПерерасходПредыдущегоАванса", Тип("ПолеФормы"), НовГруппаНижняя);
	НовЭл.ПутьКДанным = "Объект.ПерерасходПредыдущегоАванса";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;
	НовЭл.Заголовок = "В рублях";
	НовЭл.УстановитьДействие("ПриИзменении", "ОстатокПерерасходПриИзменении");
	
	НовЭл = Элементы.Добавить("ПерерасходПредыдущегоАвансаВвалюте", Тип("ПолеФормы"), НовГруппаНижняя);
	НовЭл.ПутьКДанным = "Объект.ПерерасходПредыдущегоАвансаВвалюте";
	НовЭл.Вид = ВидПоляФормы.ПолеВвода; 
	НовЭл.Заголовок = "В ин. валюте";
	НовЭл.УстановитьДействие("ПриИзменении", "ОстатокПерерасходПриИзменении");
	
	НовГруппаНижняя = Элементы.Добавить("ГруппаКнопкаЗаполнить", Тип("ГруппаФормы"), НовГруппаСредняя);
	НовГруппаНижняя.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	
	НовКоманда = ЭтаФорма.Команды.Добавить("ЗаполнитьОстатокПерерасход");
	НовКоманда.Действие = "ЗаполнитьОстатокПерерасход"; 
	НовКоманда.Заголовок = "Заполнить остаток/перерасход"; 

	НовЭлКоманды = Элементы.Добавить("ЗаполнитьОстатокПерерасход",Тип("КнопкаФормы"),НовГруппаНижняя);
	НовЭлКоманды.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	НовЭлКоманды.ИмяКоманды = "ЗаполнитьОстатокПерерасход"; 
	
	НовГруппаСтраниц = Элементы.Добавить("СтраницыПодсказки", Тип("ГруппаФормы"), НовГруппаНижняя);
	НовГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
	НовГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	НовСтраница = Элементы.Добавить("СтраницаПодсказкиБезОшибок", Тип("ГруппаФормы"), НовГруппаСтраниц);
	НовСтраница.Вид = ВидГруппыФормы.Страница;  
	
	НовНадпись = Элементы.Добавить("ПодсказкаПредыдущийАвансБезОшибки", Тип("ДекорацияФормы"), НовСтраница);
	НовНадпись.Вид = ВидДекорацииФормы.Надпись;
	НовНадпись.Заголовок = "";
	
	НовСтраница = Элементы.Добавить("СтраницаПодсказкиОшибка", Тип("ГруппаФормы"), НовГруппаСтраниц);
	НовСтраница.Вид = ВидГруппыФормы.Страница;  
	
	НовНадпись = Элементы.Добавить("ПодсказкаПредыдущийАвансОшибка", Тип("ДекорацияФормы"), НовСтраница);
	НовНадпись.Вид = ВидДекорацииФормы.Надпись;
	НовНадпись.Заголовок = "Суммы остатка/перерасхода предыдущего
							|аванса не соответствуют данным учета";
	НовНадпись.ЦветТекста = Новый Цвет(227, 66, 52);
	
	Элементы.Переместить(Элементы.Получено, НовГруппаВерхняя);
	
	#КонецОбласти

	#Область НезавершенныеРасчеты
	
	НовГруппа = Элементы.Вставить("ГруппаНезавершенныеРасчеты", Тип("ГруппаФормы"), Элементы.СведенияОстатокПерерасход);
	НовГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НовГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	НовГруппа.ОтображатьЗаголовок = Истина;
	НовГруппа.ПутьКДаннымЗаголовка = "ОстатокПерерасходТекущегоАванса";
	НовГруппа.Объединенная = Истина;
	НовГруппа.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;  
	НовГруппа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;  
	НовГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НовГруппа.ЦветТекстаЗаголовка = Новый Цвет(28, 85, 174);
	НовГруппа.Ширина = 80;
	НовГруппа.Скрыть();  
	
	ИмяТаблицы = "НезавершенныеРасчеты";
	
	КолонкиТаблицы = Новый Массив;
	КолонкиТаблицы.Добавить("КФО");
	КолонкиТаблицы.Добавить("КПС");
	КолонкиТаблицы.Добавить("Счет");
	КолонкиТаблицы.Добавить("Валюта");
	КолонкиТаблицы.Добавить("Остаток");
	КолонкиТаблицы.Добавить("Перерасход");
	
	НовЭлТаблицы = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), НовГруппа);
	НовЭлТаблицы.ПутьКДанным = ИмяТаблицы;
	
	Для Каждого Колонка из КолонкиТаблицы Цикл
		НовЭлКолонки = Элементы.Добавить("" + ИмяТаблицы + Колонка, Тип("ПолеФормы"), НовЭлТаблицы);
		НовЭлКолонки.ПутьКДанным = "" + ИмяТаблицы + "." + Колонка;
		НовЭлКолонки.Вид = ВидПоляФормы.ПолеВвода;
	КонецЦикла; 
	
	НовЭл = Элементы.Добавить("НовГруппа", Тип("ПолеФормы"), НовГруппа);
	НовЭл.Вид = ВидПоляФормы.ПолеВвода;
	НовЭл.ПутьКДанным = "ОстатокПерерасходТекущегоАванса";
	НовЭл.Видимость = Ложь;
	
	#КонецОбласти      
	
КонецПроцедуры    

#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОстатокПерерасходДокументПерерасходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключитьДокументы = Новый Массив; 
	//АпогейБК
	Для Каждого СтрокаОстатокПерерасход Из Объект.ОстатокПерерасход Цикл
		ИсключитьДокументы.Добавить(СтрокаОстатокПерерасход.ДокументПерерасхода);
	КонецЦикла;
	//АпогейБК
	Для Каждого СтрокаПолучено Из Объект.Получено Цикл
		ИсключитьДокументы.Добавить(СтрокаПолучено.ДокументАванса);
	КонецЦикла;
	
	ПараметрыВыбораЗначения = Новый Структура("НачалоПериода, КонецПериода, ИФО, Организация, Сотрудник, ИсключитьДокументы, ТекущийДокумент, ЗаголовокФормы",
	ДатаДокументаОснования,
	КонецДня(Объект.Дата),
	Объект.ИФО,
	Объект.Организация,
	Объект.Сотрудник,
	ИсключитьДокументы,
	Объект.Ссылка,
	"Выберите документ выдачи перерасхода");
	
	ОткрытьФорму("Документ.ОтчетОРасходахПодотчетногоЛица.Форма.ФормаВыбораДокументаОплаты", ПараметрыВыбораЗначения, Элемент)

КонецПроцедуры

&НаКлиенте
Процедура ОстатокПерерасходДокументПерерасходаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ОстатокПерерасход.ТекущиеДанные.ДокументПерерасхода 	= ВыбранноеЗначение.ДокументАванса;
	Элементы.ОстатокПерерасход.ТекущиеДанные.ВалютаПерерасхода 		= ВыбранноеЗначение.Валюта;
	Элементы.ОстатокПерерасход.ТекущиеДанные.СуммаПерерасхода 		= ВыбранноеЗначение.Сумма;
	
	ОбновитьТаблицуНезавершенныхРасчетов();
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокПерерасходДокументОстаткаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключитьДокументы = Новый Массив;
	Для Каждого СтрокаОстатокПерерасход Из Объект.ОстатокПерерасход Цикл
		ИсключитьДокументы.Добавить(СтрокаОстатокПерерасход.ДокументОстатка);
	КонецЦикла;
	
	ПараметрыВыбораЗначения = Новый Структура("НачалоПериода, КонецПериода, ИФО, Организация, Сотрудник, ИсключитьДокументы, АвансовыйОтчет, ЗаголовокФормы, Кт208", 
	НачалоДня(Объект.Дата), 
	, 
	Объект.ИФО, 
	Объект.Организация,
	Объект.Сотрудник,
	ИсключитьДокументы,
	Объект.Ссылка,
	"Выберите документ внесения остатка",
	Истина);
		
	ОткрытьФорму("Документ.ОтчетОРасходахПодотчетногоЛица.Форма.ФормаВыбораДокументаОплаты", ПараметрыВыбораЗначения, Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокПерерасходДокументОстаткаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ОстатокПерерасход.ТекущиеДанные.ДокументОстатка 	= ВыбранноеЗначение.ДокументАванса;
	Элементы.ОстатокПерерасход.ТекущиеДанные.ВалютаОстатка 		= ВыбранноеЗначение.Валюта;
	Элементы.ОстатокПерерасход.ТекущиеДанные.СуммаОстатка 		= ВыбранноеЗначение.Сумма;
	
	ОбновитьТаблицуНезавершенныхРасчетов();
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПолученоДокументАвансаНачалоВыбораВместо(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИсключитьДокументы = Новый Массив; 
	//АпогейБК
	Для Каждого СтрокаОстатокПерерасход Из Объект.ОстатокПерерасход Цикл
		ИсключитьДокументы.Добавить(СтрокаОстатокПерерасход.ДокументПерерасхода);
	КонецЦикла;
	//АпогейБК
	Для Каждого СтрокаПолучено Из Объект.Получено Цикл
		ИсключитьДокументы.Добавить(СтрокаПолучено.ДокументАванса);
	КонецЦикла;
	
	ПараметрыВыбораЗначения = Новый Структура("НачалоПериода, КонецПериода, ИФО, Организация, Сотрудник, ИсключитьДокументы, ТекущийДокумент, ЗаголовокФормы",
	ДатаДокументаОснования,
	КонецДня(Объект.Дата),
	Объект.ИФО,
	Объект.Организация,
	Объект.Сотрудник,
	ИсключитьДокументы,
	Объект.Ссылка,
	"Выберите документ выдачи аванса");
	
	ОткрытьФорму("Документ.ОтчетОРасходахПодотчетногоЛица.Форма.ФормаВыбораДокументаОплаты", ПараметрыВыбораЗначения, Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПолученоДокументАвансаОбработкаВыбораПосле(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	ОбновитьТаблицуНезавершенныхРасчетов();
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_СотрудникПриИзмененииПосле(Элемент)
	НайтиПредыдущийАвансовыйОтчет();
	
	ОбновитьДанныеОстаткаПерерасхода();
КонецПроцедуры

&НаКлиенте
Процедура АБК_СуточныеПриИзмененииПосле(Элемент)
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПроездПриИзмененииПосле(Элемент)
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПроживаниеПриИзмененииПосле(Элемент)
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПрочиеРасходыПриИзмененииПосле(Элемент)
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ТоварыРаботыУслугиПриИзмененииПосле(Элемент)
	ОбновитьДанныеОстаткаПерерасхода(, Истина);
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПолученоПриИзмененииПосле(Элемент)

	ОбновитьДанныеОстаткаПерерасхода();
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_ОстатокПерерасходПриИзмененииПосле(Элемент)

	ОбновитьТаблицуНезавершенныхРасчетов();
	ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокПерерасходПриИзменении(Элемент)
	ТребуетсяОбновитьНезавершенныеРасчеты = Ложь;
	УстановитьОформлениеКнопкиЗаполнитьОстатокПерерасход(ЭтаФорма, Объект, ТребуетсяОбновитьНезавершенныеРасчеты);
	Если ТребуетсяОбновитьНезавершенныеРасчеты Тогда
		ОбновитьТаблицуНезавершенныхРасчетов(Истина);
		ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОстаткаПерерасходаПредыдущегоАванса

&НаКлиенте
Процедура ЗаполнитьОстатокПерерасход(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Перед заполнением остатков необходимо указать Организацию, Сотрудника и заполнить таблицу ""Получено""'")); 
		
	Иначе
		
		ЗаполнитьОстатокПерерасходНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатокПерерасходНаСервере()
	
	ОбновитьДанныеОстаткаПерерасхода(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОстаткаПерерасхода(ЗаполнитьПредыдущийОстатокПерерасход = Ложь, ТребуетсяОбновитьНезавершенныеРасчеты = Ложь)
	
	ОбновитьДанныеПредыдущегоОстаткаПерерасхода(ТребуетсяОбновитьНезавершенныеРасчеты, ЗаполнитьПредыдущийОстатокПерерасход);
	
	Если ТребуетсяОбновитьНезавершенныеРасчеты Тогда
		ОбновитьТаблицуНезавершенныхРасчетов(Истина);
		ОстатокПерерасходТекущегоАванса = СтрокаОстатокПерерасходТекущегоАванса(НезавершенныеРасчетыПоВалютам);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПредыдущегоОстаткаПерерасхода(ТребуетсяОбновитьНезавершенныеРасчеты, ЗаполнитьПредыдущийОстатокПерерасход = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) ИЛИ НЕ ЗначениеЗаполнено(Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ПолучитьДанныеОстаткаПерерасхода();
	
	Если Выборка.Следующий() Тогда
		РассчитанныйОстатокПредыдущегоАванса 			= Выборка.ОстатокПредыдущегоАванса;
		РассчитанныйОстатокПредыдущегоАвансаВВалюте 	= Выборка.ОстатокПредыдущегоАвансаВВалюте;
		РассчитанныйПерерасходПредыдущегоАванса 		= Выборка.ПерерасходПредыдущегоАванса;
		РассчитанныйПерерасходПредыдущегоАвансаВВалюте 	= Выборка.ПерерасходПредыдущегоАвансаВвалюте;
		
		Если ЗаполнитьПредыдущийОстатокПерерасход
			И (РассчитанныйОстатокПредыдущегоАванса <> Объект.ОстатокПредыдущегоАванса
			ИЛИ РассчитанныйОстатокПредыдущегоАвансаВВалюте <> Объект.ОстатокПредыдущегоАвансаВВалюте
			ИЛИ РассчитанныйПерерасходПредыдущегоАванса <> Объект.ПерерасходПредыдущегоАванса
			ИЛИ РассчитанныйПерерасходПредыдущегоАвансаВВалюте <> Объект.ПерерасходПредыдущегоАвансаВвалюте) Тогда
		
			Объект.ОстатокПредыдущегоАванса = РассчитанныйОстатокПредыдущегоАванса;
			Объект.ОстатокПредыдущегоАвансаВВалюте = РассчитанныйОстатокПредыдущегоАвансаВВалюте;
			Объект.ПерерасходПредыдущегоАванса = РассчитанныйПерерасходПредыдущегоАванса;
			Объект.ПерерасходПредыдущегоАвансаВвалюте = РассчитанныйПерерасходПредыдущегоАвансаВВалюте;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОформлениеКнопкиЗаполнитьОстатокПерерасход(ЭтаФорма, Объект, ТребуетсяОбновитьНезавершенныеРасчеты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОстаткаПерерасхода()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пСчет", БухгалтерскийУчет.СписокСчетов("208.00"));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ИФО", Объект.ИФО);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Субконто1", КонтрагентСотрудника(Объект.Сотрудник));
	
	Если Объект.Проведен
		ИЛИ Объект.Получено.Количество() > 0
		ИЛИ Объект.ТоварыРаботыУслуги.НайтиСтроки(Новый Структура("ПоДокументу", Истина)).Количество() > 0 Тогда
		ОбъектДокумент = РеквизитФормыВЗначение("Объект");
		Запрос.УстановитьПараметр("Дата", РасчетыСПодотчетнымиЛицами.МоментВремениДокументаНачальногоОстатка(ОбъектДокумент));
	Иначе
		// Считаем остаток на дату документа, сотрудника, организацию, ИФО
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ЖурналПроводокЕПСБУОстатки.СуммаОстатокДт), 0) КАК ОстатокПредыдущегоАванса,
	|	ЕСТЬNULL(СУММА(ЖурналПроводокЕПСБУОстатки.СуммаОстатокКт), 0) КАК ПерерасходПредыдущегоАванса,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Валюты.Ссылка ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокДт
	|			КОНЕЦ), 0) КАК ОстатокПредыдущегоАвансаВВалюте,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА Валюты.Ссылка ЕСТЬ NULL
	|					ТОГДА 0
	|				ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокКт
	|			КОНЕЦ), 0) КАК ПерерасходПредыдущегоАвансаВвалюте,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.Счет) КАК Счет,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.КПС) КАК КПС,
	|	МАКСИМУМ(ЖурналПроводокЕПСБУОстатки.КФО) КАК КФО
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
	|			&Дата,
	|			Счет В (&пСчет),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Субконто1
	|				И ИФО = &ИФО) КАК ЖурналПроводокЕПСБУОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЖурналПроводокЕПСБУОстатки.Валюта = Валюты.Ссылка
	|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИФО = &ИФО", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеКнопкиЗаполнитьОстатокПерерасход(Форма, Объект, ТребуетсяОбновитьНезавершенныеРасчеты = Ложь)
	
	Если Форма.РассчитанныйОстатокПредыдущегоАванса <> Объект.ОстатокПредыдущегоАванса
		ИЛИ Форма.РассчитанныйОстатокПредыдущегоАвансаВВалюте <> Объект.ОстатокПредыдущегоАвансаВВалюте
		ИЛИ Форма.РассчитанныйПерерасходПредыдущегоАванса <> Объект.ПерерасходПредыдущегоАванса
		ИЛИ Форма.РассчитанныйПерерасходПредыдущегоАвансаВВалюте <> Объект.ПерерасходПредыдущегоАвансаВвалюте Тогда
		
		Если Форма.Элементы.СтраницыПодсказки.ТекущаяСтраница = Форма.Элементы.СтраницаПодсказкиОшибка Тогда
			Возврат;
		КонецЕсли;
		
		ЦветРамки = WebЦвета.Киноварь;
		
		Форма.Элементы.ОстатокПредыдущегоАванса.ЦветРамки 			= ЦветРамки;
		Форма.Элементы.ОстатокПредыдущегоАвансаВВалюте.ЦветРамки 	= ЦветРамки;
		Форма.Элементы.ПерерасходПредыдущегоАванса.ЦветРамки 		= ЦветРамки;
		Форма.Элементы.ПерерасходПредыдущегоАвансаВвалюте.ЦветРамки = ЦветРамки;
		Форма.Элементы.ЗаполнитьОстатокПерерасход.ЦветРамки 		= ЦветРамки;
		
		Форма.Элементы.СтраницыПодсказки.ТекущаяСтраница = Форма.Элементы.СтраницаПодсказкиОшибка;
		
		ТребуетсяОбновитьНезавершенныеРасчеты = Истина;
		Форма.ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных = Истина;
		
	Иначе
		
		Если Форма.Элементы.СтраницыПодсказки.ТекущаяСтраница = Форма.Элементы.СтраницаПодсказкиБезОшибок Тогда
			Возврат;
		КонецЕсли;
		
		Форма.Элементы.ОстатокПредыдущегоАванса.ЦветРамки 			= Новый Цвет();
		Форма.Элементы.ОстатокПредыдущегоАвансаВВалюте.ЦветРамки 	= Новый Цвет();
		Форма.Элементы.ПерерасходПредыдущегоАванса.ЦветРамки 		= Новый Цвет();
		Форма.Элементы.ПерерасходПредыдущегоАвансаВвалюте.ЦветРамки = Новый Цвет();
		Форма.Элементы.ЗаполнитьОстатокПерерасход.ЦветРамки 		= Новый Цвет();
		
		Форма.Элементы.СтраницыПодсказки.ТекущаяСтраница = Форма.Элементы.СтраницаПодсказкиБезОшибок;
		
		ТребуетсяОбновитьНезавершенныеРасчеты = Истина;
		Форма.ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуНезавершенныхРасчетов(ОбновитьПодсказку = Ложь)  
	
	НезавершенныеРасчеты.Очистить();
	
	ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2, ДопустимыйЗнак.Любой));
	
	ТаблицаИзрасходовано = Новый ТаблицаЗначений;
	ТаблицаИзрасходовано.Колонки.Добавить("КФО", 	Новый ОписаниеТипов("ПеречислениеСсылка.КВД"));
	ТаблицаИзрасходовано.Колонки.Добавить("КПС", 	Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
	ТаблицаИзрасходовано.Колонки.Добавить("Счет", 	Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	ТаблицаИзрасходовано.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаИзрасходовано.Колонки.Добавить("Сумма", 	ОписаниеТипаСуммы);
	
	Счета208 = БухгалтерскиеОперации.СчетПоКоду("208.00", Объект.Дата);    
	ВалютаРегламентированногоУчета = БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета();
	
	Для Каждого СтрокаРасходов Из Объект.ТоварыРаботыУслуги Цикл
		Если СтрокаРасходов.ПоДокументу Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИзрасходовано = ТаблицаИзрасходовано.Добавить();
		СтрокаИзрасходовано.КФО = СтрокаРасходов.КФО;
		СтрокаИзрасходовано.КПС = СтрокаРасходов.КПС;
		СтрокаИзрасходовано.Счет = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
			СтрокаРасходов.КЭК, Счета208, , Объект.Дата, Объект.Организация, Объект.ИФО);;
		СтрокаИзрасходовано.Валюта = ВалютаРегламентированногоУчета;
		СтрокаИзрасходовано.Сумма = СтрокаРасходов.СуммаПринято;
	КонецЦикла;
	
	МассивТабличныхЧастей = Новый Массив;
	МассивТабличныхЧастей.Добавить("Суточные");
	МассивТабличныхЧастей.Добавить("Проезд");
	МассивТабличныхЧастей.Добавить("Проживание");
	МассивТабличныхЧастей.Добавить("ПрочиеРасходы");   
	
	Для Каждого ТабЧасть из МассивТабличныхЧастей Цикл
		Для Каждого СтрокаРасходов Из Объект[ТабЧасть] Цикл
			СтрокаИзрасходовано = ТаблицаИзрасходовано.Добавить();
			СтрокаИзрасходовано.КФО = СтрокаРасходов.КФО;
			СтрокаИзрасходовано.КПС = СтрокаРасходов.КПС;
			СтрокаИзрасходовано.Счет = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
			СтрокаРасходов.КЭК, Счета208, , Объект.Дата, Объект.Организация, Объект.ИФО);;
			СтрокаИзрасходовано.Валюта = ?(ЗначениеЗаполнено(СтрокаРасходов.Валюта),СтрокаРасходов.Валюта,ВалютаРегламентированногоУчета);
			СтрокаИзрасходовано.Сумма = СтрокаРасходов.СуммаПринято;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("пСчет", 							БухгалтерскийУчет.СписокСчетов("208.00")); 
	Запрос.УстановитьПараметр("Организация", 					Объект.Организация);
	Запрос.УстановитьПараметр("ИФО", 							Объект.ИФО);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЭтотОбъект.КэшПараметров.ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("Субконто1", 						КонтрагентСотрудника(Объект.Сотрудник));
	Запрос.УстановитьПараметр("ТаблицаРасходовПоОтчету", 		ТаблицаИзрасходовано);
	Запрос.УстановитьПараметр("ДокументыАвансов", 				Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса"));
	Запрос.УстановитьПараметр("ДокументыИзрасходовано", 		Объект.ТоварыРаботыУслуги.Выгрузить().ВыгрузитьКолонку("ПриходныйДокумент"));
	Запрос.УстановитьПараметр("ДокументыПерерасхода", 			Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументПерерасхода"));
	Запрос.УстановитьПараметр("ДокументыОстатка", 				Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументОстатка"));
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыИзрасходовано, Неопределено);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыПерерасхода, Неопределено);
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Запрос.Параметры.ДокументыОстатка, Неопределено);
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Запрос.УстановитьПараметр("МоментВремени", РасчетыСПодотчетнымиЛицами.МоментВремениДокументаНачальногоОстатка(ОбъектДокумент));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРасходовПоОтчету.Счет КАК Счет,
	|	ТаблицаРасходовПоОтчету.КПС КАК КПС,
	|	ТаблицаРасходовПоОтчету.КФО КАК КФО,
	|	ТаблицаРасходовПоОтчету.Валюта КАК Валюта,
	|	ТаблицаРасходовПоОтчету.Сумма КАК Сумма
	|ПОМЕСТИТЬ ТаблицаРасходовПоОтчету
	|ИЗ
	|	&ТаблицаРасходовПоОтчету КАК ТаблицаРасходовПоОтчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасходовПоОтчету.Счет КАК Счет,
	|	ТаблицаРасходовПоОтчету.КПС КАК КПС,
	|	ТаблицаРасходовПоОтчету.КФО КАК КФО,
	|	ТаблицаРасходовПоОтчету.Валюта КАК Валюта,
	|	0 КАК ПредыдущийАвансОстаток,
	|	0 КАК ПредыдущийАвансПерерасход,
	|	0 КАК Получено,
	|	ТаблицаРасходовПоОтчету.Сумма КАК Израсходовано,
	|	0 КАК ВозвращенОстаток,
	|	0 КАК ВыданПерерасход
	|ПОМЕСТИТЬ ДетальныеДанные
	|ИЗ
	|	ТаблицаРасходовПоОтчету КАК ТаблицаРасходовПоОтчету
	|";
	Если НЕ ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЖурналПроводокЕПСБУОстатки.Счет,
		|	ЖурналПроводокЕПСБУОстатки.КПС,
		|	ЖурналПроводокЕПСБУОстатки.КФО,
		|	ЕСТЬNULL(Валюты.Ссылка, &ВалютаРегламентированногоУчета),
		|	ВЫБОР
		|		КОГДА Валюты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЖурналПроводокЕПСБУОстатки.СуммаОстатокДт
		|		ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокДт
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Валюты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЖурналПроводокЕПСБУОстатки.СуммаОстатокКт
		|		ИНАЧЕ ЖурналПроводокЕПСБУОстатки.ВалютнаяСуммаОстатокКт
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
		|			&МоментВремени,
		|			Счет В (&пСчет),
		|			,
		|			Организация = &Организация
		|				И Субконто1 = &Субконто1
		|				И ИФО = &ИФО) КАК ЖурналПроводокЕПСБУОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО ЖурналПроводокЕПСБУОстатки.Валюта = Валюты.Ссылка
		|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)
		|";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУОбороты.Счет,
	|	ЖурналПроводокЕПСБУОбороты.КПС,
	|	ЖурналПроводокЕПСБУОбороты.КФО,
	|	ЕСТЬNULL(Валюты.Ссылка, &ВалютаРегламентированногоУчета),
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыАвансов)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотДт - ЖурналПроводокЕПСБУОбороты.СуммаОборотКт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыИзрасходовано)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотКт - ЖурналПроводокЕПСБУОбороты.СуммаОборотДт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыОстатка)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотКт - ЖурналПроводокЕПСБУОбороты.СуммаОборотДт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыПерерасхода)
	|			ТОГДА ВЫБОР
	|					КОГДА Валюты.Ссылка ЕСТЬ NULL
	|						ТОГДА ЖурналПроводокЕПСБУОбороты.СуммаОборотДт - ЖурналПроводокЕПСБУОбороты.СуммаОборотКт
	|					ИНАЧЕ ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотДт - ЖурналПроводокЕПСБУОбороты.ВалютнаяСуммаОборотКт
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Обороты(
	|			&МоментВремени,
	|			,
	|			Регистратор,
	|			Счет В (&пСчет),
	|			,
	|			Организация = &Организация
	|				И Субконто1 = &Субконто1
	|				И ИФО = &ИФО,
	|			,
	|			) КАК ЖурналПроводокЕПСБУОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЖурналПроводокЕПСБУОбороты.Валюта = Валюты.Ссылка
	|			И (Валюты.Ссылка <> &ВалютаРегламентированногоУчета)
	|ГДЕ
	|	(ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыАвансов)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыИзрасходовано)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыОстатка)
	|			ИЛИ ЖурналПроводокЕПСБУОбороты.Регистратор В (&ДокументыПерерасхода))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДетальныеДанные.Счет КАК Счет,
	|	ДетальныеДанные.КПС КАК КПС,
	|	ДетальныеДанные.КФО КАК КФО,
	|	ДетальныеДанные.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) > 0
	|			ТОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Остаток,
	|	ВЫБОР
	|		КОГДА СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) < 0
	|			ТОГДА -СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) + СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) - СУММА(ДетальныеДанные.Получено) + СУММА(ДетальныеДанные.Израсходовано) + СУММА(ДетальныеДанные.ВозвращенОстаток) - СУММА(ДетальныеДанные.ВыданПерерасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Перерасход
	|ИЗ
	|	ДетальныеДанные КАК ДетальныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеДанные.Счет,
	|	ДетальныеДанные.КПС,
	|	ДетальныеДанные.КФО,
	|	ДетальныеДанные.Валюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДетальныеДанные.ПредыдущийАвансОстаток) - СУММА(ДетальныеДанные.ПредыдущийАвансПерерасход) + СУММА(ДетальныеДанные.Получено) - СУММА(ДетальныеДанные.Израсходовано) - СУММА(ДетальныеДанные.ВозвращенОстаток) + СУММА(ДетальныеДанные.ВыданПерерасход) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДетальныеДанные.КПС.Код,
	|	ДетальныеДанные.КФО.Порядок,
	|	ДетальныеДанные.Счет.Код";
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИФО = &ИФО", "ИСТИНА");
	КонецЕсли;
	
	ТаблицаНезавершенныхРасчетов = Запрос.Выполнить().Выгрузить();
	
	НезавершенныеРасчеты.Загрузить(ТаблицаНезавершенныхРасчетов);
	
	ТаблицаНезавершенныхРасчетов.Свернуть("Валюта","Остаток,Перерасход");
	
	НезавершенныеРасчетыПоВалютам.Загрузить(ТаблицаНезавершенныхРасчетов);
	
	Если ОбновитьПодсказку Тогда
		Если ПредыдущийОстатокПерерасходОтличаетсяОтРассчитанных Тогда
			Элементы.ГруппаНезавершенныеРасчеты.Подсказка =
				НСтр("ru = 'Итоги рассчитаны без учета предыдущего аванса, так как сумма входящего остатка/перерасхода на закладке ""Аванс"" не соответствует данным учета'");
		Иначе
			Элементы.ГруппаНезавершенныеРасчеты.Подсказка = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОстатокПерерасходТекущегоАванса(Знач НезавершенныеРасчетыПоВалютам)
	
	СтрокаОстаток = Новый Массив;
	СтрокаПерерасход = Новый Массив;
	
	Для Каждого НезавершенныеРасчетыСтрока Из НезавершенныеРасчетыПоВалютам Цикл
		
		Валюта = Строка(НезавершенныеРасчетыСтрока.Валюта);
		
		Если НезавершенныеРасчетыСтрока.Остаток <> 0 Тогда
			Если СтрокаОстаток.Количество() Тогда
				СтрокаОстаток.Добавить("; " + Формат(НезавершенныеРасчетыСтрока.Остаток,"ЧДЦ=2") + " " + Валюта + "");
			Иначе
				СтрокаОстаток.Добавить(Формат(НезавершенныеРасчетыСтрока.Остаток,"ЧДЦ=2") + " " + Валюта + "");
			КонецЕсли;
		КонецЕсли;
		Если НезавершенныеРасчетыСтрока.Перерасход <> 0 Тогда
			Если СтрокаПерерасход.Количество() Тогда
				СтрокаПерерасход.Добавить("; " + Формат(НезавершенныеРасчетыСтрока.Перерасход,"ЧДЦ=2") + " " + Валюта + "");
			Иначе
				СтрокаПерерасход.Добавить(Формат(НезавершенныеРасчетыСтрока.Перерасход,"ЧДЦ=2") + " " + Валюта + "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокаОстаток.Количество() И Не СтрокаПерерасход.Количество() Тогда
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Итого по текущему авансу: Остаток - / Перерасход -'"));
	Иначе
		ИтоговаяСтрокаМассив = Новый Массив;
		
		Если СтрокаОстаток.Количество() Тогда
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Остаток'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаОстаток);
		КонецЕсли;
		
		Если СтрокаПерерасход.Количество() Тогда
			Если СтрокаОстаток.Количество() Тогда
				ИтоговаяСтрокаМассив.Добавить(НСтр("ru = ' / '"));
			КонецЕсли;
			ИтоговаяСтрокаМассив.Добавить(НСтр("ru = 'Перерасход'") + " ");
			ИтоговаяСтрокаМассив.Добавить(СтрокаПерерасход);
		КонецЕсли;
		
		ИтоговаяСтрока = Новый ФорматированнаяСтрока(НСтр("ru = 'Итого по текущему авансу:'"), " ", ИтоговаяСтрокаМассив);
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

&НаСервере
Процедура НайтиПредыдущийАвансовыйОтчет()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРасходахПодотчетногоЛица.Ссылка КАК Ссылка,
	|	ОтчетОРасходахПодотчетногоЛица.Дата КАК Дата
	|ИЗ
	|	Документ.ОтчетОРасходахПодотчетногоЛица КАК ОтчетОРасходахПодотчетногоЛица
	|ГДЕ
	|	ОтчетОРасходахПодотчетногоЛица.Сотрудник = &Сотрудник
	|	И ОтчетОРасходахПодотчетногоЛица.Организация = &Организация
	|	И ОтчетОРасходахПодотчетногоЛица.ИФО = &ИФО
	|	И ОтчетОРасходахПодотчетногоЛица.Дата < &Дата
	|	И НЕ ОтчетОРасходахПодотчетногоЛица.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтчетОРасходахПодотчетногоЛица.Дата УБЫВ");
	Запрос.УстановитьПараметр("Организация", 		Объект.Организация);
	Запрос.УстановитьПараметр("ИФО", 				Объект.ИФО);
	Запрос.УстановитьПараметр("Сотрудник", 			Объект.Сотрудник);
	Запрос.УстановитьПараметр("Дата", 				Объект.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент", 	Объект.Ссылка);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "АвансовыйОтчет.ИФО = &ИФО", "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаПредыдущегоОтчета 	= Выборка.Дата;
		ПредыдущийОтчет 		= Выборка.Ссылка;
	Иначе
		ДатаПредыдущегоОтчета 	= "";
		ПредыдущийОтчет 		= "";
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти            

&НаСервереБезКонтекста
Функция КонтрагентСотрудника(СотрудникСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СотрудникСсылка, "Контрагент");
	
КонецФункции

//&НаСервере
//&ИзменениеИКонтроль("ЗаполнитьДобавленныеКолонкиТаблиц")
//Процедура АБК_ЗаполнитьДобавленныеКолонкиТаблиц()

//	МассивДокументов = Объект.Получено.Выгрузить().ВыгрузитьКолонку("ДокументАванса");   
//	
//	#Вставка
//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов,  Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументПерерасхода"), Истина);
//	
//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивДокументов,  Объект.ОстатокПерерасход.Выгрузить().ВыгрузитьКолонку("ДокументОстатка"), Истина);
//	#КонецВставки

//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор КАК Регистратор,
//	|	ВЫБОР
//	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
//	|			ТОГДА &ВалютаРуб
//	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
//	|	КОНЕЦ КАК Валюта,
//	|	СУММА(ВЫБОР
//	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
//	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
//	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
//	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаКт
//	|		КОНЕЦ) КАК Сумма
//	|ИЗ
//	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
//	|			,
//	|			,
//	|			Организация = &Организация
//	|				И СчетДт В (&РасчетыСПодотчетнымиЛицами)
//	|				И СчетКт В (&СчетаДС)
//	|				И ИФО = &ИФО
//	|				И СубконтоДт1 = &Контрагент
//	|				И Регистратор В (&МассивДокументов),
//	|			,
//	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
//	|	ВЫБОР
//	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт ЕСТЬ NULL
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт = &ВалютаРуб
//	|			ТОГДА &ВалютаРуб
//	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаКт
//	|	КОНЕЦ
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
//	|	ВЫБОР
//	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
//	|			ТОГДА &ВалютаРуб
//	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
//	|	КОНЕЦ,
//	|	СУММА(ВЫБОР
//	|			КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
//	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|					ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
//	|				ТОГДА ЖурналПроводокЕПСБУДвиженияССубконто.Сумма
//	|			ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютнаяСуммаДт
//	|		КОНЕЦ)
//	|ИЗ
//	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.ДвиженияССубконто(
//	|			,
//	|			,
//	|			Организация = &Организация
//	|				И СчетКт В (&РасчетыСПодотчетнымиЛицами)
//	|				И СчетДт В (&СчетаДС)
//	|				И ИФО = &ИФО
//	|				И СубконтоКт1 = &Контрагент
//	|				И Регистратор В (&МассивДокументов),
//	|			,
//	|			) КАК ЖурналПроводокЕПСБУДвиженияССубконто
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ЖурналПроводокЕПСБУДвиженияССубконто.Регистратор,
//	|	ВЫБОР
//	|		КОГДА ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт ЕСТЬ NULL
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
//	|				ИЛИ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт = &ВалютаРуб
//	|			ТОГДА &ВалютаРуб
//	|		ИНАЧЕ ЖурналПроводокЕПСБУДвиженияССубконто.ВалютаДт
//	|	КОНЕЦ");

//	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") Тогда
//		Запрос.УстановитьПараметр("ИФО", Объект.ИФО);
//	Иначе
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИФО = &ИФО", "");
//	КонецЕсли;

//	Запрос.УстановитьПараметр("Организация", Объект.Организация);
//	Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Контрагент"));
//	Запрос.УстановитьПараметр("ВалютаРуб", ОбщегоНазначенияБГУПовтИсп.ПолучитьВалютуРегламентированногоУчета());
//	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
//	Запрос.УстановитьПараметр("РасчетыСПодотчетнымиЛицами", БухгалтерскийУчетПовтИсп.ПолучитьМассивСчетов("208.00"));
//	Запрос.УстановитьПараметр("СчетаДС", БухгалтерскийУчетПовтИсп.ПолучитьМассивСчетов("201.00,210.03,304.00"));

//	Выборка = Запрос.Выполнить().Выбрать();

//	Пока Выборка.Следующий() Цикл

//		Строки = Объект.Получено.НайтиСтроки(Новый Структура("ДокументАванса", Выборка.Регистратор));

//		Если Строки.Количество() > 0 Тогда

//			ЗаполнитьЗначенияСвойств(Строки[0], Выборка);

//		КонецЕсли;    
//		
//		#Вставка
//		Строки = Объект.ОстатокПерерасход.НайтиСтроки(Новый Структура("ДокументПерерасхода", Выборка.Регистратор));
//		
//		Если Строки.Количество() > 0 Тогда
//			
//			Строки[0].ВалютаПерерасхода = Выборка.Валюта;
//			Строки[0].СуммаПерерасхода = Выборка.Сумма;
//			
//		КонецЕсли;
//		
//		Строки = Объект.ОстатокПерерасход.НайтиСтроки(Новый Структура("ДокументОстатка", Выборка.Регистратор));
//		
//		Если Строки.Количество() > 0 Тогда
//			
//			Строки[0].ВалютаОстатка = Выборка.Валюта;
//			Строки[0].СуммаОстатка = Выборка.Сумма;
//			
//		КонецЕсли;
//		#КонецВставки

//	КонецЦикла;

//	Для Каждого Строка Из Объект.ДенежныеОбязательства Цикл
//		Строка.Отклонение = Строка.СуммаПоОтчету - Строка.СуммаПоОснованию;
//	КонецЦикла;

//	ОбновитьТекстыЗаголовковВСтрокахТаблицРасходов(); 
//	
//КонецПроцедуры      

&НаКлиентеНаСервереБезКонтекста
&ИзменениеИКонтроль("УстановитьВидимостьРеквизитовЗаГраницы")
Процедура АБК_УстановитьВидимостьРеквизитовЗаГраницы(Форма)

	Элементы = Форма.Элементы;

	ЭтоКомандировка = Форма.ЭтоКомандировка;

	КомандировкаЗаГраницу = Форма.Объект.КомандировкаЗаГраницу;

	РеквизитыДляКомандировкиПоРФ = Новый Массив;
	РеквизитыДляКомандировкиПоРФ.Добавить("СуточныеТерритория");

	Для Каждого Реквизит Из РеквизитыДляКомандировкиПоРФ Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Реквизит, "Видимость",
		НЕ КомандировкаЗаГраницу И ЭтоКомандировка);
	КонецЦикла;

	РеквизитыДляКомандировкиЗаГраницу = Новый Массив;
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПолученоВалюта");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ОтчетОВыполненнойРаботеСтрана");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("НадписьКурсыВалют");

	РеквизитыДляКомандировкиЗаГраницу.Добавить("СуточныеВалюта");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("СуточныеСтрана");

	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПроездЗаголовокДатаПересеченияГраницы");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПроездДатаПересеченияГраницы");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПроездВалюта");

	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПроживаниеВалюта");
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПроживаниеСтрана");

	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПрочиеРасходыВалюта"); 
	
	#Вставка                     
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ОстатокПерерасходВалютаПерерасхода"); 
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ОстатокПерерасходВалютаОстатка"); 
	РеквизитыДляКомандировкиЗаГраницу.Добавить("НезавершенныеРасчетыВалюта"); 
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ОстатокПредыдущегоАвансаВВалюте"); 
	РеквизитыДляКомандировкиЗаГраницу.Добавить("ПерерасходПредыдущегоАвансаВВалюте"); 
	#КонецВставки

	Для Каждого Реквизит Из РеквизитыДляКомандировкиЗаГраницу Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, Реквизит, "Видимость",
		ЭтоКомандировка И КомандировкаЗаГраницу);
	КонецЦикла;

	Форма.ЗаголовокКолонкиСтранаДопУсловие = НСтр("ru = 'Доп. условие'") + ?(КомандировкаЗаГраницу, НСтр("ru = ', страна'"), "");
	Форма.ЗаголовокКолонкиУсловиеПроживания = НСтр("ru = 'Условие проживания'") + ?(КомандировкаЗаГраницу, НСтр("ru = ', страна'"), "");

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаИтоги", "Видимость",
	НЕ ЭтоКомандировка ИЛИ НЕ КомандировкаЗаГраницу);

КонецПроцедуры


