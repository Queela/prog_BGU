
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.3.1");
	ПараметрыРегистрации.Наименование = ЭтотОбъект.Метаданные().Синоним;
	ПараметрыРегистрации.Информация = НСтр("ru = '" + ЭтотОбъект.Метаданные().Комментарий + "'");
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = "100.36.00";     
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = "Уведомление о подписании внутр. ЭД (АБК)";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.Идентификатор = "АБК_УведомлениеОПодписанииВнутрЭД";
	
	Возврат ПараметрыРегистрации;
КонецФункции

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#КонецОбласти

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Если ИдентификаторКоманды = "АБК_УведомлениеОПодписанииВнутрЭД" тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущаяДата = ТекущаяДата();
		ВремяПовторнойОтправки = 86400; //В секундах
		
		СвойствоОтправленныеУведомления = НайтиСоздатьДополнительноеСведение();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияДокументовВнутреннегоЭДО.ТребуетсяПодписание);
		Запрос.УстановитьПараметр("СвойствоОтправленныеУведомления", СвойствоОтправленныеУведомления);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(УчетныеЗаписиЭлектроннойПочты.Ссылка) КАК УчетнаяЗапись
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ
		|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки
		|	И УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты <> """"
		|	И УчетныеЗаписиЭлектроннойПочты.ВладелецУчетнойЗаписи = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоставМаршрутаЭлектронногоДокумента.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СоставМаршрутаЭлектронногоДокумента.Подписант КАК Подписант,
		|	ЕСТЬNULL(ДополнительныеСведения.Значение, """") КАК ОтправленныеУведомления,
		|	СоставМаршрутаЭлектронногоДокумента.Подписант.ФизическоеЛицо КАК ПодписантФизическоеЛицо
		|ИЗ
		|	РегистрСведений.СоставМаршрутаЭлектронногоДокумента КАК СоставМаршрутаЭлектронногоДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ПО СоставМаршрутаЭлектронногоДокумента.ЭлектронныйДокумент = ДополнительныеСведения.Объект
		|			И (ДополнительныеСведения.Свойство = &СвойствоОтправленныеУведомления)
		|ГДЕ
		|	СоставМаршрутаЭлектронногоДокумента.Состояние = &Состояние
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставМаршрутаЭлектронногоДокумента.ЭлектронныйДокумент,
		|	СоставМаршрутаЭлектронногоДокумента.Подписант,
		|	ДополнительныеСведения.Значение
		|ИТОГИ
		|	МАКСИМУМ(ОтправленныеУведомления)
		|ПО
		|	ПодписантФизическоеЛицо";
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаУЗ = Результат[0].Выбрать();
		Если НЕ ВыборкаУЗ.Следующий() 
			ИЛИ НЕ ЗначениеЗаполнено(ВыборкаУЗ.УчетнаяЗапись) тогда
			ЗаписьЖурналаРегистрации("Отправка уведомления на почту.", УровеньЖурналаРегистрации.Предупреждение,,, 
			"Невозможно выполнить отправку: учетная запись не найдена.");
			Возврат;
		КонецЕсли;
		
		УчетнаяЗапись = ВыборкаУЗ.УчетнаяЗапись;
		
		ДанныеПодписанта = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Получатели = Результат[1].Выгрузить().ВыгрузитьКолонку("ПодписантФизическоеЛицо");
		
		ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();
		ОтборКИ.ТипыКонтактнойИнформации.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		ОтборКИ.ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailФизическиеЛица);
		
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Получатели, ОтборКИ);  
		
		ТаблицаОтправленныхУведомлений = Новый ТаблицаЗначений;
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("ЭлектронныйДокумент",Новый ОписаниеТипов("ДокументСсылка.ВнутреннийЭлектронныйДокумент"));
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("Подписант",Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		
		
		КоличествоОтправленных = 0;
		Пока ДанныеПодписанта.Следующий() цикл       
			ЕстьПисьмаДляОтправки = Ложь;      
			
			ПараметрыПисьма = ПолучитьПараметрыПисьма();
			
			
			КИПользователя = КонтактнаяИнформация.Найти(ДанныеПодписанта.ПодписантФизическоеЛицо, "Объект");
			Если КИПользователя <> Неопределено тогда
				Кому = Новый Структура;
				Кому.Вставить("Адрес", КИПользователя.Представление);
				Кому.Вставить("Представление", "");
				
				ПараметрыПисьма.Тема = "Подписание документа";
				ПараметрыПисьма.Кому.Добавить(Кому);  
				
				ПараметрыПисьма.Тело = "";
				
				ДанныеДляПисем = ДанныеПодписанта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ДанныеДляПисем.Следующий() цикл
					
					Если ДанныеДляПисем.ОтправленныеУведомления <> "" тогда
						ТаблицаОтправленных = ТаблицаОтправленныхИзСтроки(ДанныеДляПисем.ОтправленныеУведомления);
						Для к = -(ТаблицаОтправленных.Количество()-1) по 0 цикл
							ОтправленноеПисьмо = ТаблицаОтправленных[-к];
							Если (ТекущаяДата - ОтправленноеПисьмо.ДатаОтправки) >= ВремяПовторнойОтправки тогда
								ТаблицаОтправленных.Удалить(ОтправленноеПисьмо);
							КонецЕсли;
						КонецЦикла;
					Иначе
						ТаблицаОтправленных = ПустаяТаблицаОтправленных();
					КонецЕсли;
					
					Если КоличествоОтправленных = 40 тогда // Обработка запускается каждую минуту. 40 - Лимит на письма в минуту с учетом задержки при отправке. 
						ЗаписатьОтправленныеВРегистр(ДанныеДляПисем.ЭлектронныйДокумент, СвойствоОтправленныеУведомления, ТаблицаОтправленныхВСтроку(ТаблицаОтправленных));
						Возврат;
					КонецЕсли;
					
					Если ТаблицаОтправленных.Найти(ДанныеДляПисем.Подписант, "Подписант") <> Неопределено тогда
						Продолжить;
					КонецЕсли;  
					
					
					Если НЕ ЕстьПисьмаДляОтправки Тогда
						ПараметрыПисьма.Тело = "Требуется подписать документ(ы): ";   
					КонецЕсли;    
					
					ПараметрыПисьма.Тело = ПараметрыПисьма.Тело  
					+ "<a href="+СформироватьСсылкуНаДокумент(ДанныеДляПисем.ЭлектронныйДокумент)+">"+НазваниеДокументаДляПисьма(ДанныеДляПисем.ЭлектронныйДокумент)+"</a>"+ ";" +"<br>";
					
					ОтправленноеУведомление = ТаблицаОтправленныхУведомлений.Добавить();
					ОтправленноеУведомление.ЭлектронныйДокумент = ДанныеДляПисем.ЭлектронныйДокумент;
					ОтправленноеУведомление.Подписант = ДанныеДляПисем.Подписант; 
					
					ЕстьПисьмаДляОтправки = Истина;
					
				КонецЦикла;  
				
				Если ЕстьПисьмаДляОтправки Тогда     
					
					Письмо = РаботаСПочтовымиСообщениямиСлужебный.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
					
					Попытка
						РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
						КоличествоОтправленных = КоличествоОтправленных + 1;  
						
						
						Отправка = ТаблицаОтправленных.Добавить();
						Отправка.Подписант = ДанныеПодписанта.Подписант;
						Отправка.ДатаОтправки = ТекущаяДата;
						ЗаписатьОтправленныеВРегистр(ДанныеДляПисем.ЭлектронныйДокумент, СвойствоОтправленныеУведомления, ТаблицаОтправленныхВСтроку(ТаблицаОтправленных));
					Исключение
						ЗаписьЖурналаРегистрации("Отправка уведомления на почту.", УровеньЖурналаРегистрации.Ошибка,,,"Ошибка отправки уведомления по причине: " + ОписаниеОшибки());
					КонецПопытки;     
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ТаблицаЭлектронныхДокументов = ТаблицаОтправленныхУведомлений.Скопировать();
		ТаблицаЭлектронныхДокументов.Свернуть("ЭлектронныйДокумент");
		МассивЭлектронныхДокументов = ТаблицаЭлектронныхДокументов.ВыгрузитьКолонку("ЭлектронныйДокумент");
		
		Для Каждого ЭлДок из МассивЭлектронныхДокументов Цикл
			ТаблицаОтправленных = ПустаяТаблицаОтправленных();
			
			НайденныеСтроки = ТаблицаОтправленныхУведомлений.НайтиСтроки(Новый Структура("ЭлектронныйДокумент",ЭлДок));
			Для Каждого НайденнаяСтр из НайденныеСтроки Цикл
				Отправка = ТаблицаОтправленных.Добавить();
				Отправка.Подписант = НайденнаяСтр.Подписант;
				Отправка.ДатаОтправки = ТекущаяДата;
			КонецЦикла;  
			
			ЗаписатьОтправленныеВРегистр(ЭлДок, СвойствоОтправленныеУведомления, ТаблицаОтправленныхВСтроку(ТаблицаОтправленных));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Функция СформироватьСсылкуНаДокумент(ЭлектронныйДокумент)
	Возврат "https://1cbuh.adygnet.ru/1c_bgu#"+ПолучитьНавигационнуюСсылку(ЭлектронныйДокумент) 
КонецФункции

Функция НайтиСоздатьДополнительноеСведение()
	
	ИдентификаторДляФормул = "АБК_ОтправленныеУведомления";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторДляФормул", ИдентификаторДляФормул);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.ИдентификаторДляФормул = &ИдентификаторДляФормул";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	ДопСведение = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
	ДопСведение.Наименование = "Отправленные уведомления (АБК)";
	ДопСведение.ИдентификаторДляФормул = ИдентификаторДляФормул;
	ДопСведение.Виден = Ложь;
	ДопСведение.Комментарий = "Обозначает таблицу уже отправленных уведомлений в формате внутренней строки.";
	ДопСведение.ТипЗначения = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(1024));
	ДопСведение.ЭтоДополнительноеСведение = Истина;
	ДопСведение.Записать();
	
	Возврат ДопСведение.Ссылка;
	
КонецФункции

Процедура ЗаписатьОтправленныеВРегистр(Объект, Свойство, Отправленные)
	ЗаписьОтправленных = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	ЗаписьОтправленных.Объект 	= Объект;
	ЗаписьОтправленных.Свойство = Свойство;
	ЗаписьОтправленных.Значение = Отправленные;
	ЗаписьОтправленных.Записать(Истина);
КонецПроцедуры

Функция ТаблицаОтправленныхВСтроку(ТаблицаОтправленных)
	
	Результат = "";
	
	Шаблон = "%1;%2";
	
	Для Каждого Строка из ТаблицаОтправленных цикл
		Результат = Результат + СтрШаблон(Шаблон, Строка.Подписант.УникальныйИдентификатор(), Строка.ДатаОтправки) + Символы.ПС;
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Результат, 1);
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаОтправленныхИзСтроки(Строка)
	
	ТаблицаОтправленных = ПустаяТаблицаОтправленных();
	
	Для к = 1 по СтрЧислоСтрок(Строка) цикл
		ЧастиСтроки = СтрРазделить(СтрПолучитьСтроку(Строка, к), ";", Ложь);
		
		Отправка = ТаблицаОтправленных.Добавить();
		Отправка.Подписант = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ЧастиСтроки[0]));
		Отправка.ДатаОтправки = Дата(ЧастиСтроки[1]);
	КонецЦикла;
	
	Возврат ТаблицаОтправленных;
	
КонецФункции

Функция ПустаяТаблицаОтправленных()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таблица.Колонки.Добавить("ДатаОтправки", Новый ОписаниеТипов("Дата"));
	
	Возврат Таблица;
КонецФункции

Функция ПолучитьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Важность", ВажностьИнтернетПочтовогоСообщения.Обычная);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ПараметрыПисьма.Вставить("Кодировка", "UTF-8");
	ПараметрыПисьма.Вставить("Кому", Новый Массив);
	ПараметрыПисьма.Вставить("Копии", Новый Массив);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	ПараметрыПисьма.Вставить("СкрытыеКопии", Новый Массив);
	ПараметрыПисьма.Вставить("Тело", "");
	ПараметрыПисьма.Вставить("Тема", "");
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	Возврат ПараметрыПисьма;
	
КонецФункции

Функция НазваниеДокументаДляПисьма(ЭлектронныйДокумент) 
	
	НазваниеДокумента = Строка(ЭлектронныйДокумент);  
	
	Если ОбщегоНазначенияБГУ.ЕстьРеквизитДокумента("Ответственный",ЭлектронныйДокумент.УчетныйДокумент.Метаданные()) 
		И ЗначениеЗаполнено(ЭлектронныйДокумент.УчетныйДокумент.Ответственный) Тогда
		НазваниеДокумента = НазваниеДокумента + ", ответственный: " + Строка(ЭлектронныйДокумент.УчетныйДокумент.Ответственный);		
	КонецЕсли;   
	
	Если ОбщегоНазначенияБГУ.ЕстьРеквизитДокумента("ПодотчетноеЛицо",ЭлектронныйДокумент.УчетныйДокумент.Метаданные()) 
		И ЗначениеЗаполнено(ЭлектронныйДокумент.УчетныйДокумент.ПодотчетноеЛицо) Тогда
		НазваниеДокумента = НазваниеДокумента + ", подотчетное лицо: " + Строка(ЭлектронныйДокумент.УчетныйДокумент.ПодотчетноеЛицо);		
	КонецЕсли;  
	
	Возврат НазваниеДокумента;
	
КонецФункции