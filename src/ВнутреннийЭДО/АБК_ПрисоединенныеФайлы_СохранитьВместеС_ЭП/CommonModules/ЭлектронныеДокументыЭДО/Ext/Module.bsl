
Процедура ПодменитьФайлНаФайлСВизуализацией_ВнутреннийЭДО(
	ДанныеФайла, 
	УникальныйИдентификатор, 
	ДополнитьФайломВизуализации = Ложь) Экспорт

	Если НРег(ДанныеФайла.Расширение) <> НРег("pdf") ИЛИ ДанныеФайла.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	

	ДоступнаРаботаСPDF = Истина;
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	ВерсияПлатформыБезНомераСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияПлатформы);
	Если (ВерсияПлатформыБезНомераСборки = "8.3.16"
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.16.1883") < 0)
		Или (ВерсияПлатформыБезНомераСборки = "8.3.17"
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.17.2127") < 0)
		Или (ВерсияПлатформыБезНомераСборки = "8.3.18"
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.18.1267") < 0) Тогда
		ДоступнаРаботаСPDF = Ложь;
	КонецЕсли;

	Если Не ДоступнаРаботаСPDF Тогда
		Возврат;
	КонецЕсли;	                                                       
	
	//Штамп = КриптографияБЭД.ШтампЭлектроннойПодписи(ДанныеДляШтампаЭлектроннойПодписи(ДанныеФайла.Владелец));
	
	Штамп = Новый ТабличныйДокумент;
	
	//ВнутреннийЭлектронныйДокумент = ПолучитьВнутреннийЭлектронныйДокументПоВладельцу(ДанныеФайла.Владелец); 
	//
	//Если ВнутреннийЭлектронныйДокумент <> Неопределено Тогда
	
		УстановленныеПодписи = Новый Массив;
		
		Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(ДанныеФайла.Ссылка);      
		
		ОрганизацияВладельца = Справочники.Организации.ОрганизацияПоУмолчанию();
		
		Если ЗначениеЗаполнено(ДанныеФайла.Владелец)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДанныеФайла.Владелец.Метаданные()) Тогда
			ОрганизацияВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеФайла.Владелец,"Организация",Истина);
		КонецЕсли;
		
		//Подписи = ЭлектроннаяПодпись.УстановленныеПодписи(ВнутреннийЭлектронныйДокумент.ОсновнойФайл);       
		
		Для Каждого Подпись Из Подписи Цикл
			
			ОтпечатокСтруктура = Новый Структура(
				"ПорядковыйНомер, ДатаПодписи, УстановившийПодпись, ПростаяПодпись, ДатаПроверкиПодписи,
				|ИмяФайлаПодписи, КомуВыданСертификат, Отпечаток, Подпись, ПодписьВерна,
				|Сертификат, ВладелецПодписи, Должность, Организация, ТипПодписи, СрокДействияПоследнейМеткиВремени");
			
			ЗаполнитьЗначенияСвойств(ОтпечатокСтруктура, Подпись);
			
			Если ОтпечатокСтруктура.ПростаяПодпись <> Истина Тогда
				ОтпечатокСтруктура.Сертификат = ОтпечатокСтруктура.Сертификат.Получить();
			КонецЕсли;
			
			// Вставка в результирующий массив по возрастанию даты подписания
			Для Индекс = 0 По УстановленныеПодписи.ВГраница() Цикл
				Если Подпись.ДатаПодписи < УстановленныеПодписи[Индекс].ДатаПодписи Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			УстановленныеПодписи.Вставить(Индекс, ОтпечатокСтруктура);
			
		КонецЦикла;
		
		//ВнутреннийЭДО.ДобавитьШтампыЭлектронныхПодписей(Штамп, УстановленныеПодписи, ВнутреннийЭлектронныйДокумент.Организация);
		ВнутреннийЭДО.ДобавитьШтампыЭлектронныхПодписей(Штамп, УстановленныеПодписи, ОрганизацияВладельца);

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);

		СтрокаДляВыполнения = 
		"ЗаписьPDF = Новый ЗаписьPDF(ИмяВременногоФайла);
		|Описание = Новый ОписаниеОтображаемогоОбъектаPDF;
		|Описание.Объект = Штамп;
		|ЗаписьPDF.ЗаписатьОтображаемыйОбъект(Описание);
		|ЗаписьPDF.Закрыть();";

		Попытка
			Выполнить(СтрокаДляВыполнения); // АПК:487 Исполняемый код безопасен.
		Исключение	
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Вставка штампа ЭП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			Возврат;
		КонецПопытки;	

		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		АдресСШтампом = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);

		Если Не ДополнитьФайломВизуализации Тогда
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = АдресСШтампом;
		Иначе	
			ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеВизуализации", АдресСШтампом);
		КонецЕсли;	

		ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = "";

		УдалитьФайлы(ИмяВременногоФайла);  
	
	//КонецЕсли;

КонецПроцедуры

Функция ПолучитьВнутреннийЭлектронныйДокументПоВладельцу(ВладелецФайла)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВнутреннийЭлектронныйДокумент.Ссылка КАК ВнутреннийЭлектронныйДокумент
	|ИЗ
	|	Документ.ВнутреннийЭлектронныйДокумент КАК ВнутреннийЭлектронныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭлектронныхДокументов КАК СостоянияЭлектронныхДокументов
	|		ПО СостоянияЭлектронныхДокументов.ЭлектронныйДокумент = ВнутреннийЭлектронныйДокумент.Ссылка
	|ГДЕ
	|	ВнутреннийЭлектронныйДокумент.УчетныйДокумент = &УчетныйДокумент
	|	И НЕ ВнутреннийЭлектронныйДокумент.ПометкаУдаления
	|	И СостоянияЭлектронныхДокументов.Состояние <> &Аннулирован");	 
	Запрос.УстановитьПараметр("Аннулирован", Перечисления.СостоянияДокументовВнутреннегоЭДО.Аннулирован); 
	Запрос.УстановитьПараметр("УчетныйДокумент", ВладелецФайла); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнутреннийЭлектронныйДокумент;	
	КонецЕсли;
КонецФункции

