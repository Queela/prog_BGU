
&НаСервере
&ИзменениеИКонтроль("ЗаполнитьДокументНаСервере")
Процедура АБК_ЗаполнитьДокументНаСервере(Адреса)

	НоваяТаблица = РасчетыПоРодительскойПлате.ЗаполнитьИРассчитатьТабличнуюЧасть(Объект, 2, Адреса);

	Если Константы.СпособРасчетаКомпенсацииРодительскойПлаты.Получить() = Перечисления.СпособыРасчетаКомпенсацииРП.ПоФактической Тогда
		ДополнитьОплатамиВыбывшихДетей(НоваяТаблица);
	КонецЕсли;

	Если НоваяТаблица = Неопределено ИЛИ НоваяТаблица.Количество()=0 Тогда	 
		Объект.Дети.Очистить();
	Иначе
		ПроверитьУстранитьДубли(НоваяТаблица, Объект.КонецПериода);

		Если ЗначениеЗаполнено(Объект.НастройкаРасчета) Тогда
			ПроверитьИспользованиеНастройкиРасчета(НоваяТаблица, Объект.НастройкаРасчета);
		КонецЕсли;	

		НоваяТаблица.Свернуть("ГруппаДетскогоУчреждения,НастройкаКомпенсации,Ребенок,Плательщик,СчетПлательщика,ПроцентКомпенсации,Контрагент","Сумма,СуммаКомпенсации");
		НоваяТаблица.Сортировать("ГруппаДетскогоУчреждения,Ребенок,НастройкаКомпенсации");
		Объект.Дети.Загрузить(НоваяТаблица);
	КонецЕсли;
	#Вставка
	РассчитатьКомпенсациюЗаПредыдущиеПериоды(Неопределено);
	#КонецВставки
	
	ЗаполнитьДобавленныеКолонки();
	УстановитьПредупреждение(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Функция РассчитатьКомпенсациюЗаПредыдущиеПериоды(Знач ИдентификаторыСтрок)

	Если НеЗаполнятьЗаПредыдущиеПериоды Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	#Область ПодготовкаПараметров
	
	НастройкаРасчета = Справочники.НастройкиРасчетовПоРодительскойПлате.найтиПоНаименованию("Настройка расчетов предыдущие периоды (Техническая)");
		
	Если Не ЗначениеЗаполнено(НастройкаРасчета) Тогда 
		Сообщить("В базе не определена настройка заполнения предыдущих периодов");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкаРасчета.Настройки.Количество() > 0 Тогда
		Схема = НастройкаРасчета.Настройки[2].Схема.Получить();
	Иначе
		Схема = Неопределено;
	КонецЕсли;
	
	ФормулыБазы = Новый Массив;
	ФормулыКомпенсации = Новый Массив;
	ИспользуемыеПараметры = Новый Структура;
	НомерПараметра = 0;
	
	ИмяПараметраТехническойНастройки = 0;
	ИмяПараметраТекущейНастроки = 0;
	НастройкиКомпенсацииРодПлаты = Справочники.НастройкиРасчетовПоРодительскойПлате.ФормулыНастроекКомпенсации(); 
	
	Для Каждого НастройкаКомпенсации Из НастройкиКомпенсацииРодПлаты Цикл
		
		НомерПараметра = НомерПараметра + 1;
		ИмяПараметра = "НастройкаКомпенсации" + НомерПараметра;
		ИспользуемыеПараметры.Вставить(ИмяПараметра, НастройкаКомпенсации.Ссылка);
				
		СхемаДоп = НастройкаКомпенсации.Схема.Получить();
		ДобавитьВыражение(СхемаДоп.ВычисляемыеПоля.Найти("Сумма"), ИмяПараметра, ФормулыБазы);
		ДобавитьВыражение(СхемаДоп.ВычисляемыеПоля.Найти("СуммаКомпенсации"), ИмяПараметра, ФормулыКомпенсации);
		
		НовыйПараметр = Схема.Параметры.Добавить();
		НовыйПараметр.Имя = ИмяПараметра;
		НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиРасчетовПоРодительскойПлате");
		
	КонецЦикла;
		
	ВставитьОбработанноеВыражениеСКДКомпенсации(Схема.ВычисляемыеПоля.Найти("Сумма"),            ФормулыБазы);
	ВставитьОбработанноеВыражениеСКДКомпенсации(Схема.ВычисляемыеПоля.Найти("СуммаКомпенсации"), ФормулыКомпенсации);
	
	
	// Остатки по контрагентам по 205.31 помесячно
	МассивКонтрагентов = Объект.Дети.Выгрузить(,"Контрагент").ВыгрузитьКолонку("Контрагент");
	МассивДетей = Объект.Дети.Выгрузить(,"Ребенок").ВыгрузитьКолонку("Ребенок"); 
	
	ТаблицаНачальныхОстатков = ПолучитьНачальныеОстаткиПоДетям(Объект.Организация, МассивДетей);
	ТаблицаНастроекРасчетаПоДетям = ПолучитьНастройкиРасчетаПоДетям(МассивДетей, Объект.НастройкаРасчета, Объект.Организация, Объект.НачалоПериода);
	
	МассивРеквизитовОбъекта = ЭтотОбъект.ПолучитьРеквизиты("Объект");
	ДанныеФормыСтруктура = Новый Структура;
	Для Каждого РеквизитОбъекта из МассивРеквизитовОбъекта Цикл 
		Если РеквизитОбъекта.Имя = "Движения" или СтрНайти(РеквизитОбъекта.ТипЗначения, "табличная часть") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФормыСтруктура.Вставить(РеквизитОбъекта.Имя, Объект[РеквизитОбъекта.Имя])	
	КонецЦикла;   
	
	ТаблицаВыводаРасчета = Новый ТаблицаЗначений;
	ТаблицаВыводаРасчета.Колонки.Добавить("Ребенок",			Новый ОписаниеТипов("СправочникСсылка.Дети"));
	ТаблицаВыводаРасчета.Колонки.Добавить("Месяц",				Новый ОписаниеТипов("Строка"));
	ТаблицаВыводаРасчета.Колонки.Добавить("ДатаКонцаМесяца",	ОбщегоНазначенияБГУ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаВыводаРасчета.Колонки.Добавить("СуммаБазы",			ОбщегоНазначенияБГУ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВыводаРасчета.Колонки.Добавить("СуммаКомпенсации",	ОбщегоНазначенияБГУ.ПолучитьОписаниеТиповЧисла(15,2));
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("НастройкаРасчета",					НастройкаРасчета);
	ПараметрыРасчета.Вставить("Схема",								Схема);
	ПараметрыРасчета.Вставить("ИспользуемыеПараметры",				ИспользуемыеПараметры);
	ПараметрыРасчета.Вставить("НастройкиКомпенсацииРодПлаты", 		НастройкиКомпенсацииРодПлаты);   
	ПараметрыРасчета.Вставить("Объект", ДанныеФормыСтруктура);
	ПараметрыРасчета.Вставить("ТаблицаВыводаРасчета",				ТаблицаВыводаРасчета);   
	
	#КонецОбласти
	
	#Область Заполнение
	
	Если ИдентификаторыСтрок = Неопределено Тогда
		// Расчет по умолчанию 
		ОбластьОбхода = Объект.Дети;
	Иначе
		ОбластьОбхода = ИдентификаторыСтрок;
	КонецЕсли; 
	
	Для Каждого ЭлементОбхода из ОбластьОбхода Цикл
		
		Если ИдентификаторыСтрок = Неопределено Тогда
			Строка = ЭлементОбхода;	
		Иначе
			Строка = Объект.Дети.НайтиПоИдентификатору(ЭлементОбхода);	
		КонецЕсли;
		
		Если Строка <> Неопределено Тогда
			
			// Начальные остатки
			МассивНачальныхОстатковРебенку = ТаблицаНачальныхОстатков.НайтиСтроки(Новый Структура("Ребенок",Строка.Ребенок)); 
			Если МассивНачальныхОстатковРебенку.Количество() Тогда
				НачальныйОстатокКомпенсации = МассивНачальныхОстатковРебенку[0].СуммаКомпенсации;
				ПроцентКомпенсацииРебенка = МассивНачальныхОстатковРебенку[0].ПроцентКомпенсации;
			Иначе
				НачальныйОстатокКомпенсации = 0;
				ПроцентКомпенсацииРебенка = 0;
			КонецЕсли;
			ПараметрыРасчета.Вставить("НачальныйОстатокКомпенсации", НачальныйОстатокКомпенсации);
			ПараметрыРасчета.Вставить("ПроцентКомпенсацииРебенка", ПроцентКомпенсацииРебенка);
			
			// Дата действия актуальных настройек расчета по ребенку
			МассивНастроекРебенку = ТаблицаНастроекРасчетаПоДетям.НайтиСтроки(Новый Структура("Ребенок",Строка.Ребенок)); 
			Если МассивНастроекРебенку.Количество() Тогда
				ДатаНачалаАктуальныхНастроек = МассивНастроекРебенку[0].ДатаНачала;
			Иначе
				ДатаНачалаАктуальныхНастроек = Неопределено;
			КонецЕсли;
			ПараметрыРасчета.Вставить("ДатаНачалаАктуальныхНастроек", ДатаНачалаАктуальныхНастроек);
			
			ТекущийМесяц = Объект.КонецПериода;
			
			// Рекурсивно получаем суммы за предыдущие месяцы и помещаем их в таблицу ТаблицаВыводаРасчета
			ПолучитьСуммуЗаПредыдущийМесяц(ПараметрыРасчета,ТекущийМесяц,Строка.Ребенок);
			
			Если ИдентификаторыСтрок = Неопределено Тогда
				
				СтрокаЗаТекущийМесяц = ТаблицаВыводаРасчета.Добавить();
				СтрокаЗаТекущийМесяц.Ребенок 			= Строка.Ребенок;
				СтрокаЗаТекущийМесяц.ДатаКонцаМесяца 	= КонецМесяца(Объект.КонецПериода);
				СтрокаЗаТекущийМесяц.Месяц 				= Формат(СтрокаЗаТекущийМесяц.ДатаКонцаМесяца,"ДФ=ММММ");
				СтрокаЗаТекущийМесяц.СуммаБазы 			= Строка.Сумма;
				СтрокаЗаТекущийМесяц.СуммаКомпенсации 	= Строка.СуммаКомпенсации;
				
				МассивСтрокРасчетаПоРебенку = ТаблицаВыводаРасчета.НайтиСтроки(Новый Структура("Ребенок",Строка.Ребенок));			
				ТаблицаРасчетаПоРебенку = ТаблицаВыводаРасчета.Скопировать(МассивСтрокРасчетаПоРебенку);
				Строка.Сумма 			= ТаблицаРасчетаПоРебенку.Итог("СуммаБазы");
				Строка.СуммаКомпенсации = ТаблицаРасчетаПоРебенку.Итог("СуммаКомпенсации");	   
				
			Иначе 
				
				МассивСтрокРасчетаПоРебенку = ТаблицаВыводаРасчета.НайтиСтроки(Новый Структура("Ребенок",Строка.Ребенок));
				
				ТаблицаРасчетаПоРебенку = ТаблицаВыводаРасчета.Скопировать(МассивСтрокРасчетаПоРебенку);
				СуммаПредыдущиеПериоды 				= ТаблицаРасчетаПоРебенку.Итог("СуммаБазы");
				СуммаКомпенсацииПредыдущиеПериоды 	= ТаблицаРасчетаПоРебенку.Итог("СуммаКомпенсации");
				
				СтрокаЗаТекущийМесяц = ТаблицаВыводаРасчета.Добавить();
				СтрокаЗаТекущийМесяц.Ребенок 			= Строка.Ребенок;
				СтрокаЗаТекущийМесяц.ДатаКонцаМесяца 	= КонецМесяца(Объект.КонецПериода);
				СтрокаЗаТекущийМесяц.Месяц 				= Формат(СтрокаЗаТекущийМесяц.ДатаКонцаМесяца,"ДФ=ММММ");
				СтрокаЗаТекущийМесяц.СуммаБазы 			= Строка.Сумма - СуммаПредыдущиеПериоды;
				СтрокаЗаТекущийМесяц.СуммаКомпенсации 	= Строка.СуммаКомпенсации - СуммаКомпенсацииПредыдущиеПериоды;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;  
	
	Если ИдентификаторыСтрок <> Неопределено Тогда 
		ПараметрыРасчета.ТаблицаВыводаРасчета.Сортировать("ДатаКонцаМесяца ВОЗР");
		Возврат ПоместитьВоВременноеХранилище(ПараметрыРасчета.ТаблицаВыводаРасчета);
	КонецЕсли;
	
	#КонецОбласти
	
КонецФункции


&НаСервере
Функция ПолучитьТаблицуДоговоров(МассивДетей)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СоставГруппДДУСрезПоследних.Ребенок КАК Ребенок,
	|	СоставГруппДДУСрезПоследних.Договор КАК Договор,
	|	СоставГруппДДУСрезПоследних.Льгота КАК Льгота
	|ИЗ
	|	РегистрСведений.СоставГруппДДУ.СрезПоследних(&ДатаСведений, Ребенок В (&МассивДетей)) КАК СоставГруппДДУСрезПоследних");
	
	Запрос.Параметры.Вставить("ДатаСведений",			КонецМесяца(Объект.Дата));
	Запрос.Параметры.Вставить("МассивДетей",			МассивДетей);
	
	ТаблицаДоговоров = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДоговоров;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНачальныеОстаткиПоДетям(Организация, МассивДетей)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	УчетКомпенсацииРодительскойПлаты.Ребенок КАК Ребенок,
	|	УчетКомпенсацииРодительскойПлаты.СуммаКомпенсации КАК СуммаКомпенсации,
	|	УчетКомпенсацииРодительскойПлаты.ПроцентКомпенсации КАК ПроцентКомпенсации
	|ИЗ
	|	РегистрНакопления.УчетКомпенсацииРодительскойПлаты КАК УчетКомпенсацииРодительскойПлаты
	|ГДЕ
	|	УчетКомпенсацииРодительскойПлаты.Ребенок В(&МассивДетей)
	|	И УчетКомпенсацииРодительскойПлаты.НачалоПериода = &ДатаПериодаОстатков
	|	И УчетКомпенсацииРодительскойПлаты.Организация = &Организация
	|	И УчетКомпенсацииРодительскойПлаты.Регистратор ССЫЛКА Документ.КорректировкаРегистров");
	Запрос.Параметры.Вставить("ДатаПериодаОстатков",	Дата(2023,9,1));
	Запрос.Параметры.Вставить("Организация",			Организация);
	Запрос.Параметры.Вставить("МассивДетей",			МассивДетей);
	
	НачальныеОстатки = Запрос.Выполнить().Выгрузить();
	Возврат НачальныеОстатки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиРасчетаПоДетям(МассивДетей, НастройкаКомпенсации, Организация, ПериодДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.Ребенок КАК Ребенок,
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрСведений.ПараметрыКомпенсацииРодительскойПлатыПоДетям КАК ПараметрыКомпенсацииРодительскойПлатыПоДетям
	|ГДЕ
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.Ребенок В(&МассивДетей)
	|	И ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаНачала <= &ПериодДокумента
	|	И ПараметрыКомпенсацииРодительскойПлатыПоДетям.Организация = &Организация
	|	И ПараметрыКомпенсацииРодительскойПлатыПоДетям.НастройкаКомпенсации = &НастройкаКомпенсации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаНачала УБЫВ");
	Запрос.Параметры.Вставить("Организация",			Организация);
	Запрос.Параметры.Вставить("НастройкаКомпенсации",	НастройкаКомпенсации);
	Запрос.Параметры.Вставить("ПериодДокумента",		ПериодДокумента);
	Запрос.Параметры.Вставить("МассивДетей",			МассивДетей);
	
	НастройкиРасчетаПоДетям = Запрос.Выполнить().Выгрузить();
	Возврат НастройкиРасчетаПоДетям;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСуммуЗаПредыдущийМесяц(ПараметрыРасчета,ТекущийМесяц,Ребенок)
	
	ПредыдущийМесяц = НачалоМесяца(ТекущийМесяц) - 1;
	
	// Прерываем заполнение, если настройки компенсации в периоде уже не актуальны
	Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаНачалаАктуальныхНастроек) 
		И ПредыдущийМесяц < ПараметрыРасчета.ДатаНачалаАктуальныхНастроек Тогда
		Возврат 0;	
	КонецЕсли;  
	
	// Начало расчета компенсации с 01.10.2023, возврат остатка полной суммой компенсации, при его наличии
	// См. функцию ПолучитьНачальныеОстаткиПоДетям
	Если Год(ПредыдущийМесяц) = 2023 
		И Месяц(ПредыдущийМесяц) = 9 Тогда
		
		Если ПараметрыРасчета.НачальныйОстатокКомпенсации Тогда
			НоваяСтрокаВывода = ПараметрыРасчета.ТаблицаВыводаРасчета.Добавить();
			НоваяСтрокаВывода.Ребенок 				= Ребенок;
			НоваяСтрокаВывода.ДатаКонцаМесяца 		= ПредыдущийМесяц;
			НоваяСтрокаВывода.Месяц 				= "Начальный остаток компенсации";
			НоваяСтрокаВывода.СуммаБазы 			= ПараметрыРасчета.НачальныйОстатокКомпенсации / ?(ПараметрыРасчета.ПроцентКомпенсацииРебенка = 0, 1,ПараметрыРасчета.ПроцентКомпенсацииРебенка) * 100;
			НоваяСтрокаВывода.СуммаКомпенсации 		= ПараметрыРасчета.НачальныйОстатокКомпенсации; 
			
			Возврат НоваяСтрокаВывода.СуммаКомпенсации;
		Иначе
			// Останавливаем рекурсию при выводе остатка
			Возврат 0;	
		КонецЕсли;
		
	КонецЕсли;
	
	Дата1 = НачалоМесяца(ПредыдущийМесяц);
	Дата2 = КонецМесяца(ПредыдущийМесяц);
	
	ПараметрыРасчета.Вставить("Дата1",Дата1);
	ПараметрыРасчета.Вставить("Дата2",Дата2);
	ПараметрыРасчета.Вставить("Ребенок",Ребенок);
	
	СуммаБазыКомпесацииЗаМесяц = 0;
	СуммаКомпенсации = 0;
	
	ТаблицаПоРебенку = ВычислитьКомпенсацию(ПараметрыРасчета, 2);
	Если ТаблицаПоРебенку.Количество() Тогда
		
		СуммаБазыКомпесацииЗаМесяц = ТаблицаПоРебенку[0].Сумма;	
		СуммаКомпенсации = ТаблицаПоРебенку[0].СуммаКомпенсации;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("ТаблицаВыводаРасчета") Тогда
		НоваяСтрокаВывода = ПараметрыРасчета.ТаблицаВыводаРасчета.Добавить();
		НоваяСтрокаВывода.Ребенок 				= Ребенок;
		НоваяСтрокаВывода.ДатаКонцаМесяца 		= ПредыдущийМесяц;
		НоваяСтрокаВывода.Месяц 				= Формат(НоваяСтрокаВывода.ДатаКонцаМесяца,"ДФ=ММММ");
		НоваяСтрокаВывода.СуммаБазы 			= СуммаБазыКомпесацииЗаМесяц;
		НоваяСтрокаВывода.СуммаКомпенсации 		= СуммаКомпенсации;
	КонецЕсли;
	
	Возврат СуммаБазыКомпесацииЗаМесяц + ПолучитьСуммуЗаПредыдущийМесяц(ПараметрыРасчета,ПредыдущийМесяц,Ребенок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВычислитьКомпенсацию(ПараметрыРасчета, НомерСтроки)
	
	СхемаКомпоновки 		= ПараметрыРасчета.Схема;
	НастройкаРасчета 		= ПараметрыРасчета.НастройкаРасчета;
	ИспользуемыеПараметры 	= ПараметрыРасчета.ИспользуемыеПараметры;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	
	НастройкиСхемы = Новый КомпоновщикНастроекКомпоновкиДанных;	
	НастройкиСхемы.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	НастройкиСхемы.Инициализировать(ИсточникНастроек);

	Настройки = НастройкиСхемы.Настройки;
	
	ЗаполнитьПараметрыПоДокументу(Настройки, ПараметрыРасчета.Объект, НомерСтроки);
	УстановитьПараметрРасчет(Настройки, НомерСтроки);
	ЗаполнитьОтбор(Настройки, НомерСтроки, ПараметрыРасчета.Объект);
	УстановитьДополнительныеНастройки(Настройки, Неопределено);
  
	ТекущаяНастройкаПоРебенку = ПолучитьНастройкуКомпенсацииПоРебенку(ПараметрыРасчета.Ребенок, ПараметрыРасчета.Дата1);
	// Заменим настройки в параметрах, чтоб посчитать по технической настройке для ребенка, если она задана явно  
	// после расчета - вернем обратно
	НомерПараметра = 0;          
	ИмяПараметраТекущейНастроки = "";
	ИмяПараметраТехническойНастройки = "";	
	Если ЗначениеЗаполнено(ТекущаяНастройкаПоРебенку)  Тогда
		
		Для Каждого Настройка из ПараметрыРасчета.НастройкиКомпенсацииРодПлаты Цикл   
			
			НомерПараметра = НомерПараметра + 1;
			ИмяПараметра = "НастройкаКомпенсации" + НомерПараметра;
			
			Если Настройка.Ссылка = ТекущаяНастройкаПоРебенку Тогда
				ИмяПараметраТекущейНастроки = ИмяПараметра;	
			КонецЕсли;
			Если Настройка.Ссылка = НастройкаРасчета Тогда
				ИмяПараметраТехническойНастройки = ИмяПараметра;	
			КонецЕсли;
		КонецЦикла;
		 
	КонецЕсли;    
	
	Если ЗначениеЗаполнено(ИмяПараметраТехническойНастройки)
		И ЗначениеЗаполнено(ИмяПараметраТекущейНастроки) Тогда        
		
		Буф = ИспользуемыеПараметры[ИмяПараметраТехническойНастройки];
		ИспользуемыеПараметры[ИмяПараметраТехническойНастройки] = ИспользуемыеПараметры[ИмяПараметраТекущейНастроки];
		ИспользуемыеПараметры[ИмяПараметраТекущейНастроки] = Буф;  
		
	КонецЕсли;   
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НастройкаПоУмолчанию", НастройкаРасчета);
	Для Каждого Параметр Из ИспользуемыеПараметры Цикл
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;                
	
	// Установим Отбор по ребенку
	ОтборРебенок = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборРебенок.Использование 	= Истина;
	ОтборРебенок.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ребенок");
	ОтборРебенок.ПравоеЗначение = ПараметрыРасчета.Ребенок;
	//
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = Компоновщик.Выполнить(СхемаКомпоновки, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Установим параметры Даты текущего месяца
	ПараметрДатаНачала = Макет.ЗначенияПараметров.Найти("ДатаН");
	Если ПараметрДатаНачала <> Неопределено Тогда
		ПараметрДатаНачала.Значение = НачалоМесяца(ПараметрыРасчета.Дата1);	
	КонецЕсли;
	ПараметрДатаОкончания = Макет.ЗначенияПараметров.Найти("ДатаК");
	Если ПараметрДатаОкончания <> Неопределено Тогда
		ПараметрДатаОкончания.Значение = КонецМесяца(ПараметрыРасчета.Дата2);	
	КонецЕсли;
	ПараметрПериод = Макет.ЗначенияПараметров.Найти("Период");
	Если ПараметрПериод <> Неопределено Тогда
		ПараметрПериод.Значение.ДатаНачала 		= НачалоМесяца(ПараметрыРасчета.Дата2);
		ПараметрПериод.Значение.ДатаОкончания 	= КонецМесяца(ПараметрыРасчета.Дата2);
	КонецЕсли;
	//
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Новый ТаблицаЗначений);
	
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	// возвращаем соответствие настроек к дефолтному. для случаев, когда настройка расчета у ребенка далее выбрана неявно.
	Если ЗначениеЗаполнено(ИмяПараметраТехническойНастройки)
		И ЗначениеЗаполнено(ИмяПараметраТекущейНастроки) Тогда        
		
		Буф = ИспользуемыеПараметры[ИмяПараметраТехническойНастройки];
		ИспользуемыеПараметры[ИмяПараметраТехническойНастройки] = ИспользуемыеПараметры[ИмяПараметраТекущейНастроки];
		ИспользуемыеПараметры[ИмяПараметраТекущейНастроки] = Буф;  
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкуКомпенсацииПоРебенку(Ребенок, Дата)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.НастройкаКомпенсации КАК НастройкаКомпенсации
	|ИЗ
	|	РегистрСведений.ПараметрыКомпенсацииРодительскойПлатыПоДетям КАК ПараметрыКомпенсацииРодительскойПлатыПоДетям
	|ГДЕ
	|	ПараметрыКомпенсацииРодительскойПлатыПоДетям.Ребенок = &Ребенок
	|	И ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаНачала <= &ДатаСведений
	|	И (ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаОкончания >= &ДатаСведений
	|			ИЛИ ПараметрыКомпенсацииРодительскойПлатыПоДетям.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))");   
	Запрос.Параметры.Вставить("Ребенок", Ребенок);
	Запрос.Параметры.Вставить("ДатаСведений", Дата);      
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НастройкаКомпенсации;	
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВыражение(Поле, ИмяПараметра, Формулы)
	ШаблонУсловия = "КОГДА НастройкаКомпенсации = &%1 ТОГДА (%2)";
	Выражение = ?(Поле = Неопределено, "0", Поле.Выражение);
	Формулы.Добавить(СтрШаблон(ШаблонУсловия, ИмяПараметра, Выражение));
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВставитьОбработанноеВыражениеСКДКомпенсации(Поле, Формулы)
	Поле.Выражение = СтрШаблон("ВЫРАЗИТЬ(%1, ""ЧИСЛО(18,2)"")",
		"ВЫБОР" + Символы.ПС + СтрСоединить(Формулы, Символы.ПС) + Символы.ПС + "КОНЕЦ");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыПоДокументу(Настройки, Объект, НомерСтроки)
	
	Для Каждого Параметр Из Настройки.ПараметрыДанных.Элементы Цикл
		НаименованиеПараметра = Строка(Параметр.Параметр);
		
		Если НаименованиеПараметра = "Период" Тогда
			Параметр.Значение = Новый СтандартныйПериод(НачалоДня(Объект.НачалоПериода), КонецДня(Объект.КонецПериода));
			Параметр.Использование = Истина;
		ИначеЕсли НаименованиеПараметра = "РодительскаяПлатаДопУслуги" И НомерСтроки = 2 Тогда
			Параметр.Использование = Истина;
		Иначе
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, НаименованиеПараметра) Тогда
				Параметр.Значение = Объект[НаименованиеПараметра];
				Параметр.Использование = ?(НаименованиеПараметра = "РодительскаяПлатаДопУслуги", Истина, ЗначениеЗаполнено(Объект[НаименованиеПараметра]));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОтбор(Настройки, НомерСтроки, Объект)

	Для Каждого Отбор Из Настройки.Отбор.Элементы Цикл
		НаименованиеОтбора = Строка(Отбор.ЛевоеЗначение);
		
		Если НаименованиеОтбора = "ПроцентКомпенсации" И НомерСтроки = 2 Тогда
			НовыйОтбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаКомпенсации");
			НовыйОтбор.ПравоеЗначение = 0;
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
			НовыйОтбор.Использование = Истина;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, НаименованиеОтбора) Тогда
			Отбор.ПравоеЗначение = Объект[НаименованиеОтбора];
			Отбор.Использование = ЗначениеЗаполнено(Объект[НаименованиеОтбора]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДополнительныеНастройки(Настройки, АдресаСхемыЗаполнения)
	Если АдресаСхемыЗаполнения <> Неопределено Тогда
		ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресаСхемыЗаполнения.НастройкиКомпоновкиДанных);
		ОбщийМодульСКД.СкопироватьОтборНастроекКомпоновкиДанных(Настройки.Отбор, ДополнительныеНастройки.Отбор);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПараметрРасчет(Настройки, НомерСтроки)
	
	Расчет = Настройки.ПараметрыДанных.Элементы.Найти("Расчет");
	Если Расчет <> Неопределено Тогда
		Расчет.Значение = НомерСтроки;
		Расчет.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура АБК_ПоказатьРасчетПосле(Команда)
	
	АдресРезультатовРасчета = РассчитатьКомпенсациюЗаПредыдущиеПериоды(Элементы.Дети.ВыделенныеСтроки);
	Если АдресРезультатовРасчета <> Неопределено Тогда
		ОткрытьФорму("Документ.КомпенсацияРодительскойПлаты.Форма.АБК_ФормаВыводаРасчета",Новый Структура("АдресРезультатовРасчета",АдресРезультатовРасчета),,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_НеЗаполнятьЗаПредыдущиеПериодыПосле(Команда)
	
	НеЗаполнятьЗаПредыдущиеПериоды = НЕ НеЗаполнятьЗаПредыдущиеПериоды;
	Элементы.ФормаНеЗаполнятьЗаПредыдущиеПериоды.Пометка = НеЗаполнятьЗаПредыдущиеПериоды;
	Элементы.ДетиПоказатьРасчет.Видимость = НЕ НеЗаполнятьЗаПредыдущиеПериоды;
	
КонецПроцедуры
