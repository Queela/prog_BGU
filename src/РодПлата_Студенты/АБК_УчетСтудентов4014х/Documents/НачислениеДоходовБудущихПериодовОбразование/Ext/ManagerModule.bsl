
&ИзменениеИКонтроль("РассчитатьПоГрафикамОплаты")
Процедура АБК_УчетСтудентов4014хРассчитатьПоГрафикамОплаты(ДокументОбъект, ГрафикОплаты)

	ДокументОбъект.ПорядокОплаты.Очистить();
	Если ДокументОбъект.Начисления.Количество() = 0 Тогда
		Возврат; // Нет списка учащихся для расчета сумм начислений.
	КонецЕсли;

	ДокументОбъект.РежимВводаГрафикаОплаты = 0; // В абсолютных величинах (суммы платежей).

	#Вставка
	ИспользуетсяУчет4014х = АБК_УчетСтудентов.ИспользуетсяУчет4014х();
	#КонецВставки
	Если ГрафикОплаты = Неопределено Тогда // Определяем графики оплаты по данным приказов.

		НомераТаблиц = Новый Структура;
		НомераТаблиц.Вставить("СведенияОСтудентах", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ОсновнойГрафикОплаты", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ГрафикиОплатыСтудентов", НомераТаблиц.Количество());

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОСтудентахСрезПоследних.Студент КАК Студент,
		|	СведенияОСтудентахСрезПоследних.Договор КАК Договор,
		|	СведенияОСтудентахСрезПоследних.Значение КАК ГрафикОплаты
		|ПОМЕСТИТЬ СведенияОСтудентах
		|ИЗ
		|	РегистрСведений.СведенияОСтудентах.СрезПоследних(
		|			&ДатаСреза,
		|			Факультет = &Факультет
		|				И Студент В (&Студенты)
		|				И Поле = &ПолеГрафикОплаты) КАК СведенияОСтудентахСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СведелияОСтудентах.ГрафикОплаты КАК ГрафикОплаты,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведелияОСтудентах.Студент) КАК КоличествоВхождений
		|ПОМЕСТИТЬ ОсновнойГрафикОплаты
		|ИЗ
		|	СведенияОСтудентах КАК СведелияОСтудентах
		|
		|СГРУППИРОВАТЬ ПО
		|	СведелияОСтудентах.ГрафикОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоВхождений УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОСтудентах.Студент КАК Студент,
		|	СведенияОСтудентах.Договор КАК Договор,
		|	СведенияОСтудентах.ГрафикОплаты КАК ГрафикОплаты,
		|	ВЫБОР
		|		КОГДА ОсновнойГрафикОплаты.ГрафикОплаты ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоОсновнойГрафикОплаты
		|ИЗ
		|	СведенияОСтудентах КАК СведенияОСтудентах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОсновнойГрафикОплаты КАК ОсновнойГрафикОплаты
		|		ПО СведенияОСтудентах.ГрафикОплаты = ОсновнойГрафикОплаты.ГрафикОплаты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Студент,
		|	Договор";
		Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДокументОбъект.Дата));
		Запрос.УстановитьПараметр("Факультет", ДокументОбъект.Подразделение);
		Запрос.УстановитьПараметр("Студенты", ДокументОбъект.Начисления.Выгрузить(, "Студент").ВыгрузитьКолонку("Студент"));
		Запрос.УстановитьПараметр("ПолеГрафикОплаты", ПланыВидовХарактеристик.ПоляПриказовОбразование.ГрафикОплаты);

		Результат = Запрос.ВыполнитьПакет();
		ГрафикиОплатыСтудентов = Результат[НомераТаблиц.ГрафикиОплатыСтудентов].Выгрузить();

	Иначе // Расчет по конкретной ставке оплаты.

		ГрафикиОплатыСтудентов = ДокументОбъект.Начисления.Выгрузить(, "Студент,Договор");
		ГрафикиОплатыСтудентов.Свернуть("Студент,Договор");
		ГрафикиОплатыСтудентов.Колонки.Добавить("ГрафикОплаты", Новый ОписаниеТипов("СправочникСсылка.ГрафикиОплатыОбразование"));
		ГрафикиОплатыСтудентов.Колонки.Добавить("ЭтоОсновнойГрафикОплаты", Новый ОписаниеТипов("Булево"));
		ГрафикиОплатыСтудентов.ЗаполнитьЗначения(ГрафикОплаты, "ГрафикОплаты");
		ГрафикиОплатыСтудентов.ЗаполнитьЗначения(Истина, "ЭтоОсновнойГрафикОплаты");
		ГрафикиОплатыСтудентов.Сортировать("Студент,Договор");

	КонецЕсли;

	ГрафикиОплатыСтудентов.Индексы.Добавить("Студент,Договор");

	// Получим параметры используемых графиков оплаты.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрафикиОплатыОбразование.Ссылка КАК ГрафикОплаты,
	|	ГрафикиОплатыОбразование.Валюта КАК Валюта,
	|	ГрафикиОплатыОбразование.РежимВводаГрафикаОплаты КАК РежимВводаГрафикаОплаты,
	|	ГрафикиОплатыОбразование.АвтоСумма КАК Сумма,
	|	ГрафикиОплатыОбразование.ПорядокОплаты.(
	|		НомерСтроки КАК НомерСтроки,
	|		ОплатитьДо КАК ОплатитьДо,
	|		СуммаПроцент КАК СуммаПроцент,
	|		НачалоПериода КАК НачалоПериода,
	|		КонецПериода КАК КонецПериода,
	|		Примечание КАК Примечание
	|	) КАК ПорядокОплаты
	|ИЗ
	|	Справочник.ГрафикиОплатыОбразование КАК ГрафикиОплатыОбразование
	|ГДЕ
	|	ГрафикиОплатыОбразование.Ссылка В(&ГрафикиОплаты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатитьДо,
	|	НачалоПериода,
	|	КонецПериода";
	Запрос.УстановитьПараметр("ГрафикиОплаты", ОбщегоНазначенияБГУ.УдалитьПовторяющиесяЭлементыМассива(
	ГрафикиОплатыСтудентов.ВыгрузитьКолонку("ГрафикОплаты")));
	ПараметрыГрафиковОплаты = Запрос.Выполнить().Выбрать();

	// Расчет сумм начислений и заполнение порядка оплаты.
	Для Каждого СтрокаНачисления Из ДокументОбъект.Начисления Цикл

		Отбор = Новый Структура("Студент,Договор");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаНачисления);
		НайденныеГрафикиОплаты = ГрафикиОплатыСтудентов.НайтиСтроки(Отбор);
		Если НайденныеГрафикиОплаты.Количество() = 0 Тогда
			Продолжить; // Невозможно определить график оплаты студента.
		Иначе
			ГрафикОплатыСтудента = НайденныеГрафикиОплаты[0];
		КонецЕсли;

		ПараметрыГрафиковОплаты.Сбросить();
		ГрафикОплатыНайден = ПараметрыГрафиковОплаты.НайтиСледующий(
		Новый Структура("ГрафикОплаты", ГрафикОплатыСтудента.ГрафикОплаты));
		Если НЕ ГрафикОплатыНайден Тогда
			Продолжить;
		Иначе

			Отбор = Новый Структура("Студент,Договор,Контрагент");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаНачисления);
			Отбор.Вставить("Организация", ДокументОбъект.Организация);
			ПлательщикиПоДоговору = РегистрыСведений.ПлательщикиПоДоговоруОбразование.ПолучитьПоследнее(КонецДня(ДокументОбъект.Дата), Отбор);
			ДоляОплаты = ?(ПлательщикиПоДоговору.ДоляОплаты = 0, 1, ПлательщикиПоДоговору.ДоляОплаты / 100);

			ЭтоОбщийПорядокОплаты = ГрафикОплатыСтудента.ЭтоОсновнойГрафикОплаты И (ДоляОплаты = 1);

			Если ЭтоОбщийПорядокОплаты Тогда // Общий порядок оплаты.

				СтрокаНачисления.ОсобыйПорядокОплаты = Ложь;
				СтрокаНачисления.ИдентификаторСтроки = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

				ОтборПоПустомуИдентификатору = Новый Структура("ИдентификаторСтроки", СтрокаНачисления.ИдентификаторСтроки);
				ОбщийГрафикОплаты = ДокументОбъект.ПорядокОплаты.НайтиСтроки(ОтборПоПустомуИдентификатору);
				ЗаполнитьГрафикОплаты = (ОбщийГрафикОплаты.Количество() = 0); // Только если еще не заполнен.

				ДокументОбъект.РежимВводаГрафикаОплаты = ПараметрыГрафиковОплаты.РежимВводаГрафикаОплаты;

			Иначе // Особый порядок оплаты.

				СтрокаНачисления.ОсобыйПорядокОплаты = Истина;
				СтрокаНачисления.ИдентификаторСтроки = Новый УникальныйИдентификатор;

				ЗаполнитьГрафикОплаты = Истина;

				СтрокаНачисления.РежимВводаОсобогоГрафикаОплаты = ПараметрыГрафиковОплаты.РежимВводаГрафикаОплаты;

			КонецЕсли;

			// Заполним порядок оплаты.
			Если ЗаполнитьГрафикОплаты Тогда

				ИтогСумма = 0;
				#Вставка
				ИтогСумма40149 = 0;
				#КонецВставки

				ПорядокОплаты = ПараметрыГрафиковОплаты.ПорядокОплаты.Выбрать();
				Пока ПорядокОплаты.Следующий() Цикл

					НоваяСтрока = ДокументОбъект.ПорядокОплаты.Добавить();
					НоваяСтрока.ИдентификаторСтроки = СтрокаНачисления.ИдентификаторСтроки;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ПорядокОплаты,
					"ОплатитьДо,СуммаПроцент,НачалоПериода,КонецПериода,Примечание");

					Если ДоляОплаты <> 1 Тогда
						НоваяСтрока.СуммаПроцент = НоваяСтрока.СуммаПроцент * ДоляОплаты;
					КонецЕсли;

					#Удаление
					ИтогСумма = ИтогСумма + НоваяСтрока.СуммаПроцент;
					#КонецУдаления
					#Вставка
					Если ИспользуетсяУчет4014х тогда
						Если КонецГода(ДокументОбъект.Дата) >= ПорядокОплаты.КонецПериода тогда
							ИтогСумма = ИтогСумма + НоваяСтрока.СуммаПроцент	
						Иначе
							ИтогСумма40149 = ИтогСумма40149 + НоваяСтрока.СуммаПроцент;
						КонецЕсли;
					Иначе
						ИтогСумма = ИтогСумма + НоваяСтрока.СуммаПроцент;
					КонецЕсли;
					#КонецВставки

				КонецЦикла;

				Если ПараметрыГрафиковОплаты.РежимВводаГрафикаОплаты = 0 Тогда
					СтрокаНачисления.Всего = ИтогСумма;
					#Вставка
					СтрокаНачисления.Сумма = ИтогСумма;
					СтрокаНачисления.Сумма40149 = ИтогСумма40149;
					СтрокаНачисления.Всего = ИтогСумма + ИтогСумма40149;
					#КонецВставки
				КонецЕсли;

			Иначе

				#Вставка
				ИтогСумма = 0;
				ИтогСумма40149 = 0;
				Если ИспользуетсяУчет4014х тогда
					Для Каждого СтрокаОплаты из ПараметрыГрафиковОплаты.ГрафикОплаты цикл
						Если КонецГода(ДокументОбъект.Дата) >= ПорядокОплаты.КонецПериода тогда
							ИтогСумма = ИтогСумма + СтрокаОплаты.СуммаПроцент	
						Иначе
							ИтогСумма40149 = ИтогСумма40149 + СтрокаОплаты.СуммаПроцент;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ИтогСумма = ПараметрыГрафиковОплаты.Сумма;
				КонецЕсли;
				
				#КонецВставки
				Если ПараметрыГрафиковОплаты.РежимВводаГрафикаОплаты = 0 Тогда
					СтрокаНачисления.Всего = ПараметрыГрафиковОплаты.Сумма;
					#Вставка
					СтрокаНачисления.Сумма = ИтогСумма;
					СтрокаНачисления.Сумма40149 = ИтогСумма40149;
					СтрокаНачисления.Всего = ИтогСумма + ИтогСумма40149;
					#КонецВставки
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Расчет реквизитов "Цена", "Сумма", "СуммаНДС", "Всего".
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС);
		ПараметрыРасчета.Вставить("РассчитыватьЦену", Истина);
		УправлениеНФАКлиентСервер.РассчитатьСтрокуДокумента(СтрокаНачисления, "Всего", ПараметрыРасчета);

	КонецЦикла;

КонецПроцедуры
