
&ИзменениеИКонтроль("ЗаполнитьПоОстаткам")
Процедура АБК_УчетСтудентов4014хЗаполнитьПоОстаткам(ДокументОбъект, ДанныеУчащихся, ЗаполнитьСуммыДоходов, ЗаполнитьПорядокУчетаДоходов)

	Если ДанныеУчащихся.Количество() = 0 Тогда
		Возврат; // Нет списка учащихся для расчета сумм начислений.
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Факультет",      ДокументОбъект.Подразделение);
	Запрос.УстановитьПараметр("Номенклатура",   ДокументОбъект.Номенклатура);
	Запрос.УстановитьПараметр("КонецПериода",   КонецДня(ДокументОбъект.Дата));
	Запрос.УстановитьПараметр("ДанныеУчащихся", ДанныеУчащихся);
	#Удаление
	Запрос.УстановитьПараметр("СчетаДБП",       БухгалтерскийУчет.СписокСчетов("401.40"));
	#КонецУдаления
	#Вставка
	СчетаДБП = БухгалтерскийУчет.СписокСчетов("401.40");
	Если АБК_УчетСтудентов.ИспользуетсяУчет4014х() тогда
		СчетаДБП = БухгалтерскийУчет.СписокСчетов("401.41,401.49");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетаДБП", СчетаДБП);
	#КонецВставки

	ВидыСубконто = Новый Массив();
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоДБП", ВидыСубконто);

	НомераТаблиц = Новый Структура;

	НомераТаблиц.Вставить("ДанныеУчащихся", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СписокУчащихся", НомераТаблиц.Количество());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеУчащихся.Студент КАК Студент,
	|	ДанныеУчащихся.Контрагент КАК Контрагент,
	|	ДанныеУчащихся.ДоговорКонтрагента КАК Договор
	|ПОМЕСТИТЬ ДанныеУчащихся
	|ИЗ
	|	&ДанныеУчащихся КАК ДанныеУчащихся
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокУчащихся.Студент КАК Студент,
	|	СписокУчащихся.Контрагент КАК Контрагент,
	|	СписокУчащихся.Договор КАК Договор
	|ИЗ
	|	ДанныеУчащихся КАК СписокУчащихся";

	НомераТаблиц.Вставить("ПараметрыСписанияДоходовБудущихПериодов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ОстаткиДБП", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДоходыБудущихПериодов", НомераТаблиц.Количество());
	Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), ОбщегоНазначения.РазделительПакетаЗапросов(), "") +
	"ВЫБРАТЬ
	|	ПараметрыСписанияДоходовБудущихПериодов.Организация КАК Организация,
	|	ПараметрыСписанияДоходовБудущихПериодов.Договор КАК Договор,
	|	ПараметрыСписанияДоходовБудущихПериодов.Договор.Контрагент КАК Контрагент,
	|	ПараметрыСписанияДоходовБудущихПериодов.ВидОперации КАК ВидОперации,
	|	ПараметрыСписанияДоходовБудущихПериодов.СпособПризнанияДоходов КАК СпособПризнанияДоходов,
	|	ПараметрыСписанияДоходовБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ПараметрыСписанияДоходовБудущихПериодов.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ПараметрыСписанияДоходовБудущихПериодов.СчетДоходов КАК СчетДоходов,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов1 КАК СубконтоДоходов1,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов2 КАК СубконтоДоходов2,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов3 КАК СубконтоДоходов3,
	|	ПараметрыСписанияДоходовБудущихПериодов.ВидДеятельностиНУ КАК ВидДеятельностиНУ,
	|	ПараметрыСписанияДоходовБудущихПериодов.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ПараметрыСписанияДоходовБудущихПериодов.СтатьяПрочихДоходовНУ КАК СтатьяПрочихДоходовНУ
	|ПОМЕСТИТЬ ПараметрыСписанияДоходовБудущихПериодов
	|ИЗ
	|	РегистрСведений.ПараметрыСписанияДоходовБудущихПериодов.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Договор В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ДанныеУчащихся.Договор
	|					ИЗ
	|						ДанныеУчащихся)) КАК ПараметрыСписанияДоходовБудущихПериодов
	|ГДЕ
	|	ПараметрыСписанияДоходовБудущихПериодов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачисленияДБП.ДолгосрочныйДоговорОбразование)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДБП.Организация КАК Организация,
	|	ЕСТЬNULL(ОстаткиДБП.ИФО, ЗНАЧЕНИЕ(Справочник.ИсточникиФинансовогоОбеспечения.ПустаяСсылка)) КАК ИФО,
	|	ОстаткиДБП.КФО КАК КФО,
	|	ОстаткиДБП.КПС КАК КПС,
	|	ОстаткиДБП.КЭК КАК КЭК,
	|	ОстаткиДБП.Счет КАК СчетДБП,
	|	ОстаткиДБП.Подразделение КАК Подразделение,
	|	ВЫРАЗИТЬ(ОстаткиДБП.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ОстаткиДБП.Субконто1 КАК Справочник.Номенклатура).Наименование КАК НоменклатураПредставление,
	|	ВЫРАЗИТЬ(ОстаткиДБП.Субконто1 КАК Справочник.Номенклатура).СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(ОстаткиДБП.Субконто2 КАК Справочник.Договоры) КАК Договор,
	|	ВЫРАЗИТЬ(ОстаткиДБП.Субконто2 КАК Справочник.Договоры).Наименование КАК ДоговорПредставление,
	|	ОстаткиДБП.СуммаОстатокКт КАК ОстатокДБП
	|ПОМЕСТИТЬ ОстаткиДБП
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
	|			&КонецПериода,
	|			Счет В (&СчетаДБП),
	|			&ВидыСубконтоДБП,
	|			Организация = &Организация
	|				И &УсловиеИФО
	|				И Субконто1 = &Номенклатура
	|				И Субконто2 В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ДанныеУчащихся.Договор
	|					ИЗ
	|						ДанныеУчащихся)) КАК ОстаткиДБП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиДБП.Организация КАК Организация,
	|	ОстаткиДБП.ИФО КАК ИФО,
	|	ОстаткиДБП.КФО КАК КФО,
	|	ОстаткиДБП.КПС КАК КПС,
	|	ОстаткиДБП.КЭК КАК КЭК,
	|	ОстаткиДБП.СчетДБП КАК СчетДБП,
	|	ОстаткиДБП.Подразделение КАК Подразделение,
	|	ОстаткиДБП.Номенклатура КАК Номенклатура,
	|	ОстаткиДБП.НоменклатураПредставление КАК НоменклатураПредставление,
	|	ОстаткиДБП.СтавкаНДС КАК СтавкаНДС,
	|	ОстаткиДБП.Договор КАК Договор,
	|	ОстаткиДБП.ДоговорПредставление КАК ДоговорПредставление,
	|	ОстаткиДБП.ОстатокДБП КАК ОстатокДБП,
	|	ПараметрыСписанияДоходовБудущихПериодов.Контрагент КАК Контрагент,
	|	ПараметрыСписанияДоходовБудущихПериодов.СпособПризнанияДоходов КАК СпособПризнанияДоходов,
	|	ПараметрыСписанияДоходовБудущихПериодов.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ПараметрыСписанияДоходовБудущихПериодов.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ПараметрыСписанияДоходовБудущихПериодов.СчетДоходов КАК СчетДоходов,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов1 КАК СубконтоДоходов1,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов2 КАК СубконтоДоходов2,
	|	ПараметрыСписанияДоходовБудущихПериодов.СубконтоДоходов3 КАК СубконтоДоходов3,
	|	ПараметрыСписанияДоходовБудущихПериодов.ВидДеятельностиНУ КАК ВидДеятельностиНУ,
	|	ПараметрыСписанияДоходовБудущихПериодов.СчетДоходовНУ КАК СчетДоходовНУ,
	|	ПараметрыСписанияДоходовБудущихПериодов.СтатьяПрочихДоходовНУ КАК СтатьяПрочихДоходовНУ
	|ИЗ
	|	ОстаткиДБП КАК ОстаткиДБП
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыСписанияДоходовБудущихПериодов КАК ПараметрыСписанияДоходовБудущихПериодов
	|		ПО ОстаткиДБП.Договор = ПараметрыСписанияДоходовБудущихПериодов.Договор
	|			И ОстаткиДБП.Организация = ПараметрыСписанияДоходовБудущихПериодов.Организация";

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО") И ЗначениеЗаполнено(ДокументОбъект.ИФО) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИФО", "ИФО = &ИФО");
		Запрос.УстановитьПараметр("ИФО", ДокументОбъект.ИФО);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеИФО", "ИСТИНА");
	КонецЕсли;

	Результат = Запрос.ВыполнитьПакет();

	СписокУчащихся     = Результат[НомераТаблиц.СписокУчащихся].Выгрузить();
	ТаблицаОстатковДБП = Результат[НомераТаблиц.ДоходыБудущихПериодов].Выгрузить();

	Если ЗаполнитьСуммыДоходов Тогда

		// Определим последние регистраторы движений регистра ПорядокОплатыОбразование.
		ЗапросРегистраторы = Новый Запрос;
		ЗапросРегистраторы.УстановитьПараметр("ДатаСреза",   КонецДня(ДокументОбъект.Дата));
		ЗапросРегистраторы.УстановитьПараметр("Организация", ДокументОбъект.Организация);
		ЗапросРегистраторы.УстановитьПараметр("Договоры",
		ОбщегоНазначенияБГУ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаОстатковДБП.ВыгрузитьКолонку("Договор")));
		ЗапросРегистраторы.УстановитьПараметр("Учащиеся",
		ОбщегоНазначенияБГУ.УдалитьПовторяющиесяЭлементыМассива(ДанныеУчащихся.ВыгрузитьКолонку("Студент")));
		ЗапросРегистраторы.УстановитьПараметр("Контрагенты",
		ОбщегоНазначенияБГУ.УдалитьПовторяющиесяЭлементыМассива(ДанныеУчащихся.ВыгрузитьКолонку("Контрагент")));
		ЗапросРегистраторы.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПорядокОплатыОбразованиеСрезПоследних.Период КАК Период,
		|	ПорядокОплатыОбразованиеСрезПоследних.Регистратор КАК Регистратор,
		|	ПорядокОплатыОбразованиеСрезПоследних.Активность КАК Активность,
		|	ПорядокОплатыОбразованиеСрезПоследних.Организация КАК Организация,
		|	ПорядокОплатыОбразованиеСрезПоследних.Договор КАК Договор,
		|	ПорядокОплатыОбразованиеСрезПоследних.Учащийся КАК Учащийся,
		|	ПорядокОплатыОбразованиеСрезПоследних.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.ПорядокОплатыОбразование.СрезПоследних(
		|			&ДатаСреза,
		|			Активность = ИСТИНА
		|				И Организация = &Организация
		|				И Договор В (&Договоры)
		|				И Учащийся В (&Учащиеся)
		|				И Контрагент В (&Контрагенты)) КАК ПорядокОплатыОбразованиеСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Договор,
		|	Учащийся,
		|	Контрагент,
		|	Период УБЫВ";
		Регистраторы = ЗапросРегистраторы.Выполнить().Выгрузить();

		// Удалим повторы, которые могут появляться в СрезеПоследних.
		СтрокиКУдалению   = Новый Массив;
		ТекущийДоговор    = Неопределено;
		ТекущийУчащийся   = Неопределено;
		ТекущийКонтрагент = Неопределено;
		Для Каждого СтрокаРегистратор Из Регистраторы Цикл
			Если ТекущийДоговор = СтрокаРегистратор.Договор
				И ТекущийУчащийся = СтрокаРегистратор.Учащийся
				И ТекущийКонтрагент = СтрокаРегистратор.Контрагент Тогда
				// Для данной комбинации Договор / Учащийся / Контрагент есть регистратор с более поздней датой.
				СтрокиКУдалению.Добавить(СтрокаРегистратор);
			КонецЕсли;
			ТекущийДоговор    = СтрокаРегистратор.Договор;
			ТекущийУчащийся   = СтрокаРегистратор.Учащийся;
			ТекущийКонтрагент = СтрокаРегистратор.Контрагент;
		КонецЦикла;
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			Регистраторы.Удалить(СтрокаКУдалению);
		КонецЦикла;

		// Определим порядок оплаты по интересующим договорам.
		ЗапросПорядокОплаты = Новый Запрос;
		ЗапросПорядокОплаты.УстановитьПараметр("ПериодДвижений", Регистраторы);
		ЗапросПорядокОплаты.Текст = 
		"ВЫБРАТЬ
		|	ПериодДвижений.Период КАК Период,
		|	ПериодДвижений.Регистратор КАК Регистратор,
		|	ПериодДвижений.Активность КАК Активность,
		|	ПериодДвижений.Организация КАК Организация,
		|	ПериодДвижений.Договор КАК Договор,
		|	ПериодДвижений.Учащийся КАК Учащийся,
		|	ПериодДвижений.Контрагент КАК Контрагент
		|ПОМЕСТИТЬ ПериодДвижений
		|ИЗ
		|	&ПериодДвижений КАК ПериодДвижений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПорядокОплатыОбразование.Организация КАК Организация,
		|	ПорядокОплатыОбразование.Учащийся КАК Студент,
		|	ПорядокОплатыОбразование.Контрагент КАК Контрагент,
		|	ПорядокОплатыОбразование.Договор КАК Договор,
		|	ПорядокОплатыОбразование.Факультет КАК Факультет,
		|	ПорядокОплатыОбразование.ОплатитьДо КАК ОплатитьДо,
		|	ПорядокОплатыОбразование.Валюта КАК Валюта,
		|	ПРЕДСТАВЛЕНИЕ(ПорядокОплатыОбразование.Валюта) КАК ВалютаПредставление,
		|	ПорядокОплатыОбразование.СуммаВВалюте КАК СуммаВВалюте,
		|	ПорядокОплатыОбразование.НачалоПериода КАК НачалоПериода,
		|	ПорядокОплатыОбразование.КонецПериода КАК КонецПериода,
		|	ПорядокОплатыОбразование.Примечание КАК Примечание,
		|	ПорядокОплатыОбразование.Регистратор КАК Регистратор,
		|	ПорядокОплатыОбразование.Период КАК Период
		|ИЗ
		|	ПериодДвижений КАК ПериодДвижений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОплатыОбразование КАК ПорядокОплатыОбразование
		|		ПО ПериодДвижений.Период = ПорядокОплатыОбразование.Период
		|			И ПериодДвижений.Регистратор = ПорядокОплатыОбразование.Регистратор
		|			И ПериодДвижений.Активность = ПорядокОплатыОбразование.Активность
		|			И ПериодДвижений.Организация = ПорядокОплатыОбразование.Организация
		|			И ПериодДвижений.Договор = ПорядокОплатыОбразование.Договор
		|			И ПериодДвижений.Учащийся = ПорядокОплатыОбразование.Учащийся
		|			И ПериодДвижений.Контрагент = ПорядокОплатыОбразование.Контрагент
		|ГДЕ
		|	ПорядокОплатыОбразование.СуммаВВалюте <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Студент,
		|	Контрагент,
		|	Договор,
		|	Валюта,
		|	ОплатитьДо,
		|	НачалоПериода,
		|	КонецПериода";
		ПорядокОплатыОбразование = ЗапросПорядокОплаты.Выполнить().Выгрузить();

		ДокументОбъект.ДоходыБудущихПериодов.Очистить();
		ДокументОбъект.ПорядокОплаты.Очистить();

		ДатаУчетнойПолитики = ?(ЗначениеЗаполнено(ДокументОбъект.ВидМежотчетногоПериода),
		КонецГода(ДокументОбъект.Дата) + 1, ДокументОбъект.Дата);

		ВедетсяУчетДБППоПодразделениям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям")
		И БухгалтерскийУчетПовтИсп.ПолучитьПризнакиУчета("401.40").УчетПоПодразделениям;

		// Расчет сумм доходов будущих периодов.
		Для Каждого ОстаткиДБП Из ТаблицаОстатковДБП Цикл

			НоваяСтрока = ДокументОбъект.ДоходыБудущихПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОстаткиДБП);

			Отбор = Новый Структура("Договор", ОстаткиДБП.Договор);
			НайденныеСтроки = СписокУчащихся.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 1 Тогда // 1 плательщик, 1 студент.
				НоваяСтрока.Студент = НайденныеСтроки[0].Студент;
				НоваяСтрока.Контрагент = НайденныеСтроки[0].Контрагент;

			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда

				ОтборПоПлательщику = Новый Структура("Договор, Контрагент", ОстаткиДБП.Договор, НайденныеСтроки[0].Контрагент);
				НайденныеСтуденты = СписокУчащихся.НайтиСтроки(ОтборПоПлательщику);
				ОтборПоСтуденту = Новый Структура("Договор, Студент", ОстаткиДБП.Договор, НайденныеСтроки[0].Студент);
				НайденныеПлательщики = СписокУчащихся.НайтиСтроки(ОтборПоСтуденту);

				Если НайденныеПлательщики.Количество() > 1 Тогда

					ТекстПлательщики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1; и еще %2 ...'"),
					НайденныеПлательщики[0].Контрагент,
					НайденныеПлательщики.Количество() - 1);
					ТекстОшибки = НСтр("ru='По договору ""%1"" зарегистрировано несколько плательщиков: %2
					|Для корректировки таких договоров рекомендуется использовать документы ""%3"", которые необходимо вводить отдельно по каждому плательщику.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОстаткиДБП.Договор,
					ТекстПлательщики,
					Метаданные.Документы.КорректировкаДоходовБудущихПериодовОбразование.Синоним);
					ПолеДоговор = "ДоходыБудущихПериодов[" + Формат(НоваяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Договор";
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка, ПолеДоговор, "Объект");

				ИначеЕсли НайденныеСтуденты.Количество() > 1 Тогда

					ТекстСтуденты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1; и еще %2 ...'"),
					НайденныеСтуденты[0].Студент,
					НайденныеСтуденты.Количество() - 1);
					ТекстОшибки = НСтр("ru='По договору ""%1"" обучается несколько учащихся: %2
					|Для корректировки таких договоров рекомендуется использовать документы ""%3"", которые необходимо вводить отдельно по каждому учащемуся.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОстаткиДБП.Договор,
					ТекстСтуденты,
					Метаданные.Документы.КорректировкаДоходовБудущихПериодовОбразование.Синоним);
					ПолеДоговор = "ДоходыБудущихПериодов[" + Формат(НоваяСтрока.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Договор";
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка, ПолеДоговор, "Объект");

				КонецЕсли;

			КонецЕсли;

			НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
			НоваяСтрока.КЭК, "205.00",, ДатаУчетнойПолитики, ДокументОбъект.Организация, ДокументОбъект.ИФО);

		КонецЦикла;
		ДокументОбъект.ДоходыБудущихПериодов.Сортировать("Студент,Контрагент,Договор");

		// Определим порядок оплаты, который будет использоваться в качестве общего (стандартного).
		СлужебнаяПорядокОплаты = ПорядокОплатыОбразование.СкопироватьКолонки("Студент,Контрагент,Договор");
		СлужебнаяПорядокОплаты.Колонки.Добавить("Хеш", Новый ОписаниеТипов("Строка"));
		СлужебнаяПорядокОплаты.Колонки.Добавить("КоличествоВхождений", Новый ОписаниеТипов("Число"));
		ПорядокОплатыСтудент    = Справочники.Студенты.ПустаяСсылка();
		ПорядокОплатыКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
		ПорядокОплатыДоговор    = Справочники.Договоры.ПустаяСсылка();
		Для Каждого СтрокаПорядокОплаты Из ПорядокОплатыОбразование Цикл

			НовыйПорядокОплаты = Ложь;
			Если  Не ЗначениеЗаполнено(ПорядокОплатыСтудент)
				И Не ЗначениеЗаполнено(ПорядокОплатыКонтрагент)
				И Не ЗначениеЗаполнено(ПорядокОплатыДоговор) Тогда
				НовыйПорядокОплаты = Истина; // Первая строка.
			ИначеЕсли СтрокаПорядокОплаты.Студент  <> ПорядокОплатыСтудент
				ИЛИ СтрокаПорядокОплаты.Контрагент <> ПорядокОплатыКонтрагент
				ИЛИ СтрокаПорядокОплаты.Договор    <> ПорядокОплатыДоговор Тогда
				НовыйПорядокОплаты = Истина;
			КонецЕсли;

			Если НовыйПорядокОплаты Тогда
				НоваяСтрока = СлужебнаяПорядокОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПорядокОплаты, "Студент,Контрагент,Договор");
				НоваяСтрока.КоличествоВхождений = 1;
			КонецЕсли;

			// Для расчета количества вхождений представим массив входных данных (порядок оплаты) в виде хеш-функции.
			НоваяСтрока.Хеш = НоваяСтрока.Хеш
			+ СтрокаПорядокОплаты.ВалютаПредставление  + "#"
			+ Строка(СтрокаПорядокОплаты.СуммаВВалюте) + "#"
			+ Формат(СтрокаПорядокОплаты.ОплатитьДо,    "ДЛФ=Д") + "#"
			+ Формат(СтрокаПорядокОплаты.НачалоПериода, "ДЛФ=Д") + "#"
			+ Формат(СтрокаПорядокОплаты.КонецПериода,  "ДЛФ=Д") + "#"
			+ Строка(СтрокаПорядокОплаты.Примечание) + "|";

			// Запомним текущие значения ключей поиска.
			ПорядокОплатыСтудент    = СтрокаПорядокОплаты.Студент;
			ПорядокОплатыКонтрагент = СтрокаПорядокОплаты.Контрагент;
			ПорядокОплатыДоговор    = СтрокаПорядокОплаты.Договор;

		КонецЦикла;
		ИтогиПорядокОплаты = СлужебнаяПорядокОплаты.Скопировать(,"Хеш,КоличествоВхождений");
		ИтогиПорядокОплаты.Свернуть("Хеш", "КоличествоВхождений");
		ИтогиПорядокОплаты.Сортировать("КоличествоВхождений Убыв");
		ОбщийПорядокОплаты = ?(ИтогиПорядокОплаты.Количество() = 0, Неопределено, ИтогиПорядокОплаты[0]);
		СлужебнаяПорядокОплаты.Колонки.Добавить("ОсобыйПорядокОплаты", Новый ОписаниеТипов("Булево"));
		Для Каждого СтрокаСлужебная Из СлужебнаяПорядокОплаты Цикл
			СтрокаСлужебная.ОсобыйПорядокОплаты = (СтрокаСлужебная.Хеш <> ОбщийПорядокОплаты.Хеш);
		КонецЦикла;

		// Заполним таб.часть "Порядок оплаты" и отдельные реквизиты таб.части "Доходы будущих периодов".
		ОбщийПорядокОплатыЗаполнен = Ложь;
		Для Каждого СтрокаДокумента Из ДокументОбъект.ДоходыБудущихПериодов Цикл

			Если ЗначениеЗаполнено(СтрокаДокумента.Студент)
				И ЗначениеЗаполнено(СтрокаДокумента.Контрагент)
				И ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда

				Отбор = Новый Структура("Студент,Контрагент,Договор");
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаДокумента);

				// Определим, общий или особый порядок оплаты заполнять.
				НайденныеСтроки = СлужебнаяПорядокОплаты.НайтиСтроки(Отбор);
				СтрокаДокумента.ОсобыйПорядокОплаты = ?(НайденныеСтроки.Количество() = 0, Истина, НайденныеСтроки[0].ОсобыйПорядокОплаты);
				Если СтрокаДокумента.ОсобыйПорядокОплаты Тогда
					СтрокаДокумента.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				Иначе
					СтрокаДокумента.ИдентификаторСтроки = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
				КонецЕсли;

				// Заполним табличную часть "Порядок оплаты".
				СтрокиПорядокОплаты = ПорядокОплатыОбразование.НайтиСтроки(Отбор);
				Для Каждого СтрокаПорядокОплаты Из СтрокиПорядокОплаты Цикл

					Если СтрокаДокумента.ОсобыйПорядокОплаты ИЛИ НЕ ОбщийПорядокОплатыЗаполнен Тогда

						НоваяСтрока = ДокументОбъект.ПорядокОплаты.Добавить();
						НоваяСтрока.ИдентификаторСтроки = СтрокаДокумента.ИдентификаторСтроки;
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПорядокОплаты,
						"ОплатитьДо,НачалоПериода,КонецПериода,Примечание,Валюта");

						НоваяСтрока.СуммаВВалютеДоИзменений    = СтрокаПорядокОплаты.СуммаВВалюте;
						НоваяСтрока.СуммаВВалюте               = 0;
						НоваяСтрока.СуммаВВалютеПослеИзменений = СтрокаПорядокОплаты.СуммаВВалюте;

					КонецЕсли;

				КонецЦикла;

				// Общий (стандартный) порядок оплаты заполняем только один раз.
				ОбщийПорядокОплатыЗаполнен = ОбщийПорядокОплатыЗаполнен ИЛИ НЕ СтрокаДокумента.ОсобыйПорядокОплаты;

			КонецЕсли;

		КонецЦикла;

		Если ЗначениеЗаполнено(ДокументОбъект.ПроцентИндексации) Тогда
			ИзменитьСуммыНаПроцент(ДокументОбъект);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.СуммаРаспределенная) Тогда
			РаспределитьСуммуПоПериодам(ДокументОбъект);
		КонецЕсли;

	КонецЕсли;

	Если ЗаполнитьПорядокУчетаДоходов Тогда

		ДокументОбъект.ПорядокУчетаДоходов.Очистить();

		ТаблицаОстатковДБП.Свернуть(
		"Организация,Контрагент,Договор,СпособПризнанияДоходов,ДатаНачалаСписания,ДатаОкончанияСписания,
		|СчетДоходов,СубконтоДоходов1,СубконтоДоходов2,СубконтоДоходов3,
		|ВидДеятельностиНУ,СчетДоходовНУ,СтатьяПрочихДоходовНУ", "ОстатокДБП");

		Для Каждого СтрокаТаблицы Из ТаблицаОстатковДБП Цикл

			НоваяСтрока = ДокументОбъект.ПорядокУчетаДоходов.Добавить();

			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы,
			"ОстатокДБП,Контрагент,Договор,СпособПризнанияДоходов,ДатаНачалаСписания,ДатаОкончанияСписания,
			|СчетДоходов,СубконтоДоходов1,СубконтоДоходов2,СубконтоДоходов3,
			|ВидДеятельностиНУ,СчетДоходовНУ,СтатьяПрочихДоходовНУ");

		КонецЦикла;

	КонецЕсли;
	#Вставка
	Если НЕ АБК_УчетСтудентов.ИспользуетсяУчет4014х()
		ИЛИ НЕ ДокументОбъект.ПереносДБП Тогда
		Возврат;	
	КонецЕсли;
	
	ТЧ_ПорядокОплаты = ДокументОбъект.ПорядокОплаты.Выгрузить();
	Для Каждого СтрокаТаблицы из ТЧ_ПорядокОплаты Цикл
		ПорядокОплатыЗаполнитьДобавленныеКолонкиВСтрокеТаблицы(СтрокаТаблицы, ДокументОбъект.Дата);	
	КонецЦикла;
	ВнешнийНаборДанных	 = Новый Структура("Результат",ТЧ_ПорядокОплаты);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаКомпоновки = Документы.КорректировкаДолгосрочныхДоговоровОбразование.ПолучитьМакет("АБК_Макет_ПорядокОплаты");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновки);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	СКДТаблицаПроводок = СхемаКомпоновки.НаборыДанных.Результат;
	
	Для Каждого Колонка из ТЧ_ПорядокОплаты.Колонки Цикл
		НовоеПолеНабораДанных = СКДТаблицаПроводок.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПолеНабораДанных.Поле			= Колонка.Имя;
		НовоеПолеНабораДанных.ПутьКДанным 	= Колонка.Имя;
		НовоеПолеНабораДанных.Заголовок  	= Колонка.Имя;
		НовоеПолеНабораДанных.ТипЗначения 	= Колонка.ТипЗначения;
	КонецЦикла;
	
	НастройкиКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	Для Каждого ТекПолеКомпановки Из СхемаКомпоновки.НаборыДанных.Результат.Поля Цикл
		НовоеПолеВыводаКомпановки	 = СхемаКомпоновки.ВариантыНастроек.Основной.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПолеВыводаКомпановки.Поле = Новый ПолеКомпоновкиДанных(ТекПолеКомпановки.Поле) 
	КонецЦикла;     
	
	// Отборы
	НовыйЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("НачалоПериода");
	НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	НовыйЭлементОтбора.ПравоеЗначение = НачалоГода(ДокументОбъект.Дата);
	
	НовыйЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("КонецПериода");
	НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	НовыйЭлементОтбора.ПравоеЗначение = КонецГода(ДокументОбъект.Дата);
	
	НовыйЭлементОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ПериодЗавершен");
	НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
	НовыйЭлементОтбора.Использование  = Ложь;
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;	
	                   
	НовыйЭлементОтбораИдентификаторСтроки = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных("ИдентификаторСтроки");
	НовыйЭлементОтбораИдентификаторСтроки.ЛевоеЗначение  = ПолеОтбора;
	НовыйЭлементОтбораИдентификаторСтроки.Использование  = Истина;
	НовыйЭлементОтбораИдентификаторСтроки.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбораИдентификаторСтроки.ПравоеЗначение = "";
	// Отборы
	
	Для Каждого Строка из ДокументОбъект.ДоходыБудущихПериодов Цикл
		
		Если Строка.СчетДБП.Код <> "401.49" Тогда
			Продолжить;	
		КонецЕсли;
		
		НовыйЭлементОтбораИдентификаторСтроки.ПравоеЗначение = Строка.ИдентификаторСтроки;	
		
		КомпоновщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки 	= КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,ВнешнийНаборДанных);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаПоОтборам = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаПоОтборам);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		Строка.СуммаПереносаДБП = ТаблицаПоОтборам.Итог("СуммаВВалютеПослеИзменений");		   
		
	КонецЦикла;
	#КонецВставки

КонецПроцедуры

&После("ИзменитьСуммыНаПроцентПоИдентификаторуСтроки")
Процедура АБК_УчетСтудентов4014хИзменитьСуммыНаПроцентПоИдентификаторуСтроки(ДокументОбъект, ИдентификаторСтроки)
	АБК_ПересчитатьСуммыИзменений(ДокументОбъект, Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
КонецПроцедуры

&После("РаспределитьСуммуПоПериодамПоИдентификаторуСтроки")
Процедура АБК_УчетСтудентов4014хРаспределитьСуммуПоПериодамПоИдентификаторуСтроки(ДокументОбъект, ИдентификаторСтроки)
	АБК_ПересчитатьСуммыИзменений(ДокументОбъект, Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
КонецПроцедуры

Процедура АБК_ПересчитатьСуммыИзменений(ДокументОбъект, ОтборПоИдентификатору)
	
	ИспользуетсяУчет4014х = АБК_УчетСтудентов.ИспользуетсяУчет4014х();
	Счет40141 = БухгалтерскиеОперации.СчетПоКоду("401.41", ДокументОбъект.Дата);

	ДоходыБудущихПериодов = ДокументОбъект.ДоходыБудущихПериодов.НайтиСтроки(ОтборПоИдентификатору);
	ПорядокОплаты = ДокументОбъект.ПорядокОплаты.НайтиСтроки(ОтборПоИдентификатору); 
	Для Каждого СтрокаДБП Из ДоходыБудущихПериодов Цикл
		СтрокаДБП.Всего = ДокументОбъект.СуммаРаспределенная;
		Если ИспользуетсяУчет4014х тогда
			СтрокаДБП.Всего = 0;
			Для Каждого Строка из ПорядокОплаты цикл
				Если СтрокаДБП.СчетДБП = Счет40141 
					И Строка.КонецПериода <= КонецГода(ДокументОбъект.Дата) тогда
					СтрокаДБП.Всего = СтрокаДБП.Всего + Строка.СуммаВВалюте;
				ИначеЕсли СтрокаДБП.СчетДБП <> Счет40141 
					И Строка.КонецПериода >= КонецГода(ДокументОбъект.Дата) тогда
					СтрокаДБП.Всего = СтрокаДБП.Всего + Строка.СуммаВВалюте;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ИнициализироватьДанныеДокумента")
Процедура АБК_УчетСтудентов4014хИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства)

	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
	"Организация,Дата,ВидМежотчетногоПериода,Подразделение");

	ДатаУчетнойПолитики = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ВидМежотчетногоПериода),
	КонецГода(ЗначенияРеквизитов.Дата) + 1, ЗначенияРеквизитов.Дата);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ОтражатьВНалоговомУчете",
	НалоговыйУчет.ПлательщикНалогаНаПрибыль(ЗначенияРеквизитов.Организация, ДатаУчетнойПолитики));
	Запрос.УстановитьПараметр("СчетаПрочихДоходов", БухгалтерскийУчет.СписокСчетов("Н91.01"));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	НомераТаблиц = Новый Структура;

	НомераТаблиц.Вставить("ПараметрыСписанияДоходовБудущихПериодов", НомераТаблиц.Количество());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	ПорядокУчетаДоходов.Ссылка.Дата КАК Период,
	|	ПорядокУчетаДоходов.Договор КАК Договор,
	|	ПорядокУчетаДоходов.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийНачисленияДБП.ДолгосрочныйДоговорОбразование) КАК ВидОперации,
	|	ПорядокУчетаДоходов.СпособПризнанияДоходов КАК СпособПризнанияДоходов,
	|	ПорядокУчетаДоходов.ДатаНачалаСписания КАК ДатаНачалаСписания,
	|	ПорядокУчетаДоходов.ДатаОкончанияСписания КАК ДатаОкончанияСписания,
	|	ПорядокУчетаДоходов.СчетДоходов КАК СчетДоходов,
	|	ПорядокУчетаДоходов.СубконтоДоходов1 КАК СубконтоДоходов1,
	|	ПорядокУчетаДоходов.СубконтоДоходов2 КАК СубконтоДоходов2,
	|	ПорядокУчетаДоходов.СубконтоДоходов3 КАК СубконтоДоходов3,
	|	ВЫБОР
	|		КОГДА &ОтражатьВНалоговомУчете
	|			ТОГДА ПорядокУчетаДоходов.ВидДеятельностиНУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка)
	|	КОНЕЦ КАК ВидДеятельностиНУ,
	|	ВЫБОР
	|		КОГДА &ОтражатьВНалоговомУчете
	|			ТОГДА ПорядокУчетаДоходов.СчетДоходовНУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.ЕПСБУ.ПустаяСсылка)
	|	КОНЕЦ КАК СчетДоходовНУ,
	|	ВЫБОР
	|		КОГДА &ОтражатьВНалоговомУчете
	|				И ПорядокУчетаДоходов.СчетДоходовНУ В (&СчетаПрочихДоходов)
	|			ТОГДА ПорядокУчетаДоходов.СтатьяПрочихДоходовНУ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПрочиеДоходыИРасходы.ПустаяСсылка)
	|	КОНЕЦ КАК СтатьяПрочихДоходовНУ
	|ИЗ
	|	Документ.КорректировкаДолгосрочныхДоговоровОбразование.ПорядокУчетаДоходов КАК ПорядокУчетаДоходов
	|ГДЕ
	|	ПорядокУчетаДоходов.Ссылка = &Ссылка
	|	И ПорядокУчетаДоходов.Ссылка.ИзменитьПорядокУчетаДоходов = ИСТИНА";

	НомераТаблиц.Вставить("Начисления", НомераТаблиц.Количество());
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	Начисления.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасчетовПоЗаймам.ОсновнойДолг) КАК ВидРасчетов,
	|	Начисления.Ссылка.ИФО КАК ИФО,
	|	Начисления.КФО КАК КФО,
	|	Начисления.КПС КАК КПС,
	|	Начисления.КЭК КАК КЭК,
	|	Начисления.Ссылка.ДопКлассификация КАК ДопКлассификация,
	|	Начисления.Ссылка.КодМероприятия КАК КодМероприятия,
	|	Начисления.Ссылка.КодЦели КАК КодЦели,
	|	Начисления.Ссылка.Организация КАК Организация,
	|	Начисления.Ссылка.Подразделение КАК Факультет,
	|	Начисления.Студент КАК Студент,
	|	Начисления.Контрагент КАК Контрагент,
	|	Начисления.Договор КАК Договор,
	|	Начисления.СчетРасчетов КАК СчетРасчетов,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	Начисления.Всего КАК СуммаВВалюте,
	|	Начисления.ОсобыйПорядокОплаты КАК ОсобыйПорядокОплаты
	|ИЗ
	|	Документ.КорректировкаДолгосрочныхДоговоровОбразование.ДоходыБудущихПериодов КАК Начисления
	|ГДЕ                        
	#Вставка
	|	Начисления.СчетДБП.Код <> ""401.49"" И	
	#КонецВставки
	|	Начисления.Ссылка = &Ссылка";

	НомераТаблиц.Вставить("ПорядокОплаты", НомераТаблиц.Количество());
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ПорядокОплаты.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ПорядокОплаты.ОплатитьДо КАК ОплатитьДо,
	|	ПорядокОплаты.КонецПериода КАК ИсполнитьДо,
	|	ПорядокОплаты.НачалоПериода КАК НачалоПериода,
	|	ПорядокОплаты.КонецПериода КАК КонецПериода,
	|	ПорядокОплаты.Примечание КАК Примечание,
	|	ПорядокОплаты.Валюта КАК Валюта,
	|	ПорядокОплаты.СуммаВВалютеДоИзменений КАК СуммаВВалютеДоИзменений,
	|	ПорядокОплаты.СуммаВВалюте КАК СуммаВВалюте,
	|	ПорядокОплаты.СуммаВВалютеПослеИзменений КАК СуммаВВалютеПослеИзменений
	|ИЗ
	|	Документ.КорректировкаДолгосрочныхДоговоровОбразование.ПорядокОплаты КАК ПорядокОплаты
	|ГДЕ
	|	ПорядокОплаты.Ссылка = &Ссылка";

	Результат = Запрос.ВыполнитьПакет();

	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ОбщегоНазначенияБГУ.ВыгрузитьТаблицыЗапроса(ТаблицыДляДвижений, Результат, НомераТаблиц);

	Начисления = Результат[НомераТаблиц.Начисления].Выгрузить();
	ПорядокОплаты = Результат[НомераТаблиц.ПорядокОплаты].Выгрузить();

	ИспользоватьКонтрольИсполненияДоговоров = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольИсполненияДоговоров");
	Если ИспользоватьКонтрольИсполненияДоговоров Тогда
		ОплатаОтПокупателейДебиторов = РегистрыНакопления.ОплатаОтПокупателейДебиторов.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		ИсполнениеДоговоровСПокупателями = РегистрыНакопления.ИсполнениеДоговоровСПокупателями.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	КонецЕсли;
	ПорядокОплатыОбразование = РегистрыСведений.ПорядокОплатыОбразование.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ПлановыеДатыОплатыОбразование = РегистрыСведений.ПлановыеДатыОплатыОбразование.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	Для Каждого СтрокаТаблицы Из Начисления Цикл

		Если СтрокаТаблицы.ОсобыйПорядокОплаты Тогда
			// Отберем строки с идентификатором начисления.
			ОтборСтрок = Новый Структура("ИдентификаторСтроки", СтрокаТаблицы.ИдентификаторСтроки);
		Иначе // Отберем строки с пустым идентификатором.
			ОтборСтрок = Новый Структура("ИдентификаторСтроки",
			Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
		КонецЕсли;

		// Порядок оплаты для данной строки начисления студенту.
		ГрафикПоДоговору = ПорядокОплаты.Скопировать(ОтборСтрок,
		"ОплатитьДо,ИсполнитьДо,НачалоПериода,КонецПериода,Примечание,
		|СуммаВВалютеДоИзменений,СуммаВВалюте,СуммаВВалютеПослеИзменений,Валюта");

		Для Каждого СтрокаГрафика Из ГрафикПоДоговору Цикл

			Если ИспользоватьКонтрольИсполненияДоговоров
				И СтрокаГрафика.СуммаВВалюте <> 0 Тогда

				// График платежей.
				НоваяЗапись = ОплатаОтПокупателейДебиторов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Период     = СтрокаГрафика.ОплатитьДо;
				НоваяЗапись.ОплатитьДо = СтрокаГрафика.ОплатитьДо;
				НоваяЗапись.Сумма      = СтрокаГрафика.СуммаВВалюте;

				// План-график реализации.
				НоваяЗапись = ИсполнениеДоговоровСПокупателями.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
				НоваяЗапись.Период      = СтрокаГрафика.ИсполнитьДо;
				НоваяЗапись.ИсполнитьДо = СтрокаГрафика.ИсполнитьДо;
				НоваяЗапись.Сумма       = СтрокаГрафика.СуммаВВалюте;

			КонецЕсли;

			Если СтрокаГрафика.СуммаВВалютеПослеИзменений <> 0 Тогда

				// Порядок оплаты.
				НоваяЗапись = ПорядокОплатыОбразование.Добавить();
				НоваяЗапись.Организация = ЗначенияРеквизитов.Организация;
				НоваяЗапись.Факультет   = ЗначенияРеквизитов.Подразделение;
				НоваяЗапись.Учащийся    = СтрокаТаблицы.Студент;
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы, "Контрагент,Договор");
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаГрафика, "ОплатитьДо,НачалоПериода,КонецПериода,Примечание,Валюта");
				НоваяЗапись.СуммаВВалюте = СтрокаГрафика.СуммаВВалютеПослеИзменений;

			КонецЕсли;

		КонецЦикла;

		// При формировании движений по регистру ПлановыеДатыОплатыОбразование сворачиваем порядок оплаты по колонке "Оплатить до",
		// чтобы избежать дублирования записей по значениям измерений.
		ПлановыеДатыОплаты = ГрафикПоДоговору.Скопировать(, "ОплатитьДо,СуммаВВалютеПослеИзменений");
		ПлановыеДатыОплаты.Свернуть("ОплатитьДо", "СуммаВВалютеПослеИзменений");
		ПлановыеДатыОплаты.Сортировать("ОплатитьДо");
		Для Каждого ПлановаяДатаОплаты Из ПлановыеДатыОплаты Цикл

			ОтборПоДатеОплаты = Новый Структура("ОплатитьДо", ПлановаяДатаОплаты.ОплатитьДо);
			НайденныеСтроки = ГрафикПоДоговору.НайтиСтроки(ОтборПоДатеОплаты);

			Если НайденныеСтроки.Количество() > 1 Тогда

				ИтогСуммаВВалюте = 0;
				МинНачалоПериода = '00010101';
				МаксКонецПериода = '00010101';
				Для Каждого СтрокаГрафика Из НайденныеСтроки Цикл
					ИтогСуммаВВалюте = ИтогСуммаВВалюте + СтрокаГрафика.СуммаВВалютеПослеИзменений;
					МинНачалоПериода = ?(НЕ ЗначениеЗаполнено(МинНачалоПериода), СтрокаГрафика.НачалоПериода,
					Мин(МинНачалоПериода, СтрокаГрафика.НачалоПериода) );
					МаксКонецПериода = ?(НЕ ЗначениеЗаполнено(МаксКонецПериода), СтрокаГрафика.КонецПериода,
					Макс(МаксКонецПериода, СтрокаГрафика.КонецПериода) );
				КонецЦикла;

				НоваяЗапись = ПлановыеДатыОплатыОбразование.Добавить();
				НоваяЗапись.Учащийся      = СтрокаТаблицы.Студент;
				НоваяЗапись.Договор       = СтрокаТаблицы.Договор;
				НоваяЗапись.Факультет     = ЗначенияРеквизитов.Подразделение;
				НоваяЗапись.Валюта        = СтрокаТаблицы.Валюта;
				НоваяЗапись.ДатаОплаты    = ПлановаяДатаОплаты.ОплатитьДо;
				НоваяЗапись.Сумма         = ИтогСуммаВВалюте;
				НоваяЗапись.АвтоРасчет    = Ложь;
				НоваяЗапись.НачалоПериода = МинНачалоПериода;
				НоваяЗапись.КонецПериода  = МаксКонецПериода;

			ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда

				СтрокаГрафика = НайденныеСтроки[0];

				НоваяЗапись = ПлановыеДатыОплатыОбразование.Добавить();
				НоваяЗапись.Учащийся      = СтрокаТаблицы.Студент;
				НоваяЗапись.Договор       = СтрокаТаблицы.Договор;
				НоваяЗапись.Факультет     = ЗначенияРеквизитов.Подразделение;
				НоваяЗапись.Валюта        = СтрокаТаблицы.Валюта;
				НоваяЗапись.ДатаОплаты    = СтрокаГрафика.ОплатитьДо;
				НоваяЗапись.Сумма         = СтрокаГрафика.СуммаВВалютеПослеИзменений;
				НоваяЗапись.АвтоРасчет    = Ложь;
				НоваяЗапись.НачалоПериода = СтрокаГрафика.НачалоПериода;
				НоваяЗапись.КонецПериода  = СтрокаГрафика.КонецПериода;
				НоваяЗапись.Примечание    = СтрокаГрафика.Примечание;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Если ИспользоватьКонтрольИсполненияДоговоров Тогда

		ОплатаОтПокупателейДебиторов.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		ОплатаОтПокупателейДебиторов.ЗаполнитьЗначения(Истина, "Активность");
		ОплатаОтПокупателейДебиторов.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		ТаблицыДляДвижений.Вставить("ОплатаОтПокупателейДебиторов", ОплатаОтПокупателейДебиторов);

		ИсполнениеДоговоровСПокупателями.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
		ИсполнениеДоговоровСПокупателями.ЗаполнитьЗначения(Истина, "Активность");
		ИсполнениеДоговоровСПокупателями.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		ТаблицыДляДвижений.Вставить("ИсполнениеДоговоровСПокупателями", ИсполнениеДоговоровСПокупателями);

	КонецЕсли;

	ПорядокОплатыОбразование.ЗаполнитьЗначения(Истина, "Активность");
	ПорядокОплатыОбразование.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	ПорядокОплатыОбразование.ЗаполнитьЗначения(ЗначенияРеквизитов.Дата, "Период");
	ТаблицыДляДвижений.Вставить("ПорядокОплатыОбразование", ПорядокОплатыОбразование);

	ПлановыеДатыОплатыОбразование.ЗаполнитьЗначения(Истина, "Активность");
	ПлановыеДатыОплатыОбразование.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	ПлановыеДатыОплатыОбразование.ЗаполнитьЗначения(ЗначенияРеквизитов.Дата, "Период");
	ТаблицыДляДвижений.Вставить("ПлановыеДатыОплатыОбразование", ПлановыеДатыОплатыОбразование);

	// Удалим временные таблицы.
	ТаблицыДляДвижений.Удалить("Начисления");
	ТаблицыДляДвижений.Удалить("ПорядокОплаты");

КонецПроцедуры

Процедура ПорядокОплатыЗаполнитьДобавленныеКолонкиВСтрокеТаблицы(СтрокаТаблицы, ДатаДокумента)
	
	СтрокаТаблицы.ПериодЗавершен = ( КонецДня(СтрокаТаблицы.КонецПериода) <= КонецДня(ДатаДокумента) );
	
КонецПроцедуры