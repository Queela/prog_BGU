
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаОстатковБСО = ПолучитьИзВременногоХранилища(Параметры.Адрес_ТаблицаОстатковБСО);
	ТаблицаКорзинаПоБСО = ПолучитьИзВременногоХранилища(Параметры.Адрес_ТаблицаКорзинаПоБСО); 
	
	ТаблицаОстатковПоНомерам.Загрузить(ТаблицаОстатковБСО);
	ВыбранныеОстатки.Загрузить(ТаблицаКорзинаПоБСО);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "БСО, СерияБСО, ИзначальныйОстаток"); 
	
	КолонкаЗабивка = Элементы.Добавить("ТаблицаОстатковПоНомерамЗабивка", Тип("ПолеФормы"), Элементы.ТаблицаОстатковПоНомерам); 
	КолонкаЗабивка.Вид = ВидПоляФормы.ПолеВвода; 
	КолонкаЗабивка.ПутьКДанным = "ТаблицаОстатковПоНомерам.Забивка"; 
	КолонкаЗабивка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	КолонкаЗабивка = Элементы.Добавить("ВыбранныеОстаткиЗабивка", Тип("ПолеФормы"), Элементы.ВыбранныеОстатки); 
	КолонкаЗабивка.Вид = ВидПоляФормы.ПолеВвода; 
	КолонкаЗабивка.ПутьКДанным = "ВыбранныеОстатки.Забивка"; 
	КолонкаЗабивка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)    
	
	СписокНомеровДляВыбора = ПолучитьСписокНомеров();
	Для Каждого ЭлементНомер из СписокНомеровДляВыбора Цикл
		ЭлементНомер.Пометка = Истина;	
	КонецЦикла; 
	
	ПоместитьСписокНомеровВКорзину(СписокНомеровДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКонкретныеНомера(Команда)
	
	СписокНомеровДляВыбора = ПолучитьСписокНомеров();
	СписокНомеровДляВыбора.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПослеВыбораНомеров", ЭтотОбъект))
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеВыбораНомеров(Результат, ДопПараметры) Экспорт
	
	Если Результат <> неопределено Тогда 
		
		ПоместитьСписокНомеровВКорзину(Результат);	
		
	КонецЕсли; 
	
КонецПроцедуры   

&НаКлиенте
Процедура ПоместитьСписокНомеровВКорзину(СписокНомеров)
	
	ВыбранныеОстатки.Очистить();    
		
	СписокНомеров.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ПредыдущийНомер = Неопределено;           
	
	Для Каждого ЭлементНомер из СписокНомеров Цикл
		Если ЭлементНомер.Пометка Тогда
			
			Если ПредыдущийНомер = Неопределено Тогда
				
				// Создаем интервал номеров
				СтрокаНомера = ВыбранныеОстатки.Добавить();
				СтрокаНомера.БСО = БСО;
				СтрокаНомера.СерияБСО = СерияБСО;
				СтрокаНомера.НомерНачальный = ЭлементНомер.Значение;
				СтрокаНомера.НомерКонечный = ЭлементНомер.Значение;
				СтрокаНомера.Количество = 1; 
				ПредыдущийНомер = ЭлементНомер.Значение;
				
			ИначеЕсли ЭлементНомер.Значение = ПредыдущийНомер + 1 Тогда 
				
				// Добавляем в интервал номеров
				СтрокаНомера.НомерКонечный = ЭлементНомер.Значение;
				СтрокаНомера.Количество = СтрокаНомера.Количество + 1;  
				ПредыдущийНомер = ЭлементНомер.Значение; 
				
			Иначе                                            
				
				// Закрываем интвервал номеров / открываем новый
				СтрокаНомера.НомерКонечный = ПредыдущийНомер;
				
				СтрокаНомера = ВыбранныеОстатки.Добавить();
				СтрокаНомера.БСО = БСО;
				СтрокаНомера.СерияБСО = СерияБСО;
				СтрокаНомера.НомерНачальный = ЭлементНомер.Значение;
				СтрокаНомера.НомерКонечный = ЭлементНомер.Значение;
				СтрокаНомера.Количество = 1;
				ПредыдущийНомер = ЭлементНомер.Значение; 
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОстаткиВКорзину(Команда)
	
	СтруктураЗакрытия = ПолучитьСтруктуруЗакрытия();
	Закрыть(СтруктураЗакрытия); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗакрытия()
	
	СтруктураЗакрытия = Новый Структура();
	СтруктураЗакрытия.Вставить("БСО", БСО);
	СтруктураЗакрытия.Вставить("СерияБСО", СерияБСО);
	СтруктураЗакрытия.Вставить("ИзначальныйОстаток", ИзначальныйОстаток);
	СтруктураЗакрытия.Вставить("Адрес_ТаблицаВыбранныхномеров", ПоместитьВоВременноеХранилище(ВыбранныеОстатки.Выгрузить()));
	Возврат СтруктураЗакрытия;                       
	
КонецФункции

#Область ПрочиеПроцедурыИФункции

&НаСервере
Функция ПолучитьСписокНомеров()
	
	ОстаткиПоНомерамДетально = РазвернутьТаблицуПоНомерам(ТаблицаОстатковПоНомерам.Выгрузить(), БСО, СерияБСО);
	МассивНомеров = ОстаткиПоНомерамДетально.ВыгрузитьКолонку("Номер");
	
	ВыбранныеОстаткиПоНомерамДетально = РазвернутьТаблицуПоНомерам(ВыбранныеОстатки.Выгрузить(), БСО, СерияБСО);
	МассивВыбранныхНомеров = ВыбранныеОстаткиПоНомерамДетально.ВыгрузитьКолонку("Номер");
	
	СписокНомеровДляВыбора = Новый СписокЗначений;
	СписокНомеровДляВыбора.ЗагрузитьЗначения(МассивНомеров);
	// Установить видимость, что остаток есть
	Для Каждого ЭлементНомер из СписокНомеровДляВыбора Цикл
		ЭлементНомер.Картинка = БиблиотекаКартинок.ОформлениеКругЗеленый;	
	КонецЦикла;
		
	Для Каждого ВыбранныйНомер из МассивВыбранныхНомеров Цикл
		НомерВСписке = СписокНомеровДляВыбора.НайтиПоЗначению(ВыбранныйНомер);  
		Если НомерВСписке <> Неопределено Тогда
			НомерВСписке.Пометка = Истина;
		Иначе
			СписокНомеровДляВыбора.Добавить(ВыбранныйНомер,,Истина,БиблиотекаКартинок.ОформлениеКругКрасный);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокНомеровДляВыбора; 
	
КонецФункции

&НаСервереБезКонтекста
Функция РазвернутьТаблицуПоНомерам(ТаблицаОстатковПоНомерам, БСО, СерияБСО) Экспорт

	ОстаткиПоНомерамДетально = Новый ТаблицаЗначений;
	ОстаткиПоНомерамДетально.Колонки.Добавить("БСО", Новый ОписаниеТипов("СправочникСсылка.БСО"));
	ОстаткиПоНомерамДетально.Колонки.Добавить("СерияБСО", Новый ОписаниеТипов("СправочникСсылка.СерииБСО"));
	ОстаткиПоНомерамДетально.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(20)));
	
	Для Каждого Строка из ТаблицаОстатковПоНомерам Цикл
		Для i = Строка.НомерНачальный По Строка.НомерКонечный Цикл
			
			СтрокаНомера = ОстаткиПоНомерамДетально.Добавить();
			СтрокаНомера.БСО = БСО;
			СтрокаНомера.СерияБСО = СерияБСО; 
			СтрокаНомера.Номер = i;
		КонецЦикла;
		
	КонецЦикла; 
	
	Возврат ОстаткиПоНомерамДетально;
		
КонецФункции

#КонецОбласти