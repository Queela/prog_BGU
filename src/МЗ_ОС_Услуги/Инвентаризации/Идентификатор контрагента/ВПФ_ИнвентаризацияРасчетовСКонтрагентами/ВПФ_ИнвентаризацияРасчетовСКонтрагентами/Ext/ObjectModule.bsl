 Функция СведенияОВнешнейОбработке() Экспорт
	 
	 //Инициализируем структуру с параметрами регистрации
	 
	 //Определяем список объектов, вызывающих обработку
	 ОбъектыНазначенияФормы = Новый Массив;
	 Для каждого Тип Из ЭтотОбъект.Метаданные().Реквизиты.СсылкаНаОбъект.Тип.Типы() Цикл
		 ОбъектыНазначенияФормы.Добавить(Метаданные.НайтиПоТипу(Тип).ПолноеИмя());	
	 КонецЦикла; 
	 
	 
	 ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	 ПараметрыРегистрации.Версия = "1.1";
	 ПараметрыРегистрации.Информация =  ЭтотОбъект.Метаданные().Представление();
	 
	 
	 //Определяем команды для печати формы
	 
	 ТаблицаКоманд = ПолучитьТаблицуКоманд();

	 ДобавитьКоманду(ТаблицаКоманд,
	 НСтр("ru='Инв. опись (ф. 0504089) с идентификатором контрагента'"), // Представление команды в пользовательском интерфейсе
	 "Форма0504089",				// Уникальный идентификатор команды
	 );       
	 
	 ДобавитьКоманду(ТаблицаКоманд,
	 НСтр("ru='Инв. опись (ф. 0504089) расширенная с идентификатором контрагента'"), // Представление команды в пользовательском интерфейсе
	 "Форма0504089Расширенная",				// Уникальный идентификатор команды
	 );       
	 
	 ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	 
	 Возврат ПараметрыРегистрации;
	 
 КонецФункции
 
 Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")
	 
	 Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		 ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		 ОбъектыНазначенияФормы = Новый Массив;
		 ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	 КонецЕсли; 
	 
	 ПараметрыРегистрации = Новый Структура;
	 ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	 ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	 ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	 
	 Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		 НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	 КонецЕсли; 
	 ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	 
	 Если Не ЗначениеЗаполнено(Информация) Тогда
		 Информация = ЭтотОбъект.Метаданные().Комментарий;
	 КонецЕсли; 
	 ПараметрыРегистрации.Вставить("Информация", Информация);
	 
	 ПараметрыРегистрации.Вставить("Версия", Версия);
	 
	 Возврат ПараметрыРегистрации;
	 
 КонецФункции
 
 Функция ПолучитьТаблицуКоманд()
	 
	 Команды = Новый ТаблицаЗначений;
	 
	 //Представление команды в пользовательском интерфейсе
	 Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	 
	 //Уникальный идентификатор команды или имя макета печати
	 Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	 
	 //Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	 // "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	 // "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	 // "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	 Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	 
	 //Показывать оповещение.
	 //Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	 //Имеет смысл только при запуске обработки без открытия формы
	 Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	 
	 //Дополнительный модификатор команды. 
	 //Используется для дополнительных обработок печатных форм на основе табличных макетов.
	 //Для таких команд должен содержать строку ПечатьMXL
	 Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	 
	 Возврат Команды;
	 
 КонецФункции
 
 Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	 
	 НоваяКоманда = ТаблицаКоманд.Добавить();
	 НоваяКоманда.Представление = Представление;
	 НоваяКоманда.Идентификатор = Идентификатор;
	 НоваяКоманда.Использование = Использование;
	 НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	 НоваяКоманда.Модификатор = Модификатор;
	 
 КонецПроцедуры
 
 Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	 
	 Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Форма0504089Расширенная") Тогда
		 
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		 КоллекцияПечатныхФорм,
		 "Форма0504089Расширенная",
		 "Инвентаризационная опись расчетов с покупателями, поставщиками (ф. 0504089) расширенная",
		 СформироватьПечатнуюФорму(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода,Истина));
		 
	 КонецЕсли;
	 
	 Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Форма0504089") Тогда
		 
		 УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		 КоллекцияПечатныхФорм,
		 "Форма0504089",
		 "Инвентаризационная опись расчетов с покупателями, поставщиками (ф. 0504089)",
		 СформироватьПечатнуюФорму(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода));
		 
	 КонецЕсли;
	 
 КонецПроцедуры 
 
 Функция СформироватьПечатнуюФорму(МассивОбъектов, КоллекцияПечатныхФорм = Неопределено, ОбъектыПечати, ПараметрыВывода = Неопределено, Расширенная = Ложь) Экспорт
	 
	СтруктураПараметровОбработчика = Новый Структура();
	СтруктураПараметровОбработчика.Вставить("МассивОбъектов",	МассивОбъектов);
	СтруктураПараметровОбработчика.Вставить("ОбъектыПечати",	ОбъектыПечати);
	СтруктураПараметровОбработчика.Вставить("ПараметрыВывода",	ПараметрыВывода);


	ТабДок = ПечатьФормы0504089(МассивОбъектов, ОбъектыПечати, Расширенная, "");

	Возврат ТабДок;
	 
 КонецФункции
 
Функция	ПечатьФормы0504089(МассивСсылок, ОбъектыПечати, Расширенная = Ложь, РедакцияПечатнойФормы = Неопределено)
	
	// Используемый макет
	Если Расширенная Тогда
		Макет = ПолучитьМакет("ПФ_MXL_Ф0504089_Расширенная");
		
		КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСКонтрагентами_ф0504089_Расширенная";
		
	Иначе
		Макет = ПолучитьМакет("ПФ_MXL_Ф0504089");
		
		КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентаризацияРасчетовСКонтрагентами_ф0504089";
	КонецЕсли;
	
	// Заполняемый табличный документ
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб				= Истина;
	ТабДокумент.ОриентацияСтраницы		= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати	= КлючПараметровПечати;
	
	// Определяет, выводить ли отбор по ИФО
	ИспользоватьУчетПоИФО = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО");
	
	Запросы = Новый Запрос;
	Запросы.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запросы.УстановитьПараметр("ТекстБезОграниченияКФО", НСтр("ru='без ограничения'"));
	Запросы.УстановитьПараметр("ТекстБезОграниченияИФО", НСтр("ru='без ограничения'"));
	Запросы.УстановитьПараметр("ТекстПустоеЗначениеИФО", НСтр("ru='<пустое значение>'"));
	
	Запросы.Текст = "
	|////////////////////////////////////////////////////////////////////////////////
	|// [0]. Шапка документа
	|//
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка							КАК ДокСсылка,
	|	Дата							КАК Дата,
	|	ДатаИнвентаризации				КАК ДатаИнвентаризации,
	|	Номер							КАК Номер,
	|	Организация						КАК Организация,
	|	Организация.НаименованиеПолное	КАК НаименованиеОрганизации,
	|	Организация.КодОКПО				КАК КодОКПО,
	|	НомерПриказаИнвентаризации		КАК НомерПриказа,
	|	ДатаПриказаИнвентаризации		КАК ДатаПриказа,
	|	ДатаНачала						КАК ДатаНачала,
	|	ДатаОкончания					КАК ДатаОкончания,
	|	ДолжностьПредседателяКомиссии	КАК ДолжностьПредседателяКомиссии,
	|	ФамилияПредседателяКомиссии		КАК ФамилияПредседателяКомиссии,
	|	ИмяПредседателяКомиссии			КАК ИмяПредседателяКомиссии,
	|	ОтчествоПредседателяКомиссии	КАК ОтчествоПредседателяКомиссии,
	|	МестоИнвентаризации				КАК МестоИнвентаризации,
	|	ГруппироватьПоКонтрагентам		КАК ГруппироватьПоКонтрагентам,
	|	ЗаключениеКомиссии				КАК ЗаключениеКомиссии,
	|	ДатаПодписиКомиссии				КАК ДатаПодписиКомиссии,
	|	ВидРасчетов						КАК ВидРасчетов,
	|	
	|	// Часть отбора
	|	ПечататьОтбор					КАК ПечататьОтбор,
	|	ВЫБОР
	|		КОГДА КФО = ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка) ТОГДА
	|			&ТекстБезОграниченияКФО
	|		ИНАЧЕ
	|			КФО
	|	КОНЕЦ							КАК ОтборКФО,
	|	ВЫБОР
	|		КОГДА БезУчетаИФО = ИСТИНА ТОГДА
	|			&ТекстБезОграниченияИФО
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА ИФО = ЗНАЧЕНИЕ(Справочник.ИсточникиФинансовогоОбеспечения.ПустаяСсылка) ТОГДА
	|					&ТекстПустоеЗначениеИФО
	|				ИНАЧЕ
	|					ИФО
	|			КОНЕЦ
	|	КОНЕЦ							КАК ОтборИФО
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами	КАК Док
	|ГДЕ
	|	Ссылка В (&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|ИТОГИ ПО
	|	// Обязательно первые итоги по ссылке на документ
	|	ДокСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// [1]. Таблица инвентаризационной комиссии
	|//
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка					КАК ДокСсылка,
	|	ДолжностьЧленаКомиссии	КАК ДолжностьЧленаКомиссии,
	|	ФамилияЧленаКомиссии	КАК ФамилияЧленаКомиссии,
	|	ИмяЧленаКомиссии		КАК ИмяЧленаКомиссии,
	|	ОтчествоЧленаКомиссии	КАК ОтчествоЧленаКомиссии
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.СоставКомиссии	КАК ТЧ
	|ГДЕ
	|	Ссылка В (&МассивСсылок)
	|ИТОГИ ПО
	|	// Обязательно первые итоги по ссылке на документ
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// [2]. Таблица данных документа
	|//
	|// Дебиторская задолженность
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка									КАК ДокСсылка,
	|	НомерСтроки								КАК НомерСтроки,
	|	ИСТИНА									КАК ЭтоДебиторскаяЗадолженность,
	|	Контрагент								КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Контрагент) = ТИП(Строка) ТОГДА
	|			Контрагент
	|		КОГДА Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
	|			""""
	|		// Если задано наименование для печати - используем его
	|		КОГДА НЕ Контрагент.НаименованиеСокращенное = """" ТОГДА
	|			Контрагент.НаименованиеСокращенное
	|			
	|		// Для юридических лиц есть реквизит НаименованиеПолное
	|		КОГДА Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			И НЕ Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное = """" ТОГДА
	|			ВЫРАЗИТЬ(Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное	КАК СТРОКА(1000))
	|			
	|		ИНАЧЕ
	|			Контрагент.Наименование
	|	КОНЕЦ									КАК КонтрагентНаименование,
	|	Счет									КАК Счет,
	|	КФО										КАК КФО,
	|	КПС										КАК КПС,
	|	КЭК										КАК КЭК,
	|	ИФО										КАК ИФО,
	|	Всего									КАК Всего,
	|	Подтверждено							КАК Подтверждено,
	|	НеПодтверждено							КАК НеПодтверждено,
	|	ИстекСрокДавности						КАК ИстекСрокДавности,
	|	Долгосрочная							КАК Долгосрочная,
	|	Просроченная							КАК Просроченная,
	|	ДатаВозникновения						КАК ДатаВозникновения,
	|	ДатаИсполнения							КАК ДатаИсполнения,
	|	ВЫБОР
	|		КОГДА Ссылка.РежимЗаполнения = 0 ТОГДА
	|			""""
	|		ИНАЧЕ
	|			Договор.Наименование
	|	КОНЕЦ									КАК ДоговорНаименование
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.ДебиторскаяЗадолженность КАК ТЧ
	|ГДЕ
	|	Ссылка В(&МассивСсылок)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Кредиторская задолженность
	|ВЫБРАТЬ
	|	Ссылка									КАК ДокСсылка,
	|	НомерСтроки								КАК НомерСтроки,
	|	ЛОЖЬ									КАК ЭтоДебиторскаяЗадолженность,
	|	Контрагент								КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Контрагент) = ТИП(Строка) ТОГДА
	|			Контрагент
	|		КОГДА Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) ТОГДА
	|			""""
	|		// Если задано наименование для печати - используем его
	|		КОГДА НЕ Контрагент.НаименованиеСокращенное = """" ТОГДА
	|			Контрагент.НаименованиеСокращенное
	|			
	|		// Для юридических лиц есть реквизит НаименованиеПолное
	|		КОГДА Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			И НЕ Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное = """" ТОГДА
	|			ВЫРАЗИТЬ(Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное	КАК СТРОКА(1000))
	|			
	|		ИНАЧЕ
	|			Контрагент.Наименование
	|	КОНЕЦ									КАК КонтрагентНаименование,
	|	Счет									КАК Счет,
	|	КФО										КАК КФО,
	|	КПС										КАК КПС,
	|	КЭК										КАК КЭК,
	|	ИФО										КАК ИФО,
	|	Всего									КАК Всего,
	|	Подтверждено							КАК Подтверждено,
	|	НеПодтверждено							КАК НеПодтверждено,
	|	ИстекСрокДавности						КАК ИстекСрокДавности,
	|	Долгосрочная							КАК Долгосрочная,
	|	Просроченная							КАК Просроченная,
	|	ДатаВозникновения						КАК ДатаВозникновения,
	|	ДатаИсполнения							КАК ДатаИсполнения,
	|	ВЫБОР
	|		КОГДА Ссылка.РежимЗаполнения = 0 ТОГДА
	|			""""
	|		ИНАЧЕ
	|			Договор.Наименование
	|	КОНЕЦ									КАК ДоговорНаименование
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.КредиторскаяЗадолженность КАК ТЧ
	|ГДЕ
	|	Ссылка В(&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентНаименование,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(Всего),
	|	СУММА(Подтверждено),
	|	СУММА(НеПодтверждено),
	|	СУММА(ИстекСрокДавности),
	|	СУММА(Долгосрочная),
	|	СУММА(Просроченная)
	|ПО
	|	// Обязательно первые итоги по ссылке на документ
	|	ДокСсылка,
	|	ЭтоДебиторскаяЗадолженность,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// [3]. Список счетов (для вывода отбора по счетам)
	|//
	|ВЫБРАТЬ
	|	Ссылка						КАК ДокСсылка,
	|	Счет						КАК Счет,
	|	ВЫБОР
	|		КОГДА Счет В	(
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ЕПСБУ.Родитель
	|			ИЗ
	|				ПланСчетов.ЕПСБУ	КАК ЕПСБУ
	|			ГДЕ
	|				ЕПСБУ.Родитель = Счет)	ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ						КАК ЭтоГруппа
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.СписокСчетов	КАК ТЧ
	|ГДЕ
	|	Ссылка В (&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	Счет.Порядок
	|ИТОГИ ПО
	|	// Обязательно первые итоги по ссылке на документ
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// [4]. Список контрагентов (для вывода отбора по контрагентам)
	|//
	|ВЫБРАТЬ
	|	Ссылка						КАК ДокСсылка,
	|	Контрагент					КАК Контрагент,
	|	Контрагент.ЭтоГруппа		КАК ЭтоГруппа
	|ИЗ
	|	Документ.ИнвентаризацияРасчетовСКонтрагентами.СписокКонтрагентов	КАК ТЧ
	|ГДЕ
	|	Ссылка В (&МассивСсылок)
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент.ЭтоГруппа УБЫВ,
	|	Контрагент.Наименование
	|ИТОГИ ПО
	|	// Обязательно первые итоги по ссылке на документ
	|	Ссылка
	|;";
	
	Результаты = Запросы.ВыполнитьПакет();
	
	ВыборкаДокШапка				= Результаты[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокКомиссия			= Результаты[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокДанные			= Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокОтборСчета		= Результаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаДокОтборКонтрагенты	= Результаты[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПараметрыВывода = ПолучитьПараметрыВывода();
	
	// Выборки по документам:
	ПервыйДокумент = Истина;
	Пока ВыборкаДокШапка.Следующий() Цикл
		
		// Используемые области макета:
		Области = Новый Структура();
		Области.Вставить("ИспользуемыйМакет",	Макет);
		Области.Вставить("Титул1",				Макет.ПолучитьОбласть("Титул1"));
		Области.Вставить("Титул2",				Макет.ПолучитьОбласть("Титул2"));
		Области.Вставить("ОтборКФО",			Макет.ПолучитьОбласть("ОтборКФО"));
		Области.Вставить("ОтборИФО"	,			Макет.ПолучитьОбласть("ОтборИФО"));
		Области.Вставить("ОтборСчетов",			Макет.ПолучитьОбласть("ОтборСчетов"));
		Области.Вставить("ОтборКонтрагентов",	Макет.ПолучитьОбласть("ОтборКонтрагентов"));
		Области.Вставить("Комиссия",			Макет.ПолучитьОбласть("Комиссия"));
		Области.Вставить("ДатаПодписиКомиссии",	Макет.ПолучитьОбласть("ДатаПодписиКомиссии"));
		Области.Вставить("ЗаголовокДЗ",			Макет.ПолучитьОбласть("ЗаголовокДЗ"));
		Области.Вставить("ШапкаДЗ",				Макет.ПолучитьОбласть("ШапкаДЗ"));
		Области.Вставить("ЗаголовокКЗ",			Макет.ПолучитьОбласть("ЗаголовокКЗ"));
		Области.Вставить("ШапкаКЗ",				Макет.ПолучитьОбласть("ШапкаКЗ"));
		Области.Вставить("НомерСтраницы",		Макет.ПолучитьОбласть("НомерСтраницы"));
		Области.Вставить("ИтогоПоСтранице",		Макет.ПолучитьОбласть("ИтогоПоСтранице"));
		Области.Вставить("Строка",				Макет.ПолучитьОбласть("Строка"));
		Области.Вставить("СтрокаКонтрагента",	Макет.ПолучитьОбласть("СтрокаКонтрагента"));
		Области.Вставить("Итого",				Макет.ПолучитьОбласть("Итого"));
		
		// Продвигаемся в остальных выборках до текущего документа:
		ПоискТекущегоДокумента = Новый Структура("ДокСсылка", ВыборкаДокШапка["ДокСсылка"]);
		ВыборкаДокКомиссия.Сбросить();
		ВыборкаДокДанные.Сбросить();
		ВыборкаДокОтборСчета.Сбросить();
		ВыборкаДокОтборКонтрагенты.Сбросить();
		ЕстьВыборкаДокКомиссия			= ВыборкаДокКомиссия.НайтиСледующий(ПоискТекущегоДокумента);
		ЕстьВыборкаДокДанные			= ВыборкаДокДанные.НайтиСледующий(ПоискТекущегоДокумента);
		ЕстьВыборкаДокОтборСчета		= ВыборкаДокОтборСчета.НайтиСледующий(ПоискТекущегоДокумента);
		ЕстьВыборкаДокОтборКонтрагенты	= ВыборкаДокОтборКонтрагенты.НайтиСледующий(ПоискТекущегоДокумента);
		
		// Выборки текущего документа:
		Выборки = Новый Структура();
		Выборки.Вставить("Данные",	ВыборкаДокДанные);
		Выборки.Вставить("Шапка",	ВыборкаДокШапка.Выбрать());
		Выборки["Шапка"].Следующий();
		
		СтатистикаВывода	= ИнициализироватьСтатистикуВывода();
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// Запомним номер строки, с которой начали выводить текущий документ:
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		//---------------
		// Титул, начало
		//---------------
		СтатистикаВывода["НомерСтраницы"] = 1;
		Области["Титул1"].Параметры.Заполнить(Выборки["Шапка"]);
		РегистрыСведений.НастройкиПечатиПрефиксаНомера.УстановитьНомерДляПечатиВОбластьПечати(Области["Титул1"],"Номер",Выборки["Шапка"].Номер,Выборки["Шапка"].ДокСсылка,Неопределено, Истина);
		
		ЗначенияПараметров = Новый Структура();
		ЗначенияПараметров.Вставить("Дата", Выборки["Шапка"]["ДатаИнвентаризации"]);
		
		Области["Титул1"].Параметры.Заполнить(Выборки["Шапка"]);
		Области["Титул1"].Параметры.Заполнить(ЗначенияПараметров);
		
		ТабДокумент.Вывести(Области["Титул1"]);
		
		//-------
		// Отбор
		//-------
		Если Выборки["Шапка"]["ПечататьОтбор"] Тогда
			
			// 1. Отбор счетов:
			Если ЕстьВыборкаДокОтборСчета Тогда
				Текст = "";
				ПеревестиСтроку = Ложь;
				
				ВыборкаОтборСчета = ВыборкаДокОтборСчета.Выбрать();
				СтавитьЗапятую = Ложь;
				Пока ВыборкаОтборСчета.Следующий() Цикл
					Текст = Текст
						+ ?(СтавитьЗапятую, ", ", "")
						+ ?(ВыборкаОтборСчета["ЭтоГруппа"], "(Группа) " , "")
						+ ВыборкаОтборСчета["Счет"];
					
					СтавитьЗапятую = Истина;
					
					ПеревестиСтроку = Истина;
				КонецЦикла;
			Иначе
				Текст = НСтр("ru='счета не указаны'");
			КонецЕсли;
			ЗначенияПараметров = Новый Структура("ОтборСчетов", Текст);
			Области["ОтборСчетов"].Параметры.Заполнить(ЗначенияПараметров);
			
			// 2. Отбор контрагентов:
			Если ЕстьВыборкаДокОтборКонтрагенты Тогда
				Текст = "";
				СтавитьЗапятую = Ложь;
				
				ВыборкаОтборКонтрагентов = ВыборкаДокОтборКонтрагенты.Выбрать();
				Пока ВыборкаОтборКонтрагентов.Следующий() Цикл
					Текст = Текст
						+ ?(СтавитьЗапятую, ", ", "")
						+ ?(ВыборкаОтборКонтрагентов["ЭтоГруппа"], "(Группа) " , "")
						+ ВыборкаОтборКонтрагентов["Контрагент"];
					
					СтавитьЗапятую = Истина;
				КонецЦикла;	
			Иначе
				Текст = НСтр("ru='без ограничения'");
			КонецЕсли;
			ЗначенияПараметров = Новый Структура("ОтборКонтрагентов", Текст);
			Области["ОтборКонтрагентов"].Параметры.Заполнить(ЗначенияПараметров);
			
			// 3. Отборы по КФО и ИФО:
			ЗначенияПараметров = Новый Структура("ОтборКФО, ОтборИФО");
			ЗаполнитьЗначенияСвойств(ЗначенияПараметров, Выборки["Шапка"]);
			// Заполняем значения параметров выводимой области:
			Области["ОтборКФО"].Параметры.Заполнить(ЗначенияПараметров);
			Области["ОтборИФО"].Параметры.Заполнить(ЗначенияПараметров);
			
			// Выводим все области отборов:
			ТабДокумент.Вывести(Области["ОтборКФО"]);
			Если ИспользоватьУчетПоИФО Тогда
				ТабДокумент.Вывести(Области["ОтборИФО"]);
			КонецЕсли;
			ТабДокумент.Вывести(Области["ОтборСчетов"]);
			ТабДокумент.Вывести(Области["ОтборКонтрагентов"]);
		КонецЕсли;
		
		//------------------
		// Титул, окончание
		//------------------
		Области["Титул2"].Параметры.Заполнить(Выборки["Шапка"]);
		ТабДокумент.Вывести(Области["Титул2"]);
		
		ОбластьЗаключениеКомиссии = СформироватьЗаключениеКомиссии(Выборки["Шапка"].ЗаключениеКомиссии, Макет);
		ТабДокумент.Вывести(ОбластьЗаключениеКомиссии);
		
		//---
		// Инвентаризационная комиссия
		//---
		ОбластьВсяКомиссия = УправлениеОсновнымиСредствами.СформироватьОбластьКомиссия(
			Выборки["Шапка"],
			ВыборкаДокКомиссия.Выбрать(), 
			Области["Комиссия"], 
			3);
		ТабДокумент.Вывести(ОбластьВсяКомиссия);
		
		КомпонентыДатыДляПодписи = ИнвентаризацияСервер.ПолучитьКомпонентыДатыДляПодписи(Выборки["Шапка"]["ДатаПодписиКомиссии"]);
		
		ОбластьДатаПодписиКомиссии = Области["ДатаПодписиКомиссии"];
		ОбластьДатаПодписиКомиссии.Параметры.Заполнить(КомпонентыДатыДляПодписи);
		ТабДокумент.Вывести(ОбластьДатаПодписиКомиссии);
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//--------------------
		// Страница 2 и далее
		//--------------------
		СтатистикаВывода["НомерСтраницы"] = 2;
		
		//--------------------------------------
		// Таблица 1. Дебиторская задолженность
		//--------------------------------------
		ЭтоДебиторскаяЗадолженность = Истина;
		ВывестиТаблицуЗадолженности(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность);
			
		//---------------------------------------
		// Таблица 2. Кредиторская задолженность
		//---------------------------------------
		ЭтоДебиторскаяЗадолженность = Ложь;
		ВывестиТаблицуЗадолженности(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаДокШапка.ДокСсылка);
	КонецЦикла; // ВыборкаДокШапка	
	
	// Колонтитулы:
	ТабДокумент.ВерхнийКолонтитул.Выводить			= Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница	= 2;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа		= НСтр("ru='Форма 0504089 с.[&НомерСтраницы]'");
	
	Возврат ТабДокумент;
	
КонецФункции

// ПАРАМЕТРЫ ВЫВОДА

Функция ПолучитьПараметрыВывода()
	
	ПараметрыВывода = Новый Структура();
	ПараметрыВывода.Вставить("КонтролироватьРазрывСтраниц",	Истина);
	ПараметрыВывода.Вставить("ВыводитьИтогиПоСтранице",		Истина);
	ПараметрыВывода.Вставить("РазрешитьРазрывШапкиИСтрок",	Ложь);
	ПараметрыВывода.Вставить("РазрешитьРазрывСтрокИИтогов",	Ложь);
	
	Возврат ПараметрыВывода;
	
КонецФункции

// ВЫВОД ОБЛАСТЕЙ

Процедура ИнициализироватьВыборки(Выборки, ЭтоДебиторскаяЗадолженность)
	
	// Группировка "Вид задолженности":
	Выборка = Выборки["Данные"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Поиск = Новый Структура("ЭтоДебиторскаяЗадолженность", ЭтоДебиторскаяЗадолженность);
	Выборка.НайтиСледующий(Поиск);
	Выборки.Вставить("ЭтоДебиторскаяЗадолженность", Выборка);
	
	// Группировка "Контрагент":
	Выборка = Выборки["ЭтоДебиторскаяЗадолженность"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	Выборки.Вставить("Контрагент", Выборка);
	
	// Детальные записи:
	Выборка = Выборки["Контрагент"].Выбрать();
	Выборка.Следующий();
	Выборки.Вставить("ДетальныеЗаписи",	Выборка);
	
КонецПроцедуры

Процедура ВывестиТаблицуЗадолженности(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность)
	
	ИнициализироватьВыборки(Выборки, ЭтоДебиторскаяЗадолженность);
	ИнициализироватьСтатистикуВывода_ТекущаяТаблица(Выборки, СтатистикаВывода);
	
	//---
	// Заголовок раздела задолженности
	//---
	ВыводимыеОбласти	= Новый Массив();
	ПроверяемыеОбласти	= Новый Массив();
	ПолучитьЗаполненныеОбласти_ЗаголовокРаздела(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ВыводимыеОбласти, ПроверяемыеОбласти);
	ОбщегоНазначенияБГУ.ДобавитьМассив(ПроверяемыеОбласти, ВыводимыеОбласти);
	Если ПараметрыВывода["КонтролироватьРазрывСтраниц"] Тогда
		Если НЕ ТабДокумент.ПроверитьВывод(ПроверяемыеОбласти) Тогда
			//---
			// Разрыв страницы
			//---
			НачатьНовуюСтраницу(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Ложь); // ВывестиШапкуТаблицы
		КонецЕсли;
	КонецЕсли;
	Для Каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ТабДокумент.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
	//---
	// Шапка таблицы
	//---
	ВывестиШапкуТаблицы(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность);
	
	//---
	// Строки
	//---
	ИнициализироватьСтатистикуВывода_ТекущаяТаблица(Выборки, СтатистикаВывода);
	// Обход по Контрагентам:
	Выборки["Контрагент"].Сбросить();
	Пока Выборки["Контрагент"].Следующий() Цикл    
		
		Выборки.Вставить("ДетальныеЗаписи", Выборки["Контрагент"].Выбрать());
		
		ИнициализироватьСтатистикуВывода_ГруппировкаКонтрагент(Выборки, СтатистикаВывода);
		
		// Обход по детальным записям:
		Пока Выборки["ДетальныеЗаписи"].Следующий() Цикл
			
			ВыводимыеОбласти	= Новый Массив();
			ПроверяемыеОбласти	= Новый Массив();
			ПолучитьЗаполненныеОбласти_СтрокаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Ложь, ВыводимыеОбласти, ПроверяемыеОбласти); // ЭтоПроверкаВывода
			ОбщегоНазначенияБГУ.ДобавитьМассив(ПроверяемыеОбласти, ВыводимыеОбласти);
			
			Если ПараметрыВывода["КонтролироватьРазрывСтраниц"] Тогда
				Если НЕ ТабДокумент.ПроверитьВывод(ПроверяемыеОбласти) Тогда
					//---
					// Итого по странице
					//---
					Если ПараметрыВывода["ВыводитьИтогиПоСтранице"] Тогда
						Области["ИтогоПоСтранице"] = ПолучитьЗаполненнуюОбластьИтогоПоСтранице(Области, ПараметрыВывода, СтатистикаВывода, Ложь); // ЭтоПроверкаВывода
						ТабДокумент.Вывести(Области["ИтогоПоСтранице"]);
					КонецЕсли;
					
					//---
					// Разрыв страницы
					//---
					НачатьНовуюСтраницу(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Истина); // ВывестиШапкуТаблицы
				КонецЕсли;
			КонецЕсли;
			Для Каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
				ТабДокумент.Вывести(ВыводимаяОбласть);
			КонецЦикла;
			
			ОбновитьИтогиПоСтранице(Выборки, ПараметрыВывода, СтатистикаВывода, Ложь); // ЭтоПроверкаВывода
		КонецЦикла;
	КонецЦикла;
	
	//---
	// Итого
	//---
	ВывестиИтогоПоТаблице(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность);
	
КонецПроцедуры

Процедура ВывестиШапкуТаблицы(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность)
	
	ВыводимыеОбласти	= Новый Массив();
	ПроверяемыеОбласти	= Новый Массив();
	ПолучитьЗаполненныеОбласти_ШапкаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Истина, ВыводимыеОбласти, ПроверяемыеОбласти); // ЭтоПроверкаВывода
	Если ПараметрыВывода["КонтролироватьРазрывСтраниц"] Тогда
		Если НЕ ТабДокумент.ПроверитьВывод(ПроверяемыеОбласти) Тогда
			//---
			// Разрыв страницы
			//---
			НачатьНовуюСтраницу(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Ложь); // ВывестиШапкуТаблицы
		КонецЕсли;
	КонецЕсли;
	Для Каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ТабДокумент.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИтогоПоТаблице(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность)
	
	ВыводимыеОбласти	= Новый Массив();
	ПроверяемыеОбласти	= Новый Массив();
	ПолучитьЗаполненныеОбласти_ИтогоТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Ложь, ВыводимыеОбласти, ПроверяемыеОбласти); // ЭтоПроверкаВывода
	ОбщегоНазначенияБГУ.ДобавитьМассив(ПроверяемыеОбласти, ВыводимыеОбласти);
	
	Если ПараметрыВывода["КонтролироватьРазрывСтраниц"] Тогда
		Если НЕ ТабДокумент.ПроверитьВывод(ПроверяемыеОбласти) Тогда
			//---
			// Разрыв страницы
			//---
			НачатьНовуюСтраницу(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Истина); // ВывестиШапкуТаблицы
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ВыводимаяОбласть Из ВыводимыеОбласти Цикл
		ТабДокумент.Вывести(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Процедура НачатьНовуюСтраницу(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ВывестиШапкуТаблицы)
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	СтатистикаВывода["НомерСтраницы"]						= СтатистикаВывода["НомерСтраницы"] + 1;
	СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]	= ПолучитьПустыеИтогиПоСтранице();
	
	Если ВывестиШапкуТаблицы Тогда
		ВывестиШапкуТаблицы(ТабДокумент, Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность);
		СтатистикаВывода["ТекущаяТаблица"]["КоличествоСтраниц"]	= СтатистикаВывода["ТекущаяТаблица"]["КоличествоСтраниц"] + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьЗаключениеКомиссии(Текст, Макет)
	
	БлокиСтрок = Неопределено;
	
	// Блок 1
	ИнвентаризацияСервер.ДобавитьОписаниеБлокаСтрок(БлокиСтрок, 1, 100, "ЗаключениеКомиссииСтрока1");
	
	// Блок 2
	ИнвентаризацияСервер.ДобавитьОписаниеБлокаСтрок(БлокиСтрок, , 130, "ЗаключениеКомиссииСтрока2");
	
	МинимальноеКоличествоСтрок = 3;
	
	Возврат ИнвентаризацияСервер.РазбитьТекстНаБлокиСтрокИВывестиВТабличныйДокумент(Текст, БлокиСтрок, Макет, МинимальноеКоличествоСтрок);
	
КонецФункции

// ЗАПОЛНЕНИЕ ОБЛАСТЕЙ

Процедура ПолучитьЗаполненныеОбласти_ЗаголовокРаздела(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ВозвратВыводимыеОбласти, ВозвратДополнительныеПроверяемыеОбласти)
	
	//---
	// Заголовок раздела
	//---
	Если ЭтоДебиторскаяЗадолженность Тогда
		ВозвратВыводимыеОбласти.Добавить(Области["ЗаголовокДЗ"]);
	Иначе
		ВозвратВыводимыеОбласти.Добавить(Области["ЗаголовокКЗ"]);
	КонецЕсли;
	
	ВыводимыеДалееОбласти = Новый Массив();
	ПолучитьЗаполненныеОбласти_ШапкаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, Истина, ВыводимыеДалееОбласти, ВозвратДополнительныеПроверяемыеОбласти); // ЭтоПроверкаВывода
	Для Каждого ВыводимаяОбласть Из ВыводимыеДалееОбласти Цикл
		ВозвратДополнительныеПроверяемыеОбласти.Добавить(ВыводимаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьЗаполненныеОбласти_ШапкаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ЭтоПроверкаВывода, ВозвратВыводимыеОбласти, ВозвратДополнительныеПроверяемыеОбласти)
	
	//---
	// Шапка таблицы
	//---
	Если ЭтоДебиторскаяЗадолженность Тогда
		ВозвратВыводимыеОбласти.Добавить(Области["ШапкаДЗ"]);
	Иначе
		ВозвратВыводимыеОбласти.Добавить(Области["ШапкаКЗ"]);
	КонецЕсли;
	
	Если НЕ ПараметрыВывода["РазрешитьРазрывШапкиИСтрок"] Тогда
		ВыводимыеДалееОбласти = Новый Массив();
		ПолучитьЗаполненныеОбласти_СтрокаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ЭтоПроверкаВывода, ВыводимыеДалееОбласти, ВозвратДополнительныеПроверяемыеОбласти);
		Для Каждого ВыводимаяОбласть Из ВыводимыеДалееОбласти Цикл
			ВозвратДополнительныеПроверяемыеОбласти.Добавить(ВыводимаяОбласть);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗаполненныеОбласти_СтрокаТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ЭтоПроверкаВывода, ВозвратВыводимыеОбласти, ВозвратДополнительныеПроверяемыеОбласти)
	
	ЕстьГруппировкаПоКонтрагенту = Ложь;
	
	Если Выборки["Шапка"]["ГруппироватьПоКонтрагентам"] И СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагентДетальныеЗаписи"] = 0 Тогда
		//---
		// Группировка "Контрагент"
		//---
		Если НЕ ЭтоПроверкаВывода Тогда
			СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагент"]	= СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагент"] + 1;
			СтатистикаВывода["ТекущаяТаблица"]["НомерСтроки"]			= СтатистикаВывода["ТекущаяТаблица"]["НомерСтроки"] + 1;
			СтатистикаВывода["НомерСтроки"]								= СтатистикаВывода["НомерСтроки"] + 1;
		КонецЕсли;
		Области["СтрокаКонтрагента"].Параметры.Заполнить(Выборки["Контрагент"]);
		
		//АпогейБК
		Области["СтрокаКонтрагента"].Параметры.КонтрагентНаименование = "" + Выборки["Контрагент"].КонтрагентНаименование + ВычислитьИдентификатор(Выборки["Контрагент"].Контрагент);	
		ЕстьГруппировкаПоКонтрагенту = Истина;     
		//АпогейБК
		
		ВозвратВыводимыеОбласти.Добавить(Области["СтрокаКонтрагента"]);
	КонецЕсли;
	
	//---
	// Детальная строка
	//---
	Если НЕ ЭтоПроверкаВывода Тогда
		СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагентДетальныеЗаписи"]	= СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагентДетальныеЗаписи"] + 1;
		СтатистикаВывода["ТекущаяТаблица"]["НомерСтроки"]							= СтатистикаВывода["ТекущаяТаблица"]["НомерСтроки"] + 1;
		СтатистикаВывода["НомерСтроки"]												= СтатистикаВывода["НомерСтроки"] + 1;
	КонецЕсли;
	Параметр_СчетПолный = УправлениеПечатьюБГУ.ПредставлениеРабочегоСчета(
		Выборки["ДетальныеЗаписи"]["КПС"], 
		Выборки["ДетальныеЗаписи"]["КФО"], 
		Выборки["ДетальныеЗаписи"]["Счет"], 
		?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["КЭК"]), Выборки["ДетальныеЗаписи"]["КЭК"], "000"));
		
	ЗначениеПараметров = Новый Структура();
	ЗначениеПараметров.Вставить("СчетПолный", Параметр_СчетПолный);
	
	ДоговорНаименование = Выборки["ДетальныеЗаписи"]["ДоговорНаименование"];
	Если ЗначениеЗаполнено(ДоговорНаименование) Тогда
		ЗначениеПараметров.Вставить("ДоговорНаименование",	", " + ДоговорНаименование);
	КонецЕсли;
	
	Области["Строка"].Параметры.Заполнить(Выборки["ДетальныеЗаписи"]);
	
	//АпогейБК
	Если НЕ ЕстьГруппировкаПоКонтрагенту Тогда
		Области["Строка"].Параметры.КонтрагентНаименование =  "" + Выборки["ДетальныеЗаписи"].КонтрагентНаименование + ВычислитьИдентификатор(Выборки["ДетальныеЗаписи"].Контрагент);	
	КонецЕсли; 
	//АпогейБК

	Области["Строка"].Параметры.Заполнить(ЗначениеПараметров);
	ВозвратВыводимыеОбласти.Добавить(Области["Строка"]);
	
	//---
	// Итого по странице (опционально)
	//---
	Если ПараметрыВывода["ВыводитьИтогиПоСтранице"] Тогда
		ОбновитьИтогиПоСтранице(Выборки, ПараметрыВывода, СтатистикаВывода, Истина); // ЭтоПроверкаВывода
		ВозвратДополнительныеПроверяемыеОбласти.Добавить(ПолучитьЗаполненнуюОбластьИтогоПоСтранице(Области, ПараметрыВывода, СтатистикаВывода, Истина)); // ЭтоПроверкаВывода
	КонецЕсли;
	
	//---
	// Итого (опционально)
	//---
	ЭтоПоследняяСтрока = (СтатистикаВывода["ТекущаяТаблица"]["НомерСтроки"] = СтатистикаВывода["ТекущаяТаблица"]["КоличествоСтрок"]);
	Если ЭтоПоследняяСтрока И НЕ ПараметрыВывода["РазрешитьРазрывСтрокИИтогов"] Тогда
		ВыводимыеДалееОбласти	= Новый Массив();
		ПроверяемыеДалееОбласти	= Новый Массив();
		
		ПолучитьЗаполненныеОбласти_ИтогоТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ЭтоПроверкаВывода, ВыводимыеДалееОбласти, ПроверяемыеДалееОбласти);
		ОбщегоНазначенияБГУ.ДобавитьМассив(ВозвратДополнительныеПроверяемыеОбласти, ВыводимыеДалееОбласти);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗаполненныеОбласти_ИтогоТаблицы(Области, Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоДебиторскаяЗадолженность, ЭтоПроверкаВывода, ВозвратВыводимыеОбласти, ВозвратДополнительныеПроверяемыеОбласти)
	
	ВозвратВыводимыеОбласти.Добавить(ПолучитьЗаполненнуюОбластьИтогоПоТаблице(Области, Выборки));
	
КонецПроцедуры

// ИТОГИ

Функция ПолучитьПустыеИтогиПоСтранице()
	
	Возврат Новый Структура("
		|Всего,
		|Подтверждено,
		|НеПодтверждено,
		|ИстекСрокДавности,
		|Долгосрочная,
		|Просроченная",
		0, 0, 0, 0, 0, 0);
	
КонецФункции

Функция ПолучитьЗаполненнуюОбластьИтогоПоСтранице(Области, ПараметрыВывода, СтатистикаВывода, ЭтоПроверкаВывода)
	
	Если ЭтоПроверкаВывода Тогда
		СтруктураИтогов = СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтраницеПроверкаВывода"];
	Иначе
		СтруктураИтогов = СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"];
	КонецЕсли;
	
	Области["ИтогоПоСтранице"].Параметры.Заполнить(СтруктураИтогов);
	
	Возврат Области["ИтогоПоСтранице"];
	
КонецФункции

Функция ПолучитьЗаполненнуюОбластьИтогоПоТаблице(Области, Выборки)
	
	ПустыеИтоги = ПолучитьПустыеИтогиПоСтранице();
	
	Области["Итого"].Параметры.Заполнить(ПустыеИтоги);
	
	Области["Итого"].Параметры.Заполнить(Выборки["ЭтоДебиторскаяЗадолженность"]);
	
	Возврат Области["Итого"];
	
КонецФункции

Процедура ОбновитьИтогиПоСтранице(Выборки, ПараметрыВывода, СтатистикаВывода, ЭтоПроверкаВывода)
	
	Если ЭтоПроверкаВывода Тогда
		СтруктураИтогов = СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтраницеПроверкаВывода"];
	Иначе
		СтруктураИтогов = СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"];
	КонецЕсли;
	
	СтруктураИтогов["Всего"]				= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["Всего"]				+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["Всего"]),				Выборки["ДетальныеЗаписи"]["Всего"], 0);
	СтруктураИтогов["Подтверждено"]			= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["Подтверждено"]			+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["Подтверждено"]),		Выборки["ДетальныеЗаписи"]["Подтверждено"], 0);
	СтруктураИтогов["НеПодтверждено"]		= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["НеПодтверждено"]		+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["НеПодтверждено"]),	Выборки["ДетальныеЗаписи"]["НеПодтверждено"], 0);
	СтруктураИтогов["ИстекСрокДавности"]	= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["ИстекСрокДавности"]	+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["ИстекСрокДавности"]),	Выборки["ДетальныеЗаписи"]["ИстекСрокДавности"], 0);
	
	СтруктураИтогов["Долгосрочная"]	= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["Долгосрочная"]	+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["Долгосрочная"]),	Выборки["ДетальныеЗаписи"]["Долгосрочная"], 0);
	СтруктураИтогов["Просроченная"]	= СтатистикаВывода["ТекущаяТаблица"]["ИтогоПоСтранице"]["Просроченная"]	+ ?(ЗначениеЗаполнено(Выборки["ДетальныеЗаписи"]["Просроченная"]),	Выборки["ДетальныеЗаписи"]["Просроченная"], 0);

КонецПроцедуры

// СТАТИСТИКА ВЫВОДА

Функция ИнициализироватьСтатистикуВывода()
	
	СтатистикаВывода = Новый Структура();
	СтатистикаВывода.Вставить("НомерСтраницы",	0);
	СтатистикаВывода.Вставить("НомерСтроки",	0);
	
	Возврат СтатистикаВывода;
	
КонецФункции

Процедура ИнициализироватьСтатистикуВывода_ТекущаяТаблица(Выборки, СтатистикаВывода)
	
	// Подготовка:
	Если Выборки["Шапка"]["ГруппироватьПоКонтрагентам"] Тогда
		КоличествоСтрок = Выборки["ЭтоДебиторскаяЗадолженность"].Выбрать().Количество();
	Иначе
		КоличествоСтрок = Выборки["ЭтоДебиторскаяЗадолженность"].Выбрать().Количество()
			- Выборки["Контрагент"].Количество();
	КонецЕсли;
	
	ТекущаяТаблица = Новый Структура();
	ТекущаяТаблица.Вставить("КоличествоСтрокКонтрагентДетальныеЗаписи",	Выборки["ДетальныеЗаписи"].Количество());
	ТекущаяТаблица.Вставить("КоличествоСтрокКонтрагент",				Выборки["Контрагент"].Количество());
	ТекущаяТаблица.Вставить("КоличествоСтрок",							КоличествоСтрок);
	ТекущаяТаблица.Вставить("КоличествоСтраниц",						1);
	ТекущаяТаблица.Вставить("НомерСтрокиКонтрагентДетальныеЗаписи",		0);
	ТекущаяТаблица.Вставить("НомерСтрокиКонтрагент",					0);
	ТекущаяТаблица.Вставить("НомерСтроки",								0);
	ТекущаяТаблица.Вставить("ИтогоПоСтранице",							ПолучитьПустыеИтогиПоСтранице());
	ТекущаяТаблица.Вставить("ИтогоПоСтраницеПроверкаВывода",			ПолучитьПустыеИтогиПоСтранице());
	
	СтатистикаВывода.Вставить("ТекущаяТаблица", ТекущаяТаблица);
	
КонецПроцедуры

Процедура ИнициализироватьСтатистикуВывода_ГруппировкаКонтрагент(Выборки, СтатистикаВывода)
	
	СтатистикаВывода["ТекущаяТаблица"]["КоличествоСтрокКонтрагентДетальныеЗаписи"]	= Выборки["ДетальныеЗаписи"].Количество();
	СтатистикаВывода["ТекущаяТаблица"]["НомерСтрокиКонтрагентДетальныеЗаписи"]		= 0;
	
КонецПроцедуры

&НаСервере
Функция ВычислитьИдентификатор(Контрагент)  
	
	Если ЗначениеЗаполнено(Контрагент)
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ИдентификаторКонтрагента = БухгалтерскийУчет.ИдентификаторКонтрагента(Контрагент);
		Возврат ?(ЗначениеЗаполнено(ИдентификаторКонтрагента),", " + ИдентификаторКонтрагента,"");
	КонецЕсли;
КонецФункции                   

&НаСервере
Функция УдалитьНедопустимыеСимволы(Строка)
	НедопустимыеСимволы = ",.+-=_N\/<> "+Символы.НПП+Символы.ПС;
	Возврат СтрСоединить(СтрРазделить(Строка,НедопустимыеСимволы));
КонецФункции

