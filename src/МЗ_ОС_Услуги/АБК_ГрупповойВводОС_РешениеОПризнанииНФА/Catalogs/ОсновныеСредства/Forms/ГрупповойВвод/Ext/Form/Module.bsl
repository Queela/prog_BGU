
&НаСервере
&ИзменениеИКонтроль("ЗаполнитьСписокВыбораВидаДокумента")
Процедура АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ЗаполнитьСписокВыбораВидаДокумента()

	СписокВыбора = Элементы.ВидСоздаваемогоДокумента.СписокВыбора;
	СписокВыбора.Очистить();

	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ПринятиеКУчетуОбъектовОС")));
	#Вставка
	МассивОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.РешениеОПризнанииОбъектовОС")));
	#КонецВставки
	//МассивОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ПринятиеКУчетуОбъектаОС")));
	//МассивОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ПринятиеКУчетуЗдания")));
	//МассивОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("ДокументСсылка.ПринятиеКУчетуОС")));
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектов, "Синоним");

	Для Каждого ТекИОМ Из МассивОбъектов Цикл
		СписокВыбора.Добавить(ТекИОМ, ЗначенияРеквизитов[ТекИОМ].Синоним);
	КонецЦикла;

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СоздатьОбъектыНаСервере")
Процедура АБК_ГрупповойВводОС_РешениеОПризнанииНФА_СоздатьОбъектыНаСервере(Отказ, ТекстСообщения, СозданныеДокументы)

	НачатьТранзакцию();

	ТаблицаСозданныхОС = СоздатьОбъектыОС(Отказ);

	Если Отказ Тогда
		ТекстСообщения = ("ru = 'Ошибка создания объектов.'");
		Возврат;
	КонецЕсли;

	ТаблицаДрагМатериаловОбъектаНФА = ЭтаФорма.НаличиеДрагМатериалов.Выгрузить();

	Если РежимВводНаОсновании Тогда
		Если ВидСоздаваемогоДокумента = ЭталонПринятиеКУчету52н Тогда
			СозданныеДокументы = СоздатьПринятияКУчету_52н(ТаблицаСозданныхОС, ТаблицаДрагМатериаловОбъектаНФА, Отказ);
		#Вставка
		ИначеЕсли ТипЗнч(ВидСоздаваемогоДокумента.ЗначениеПустойСсылки) = Тип("ДокументСсылка.РешениеОПризнанииОбъектовОС") Тогда
			СозданныеДокументы = СоздатьРешениеОПризнанииНФА(ТаблицаСозданныхОС, Отказ);
		#КонецВставки
		Иначе
			СозданныеДокументы = СоздатьПринятияКУчету(ТаблицаСозданныхОС, Отказ);
		КонецЕсли;
	КонецЕсли;

	Если Отказ Тогда
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	Иначе
		ЗафиксироватьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Создано объектов ОС - %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТаблицаСозданныхОС.Количество());
		Если РежимВводНаОсновании Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создано документов - %1'"),
			СозданныеДокументы.Количество());
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ И ВызовИзДокумента Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(ТаблицаСозданныхОС);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Функция СоздатьРешениеОПризнанииНФА(ТаблицаСозданныхОС, Отказ)
	РеквизитыШапкиДляЗаписи = Новый Структура("Дата, ВидОперации, Организация, ИФО, КФО, КПС, ЦМО, Подразделение, РеквизитыЛицевогоСчета, ВнеоборотныйАктив,"
											+ "Приложение, ОснованиеДляАкта, НомерОснованияДляАкта, ДатаОснованияДляАкта, Контрагент, СчетКонтрагента,ПервоначальнаяСтоимость,"
											+ "СрокПолезногоИспользования, ПорядокПогашенияСтоимости, ПринятиеКУчетуОдновременноСВводомВЭксплуатацию,"
											+ "ДолжностьПредседателяКомиссии, ФамилияПредседателяКомиссии, ИмяПредседателяКомиссии, ОтчествоПредседателяКомиссии,"
											+ "НомерПриказа, ДатаПриказа,"
											+ "ПорядокВключенияСтоимостиВСоставРасходовНУ");
	ЗаполнитьЗначенияСвойств(РеквизитыШапкиДляЗаписи, ЭтаФорма);
	РеквизитыШапкиДляЗаписи.Вставить("ДокументОснование", ДокументПоступлениеОС);
	РеквизитыШапкиДляЗаписи.Вставить("СчетКредита", СчетУчетаКапВложения);
	РеквизитыШапкиДляЗаписи.Вставить("СчетУчета", СчетУчета);
	РеквизитыШапкиДляЗаписи.Вставить("СчетОС", СчетУчета);
	РеквизитыШапкиДляЗаписи.Вставить("Количество", КоличествоПоСтрокеВА);
	Если ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		РеквизитыШапкиДляЗаписи.Вставить("СпособНачисленияАмортизации", СпособНачисленияАмортизации);	
		РеквизитыШапкиДляЗаписи.Вставить("НачислятьАмортизацию",		НачислятьАмортизацию);
	КонецЕсли;
	Если ПорядокПогашенияСтоимости <> Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		РеквизитыШапкиДляЗаписи.Вставить("СчетУчетаЗатрат",		СчетУчетаЗатрат);
		РеквизитыШапкиДляЗаписи.Вставить("КЭКЗатрат",			КЭКЗатрат);
		РеквизитыШапкиДляЗаписи.Вставить("КПСЗатрат",			КПСЗатрат);
		РеквизитыШапкиДляЗаписи.Вставить("ПодразделениеЗатрат",	ПодразделениеЗатрат);
		РеквизитыШапкиДляЗаписи.Вставить("СубконтоЗатрат1",		СубконтоЗатрат1);
		РеквизитыШапкиДляЗаписи.Вставить("СубконтоЗатрат2",		СубконтоЗатрат2);
		РеквизитыШапкиДляЗаписи.Вставить("СубконтоЗатрат3",		СубконтоЗатрат3);
		РеквизитыШапкиДляЗаписи.Вставить("СтатьяПрочихРасходов",СтатьяПрочихРасходов);
	КонецЕсли;
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		РеквизитыШапкиДляЗаписи.Вставить("НачислятьАмортизациюНУ",								НачислятьАмортизациюНУ);
		РеквизитыШапкиДляЗаписи.Вставить("СрокПолезногоИспользованияНУ",						СрокПолезногоИспользованияНУ);
		РеквизитыШапкиДляЗаписи.Вставить("СпециальныйКоэффициентНУ",							СпециальныйКоэффициентНУ);
		РеквизитыШапкиДляЗаписи.Вставить("ВключитьАмортизационнуюПремиюВСоставРасходов",		ВключитьАмортизационнуюПремиюВСоставРасходов);
		Если ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
			РеквизитыШапкиДляЗаписи.Вставить("ПроцентКапитальныхВложенийВключаемыхВРасходыНУ",	ПроцентКапитальныхВложенийВключаемыхВРасходыНУ);
			РеквизитыШапкиДляЗаписи.Вставить("СчетУчетаЗатратПоАмортизационнойПремии",			СчетУчетаЗатратПоАмортизационнойПремии);
			РеквизитыШапкиДляЗаписи.Вставить("СубконтоПоАмортизационнойПремии1",				СубконтоПоАмортизационнойПремии1);
			РеквизитыШапкиДляЗаписи.Вставить("СубконтоПоАмортизационнойПремии2",				СубконтоПоАмортизационнойПремии2);
			РеквизитыШапкиДляЗаписи.Вставить("СубконтоПоАмортизационнойПремии3",				СубконтоПоАмортизационнойПремии3);
			РеквизитыШапкиДляЗаписи.Вставить("ПодразделениеПоАмортизационнойПремии",			ПодразделениеПоАмортизационнойПремии);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыПорядкаАмортизации = Новый Структура;
	РеквизитыПорядкаАмортизации.Вставить("ПорядокПогашенияСтоимости", ПорядокПогашенияСтоимости);
	Если ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		РеквизитыПорядкаАмортизации.Вставить("СпособНачисленияАмортизации", СпособНачисленияАмортизации);
		РеквизитыПорядкаАмортизации.Вставить("НачислятьАмортизацию",		НачислятьАмортизацию);
	КонецЕсли;
	Если ПорядокПогашенияСтоимости <> Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается Тогда
		РеквизитыПорядкаАмортизации.Вставить("СчетУчетаЗатрат",		СчетУчетаЗатрат);
		РеквизитыПорядкаАмортизации.Вставить("КЭКЗатрат",			КЭКЗатрат);
		РеквизитыПорядкаАмортизации.Вставить("КПСЗатрат",			КПСЗатрат);
		РеквизитыПорядкаАмортизации.Вставить("ПодразделениеЗатрат",	ПодразделениеЗатрат);
		РеквизитыПорядкаАмортизации.Вставить("СубконтоЗатрат1",		СубконтоЗатрат1);
		РеквизитыПорядкаАмортизации.Вставить("СубконтоЗатрат2",		СубконтоЗатрат2);
		РеквизитыПорядкаАмортизации.Вставить("СубконтоЗатрат3",		СубконтоЗатрат3);
		РеквизитыПорядкаАмортизации.Вставить("СтатьяПрочихРасходов",СтатьяПрочихРасходов);
	КонецЕсли;
	РеквизитыПорядкаАмортизации.Вставить("ПорядокВключенияСтоимостиВСоставРасходовНУ", ПорядокВключенияСтоимостиВСоставРасходовНУ);
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		РеквизитыПорядкаАмортизации.Вставить("НачислятьАмортизациюНУ",								НачислятьАмортизациюНУ);
		РеквизитыПорядкаАмортизации.Вставить("СрокПолезногоИспользованияНУ",						СрокПолезногоИспользованияНУ);
		РеквизитыПорядкаАмортизации.Вставить("СпециальныйКоэффициентНУ",							СпециальныйКоэффициентНУ);
		РеквизитыПорядкаАмортизации.Вставить("ВключитьАмортизационнуюПремиюВСоставРасходов",		ВключитьАмортизационнуюПремиюВСоставРасходов);
		Если ВключитьАмортизационнуюПремиюВСоставРасходов Тогда
			РеквизитыПорядкаАмортизации.Вставить("ПроцентКапитальныхВложенийВключаемыхВРасходыНУ",	ПроцентКапитальныхВложенийВключаемыхВРасходыНУ);
			РеквизитыПорядкаАмортизации.Вставить("СчетУчетаЗатратПоАмортизационнойПремии",			СчетУчетаЗатратПоАмортизационнойПремии);
			РеквизитыПорядкаАмортизации.Вставить("СубконтоПоАмортизационнойПремии1",				СубконтоПоАмортизационнойПремии1);
			РеквизитыПорядкаАмортизации.Вставить("СубконтоПоАмортизационнойПремии2",				СубконтоПоАмортизационнойПремии2);
			РеквизитыПорядкаАмортизации.Вставить("СубконтоПоАмортизационнойПремии3",				СубконтоПоАмортизационнойПремии3);
			РеквизитыПорядкаАмортизации.Вставить("ПодразделениеПоАмортизационнойПремии",			ПодразделениеПоАмортизационнойПремии);
		КонецЕсли;
	КонецЕсли;
	РеквизитыПорядкаАмортизации.Вставить("ПорядокВключенияСтоимостиВСоставРасходовУСН");
	РеквизитыПорядкаАмортизации.Вставить("СрокПолезногоИспользованияУСН");
	
	//КомиссияДляЗаписи = СоставКомиссии.Выгрузить();
	
	ЕстьДанныеТиповойОперации = ЗначениеЗаполнено(ТиповаяОперация);
	
	Если ЕстьДанныеТиповойОперации Тогда
		РеквизитыТиповойОперации = Справочники.ТиповыеОперации.ДополнительныеРеквизитыТиповойОперации(ТиповаяОперация);
		РеквизитыТиповойОперацииДляЗаписи = Новый Структура;
		Для каждого РеквизитТиповойОперации Из РеквизитыТиповойОперации Цикл
			Для Каждого Эл из Элементы Цикл
				Если Прав(Эл.Имя,СтрДлина(РеквизитТиповойОперации.ИмяДляФормулы)) = РеквизитТиповойОперации.ИмяДляФормулы И ТипЗнч(Эл) <>Тип("ГруппаФормы")Тогда 
					РеквизитыТиповойОперацииДляЗаписи.Вставить(РеквизитТиповойОперации.ИмяДляФормулы, ЭтаФорма[Эл.ПутьКДанным]);
				КонецЕсли;  
			КонецЦикла;
		КонецЦикла;
		//ЗаполнитьЗначенияСвойств(РеквизитыТиповойОперацииДляЗаписи, ЭтаФорма);
	КонецЕсли;
	
	СсылкаСоздаваемогоДокумента = ВидСоздаваемогоДокумента.ЗначениеПустойСсылки;
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаСоздаваемогоДокумента);   
	
	НовыйДокумент = МенеджерДокумента.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, РеквизитыШапкиДляЗаписи); 
	

	//НовыйДокумент.СоставКомиссии.Загрузить(КомиссияДляЗаписи);  
	
	НовыйДокумент.Комиссия = Комиссия;
	ЗаполнитьСоставКомиссии(НовыйДокумент);
	
	СозданныеДокументы = Новый Массив;
	РежимЗаписиНовогоДокумента = ?(ПроводитьДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			
	Для каждого НовыйОС Из ТаблицаСозданныхОС Цикл
		
		НоваяСтрока = НовыйДокумент.ОсновныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйОС);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РеквизитыПорядкаАмортизации); 
		НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор); // Новый GUID для каждой строки
		НоваяСтрока.Количество	= 1;
		НоваяСтрока.Сумма		= ПервоначальнаяСтоимость;
		НоваяСтрока.СуммаНУ		= ПервоначальнаяСтоимостьНУ;
		//НоваяСтрока.СчетУчетаОС	= СчетУчета;
		НоваяСтрока.КПС			= КПС;
		НоваяСтрока.СрокПолезногоИспользования = СрокПолезногоИспользования;
		НоваяСтрока.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию = ПринятиеКУчетуОдновременноСВводомВЭксплуатацию;
		НоваяСтрока.ПрослеживаемыйТовар = ПрослеживаемыйТовар;
		НоваяСтрока.СтранаПроисхождения = СтранаПроисхождения;
	
	КонецЦикла;   
	
	// Заполним данные о капитальных вложениях по остаткам.
	НовыйДокумент.КапитальноеВложение = ВнеоборотныйАктив;
	Документы.ПринятиеКУчетуОбъектовОС.ЗаполнитьКапитальныеВложенияПоОстаткам(НовыйДокумент,Истина);
	
	Если ЕстьДанныеТиповойОперации Тогда
		БухгалтерскиеОперацииСервер.ДобавитьДанныеДляПроведения(НовыйДокумент, ТиповаяОперация, РеквизитыТиповойОперацииДляЗаписи, ФормироватьПроводки);
	КонецЕсли;
	
	Если НЕ ЗаписатьНовыйДокумент(НовыйДокумент, РежимЗаписиНовогоДокумента, Отказ) Тогда
		Возврат СозданныеДокументы;
	КонецЕсли;
	СозданныеДокументы.Добавить(НовыйДокумент.Ссылка);
	
	
	
	Возврат СозданныеДокументы;
КонецФункции


&НаСервере
Функция АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ВидСоздаваемогоДокументаПриИзмененииПослеНаСервере()
	Возврат ТипЗнч(ВидСоздаваемогоДокумента.ЗначениеПустойСсылки) = Тип("ДокументСсылка.РешениеОПризнанииОбъектовОС");
КонецФункции


&НаКлиенте
Процедура АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ВидСоздаваемогоДокументаПриИзмененииПосле(Элемент) 
	ЭтоРешениеОПризнанииНФА = АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ВидСоздаваемогоДокументаПриИзмененииПослеНаСервере();
	Элементы.ВидОперации.Видимость = ЭтоРешениеОПризнанииНФА;
	Элементы.ВидПоступления.Видимость = НЕ ЭтоРешениеОПризнанииНФА;
КонецПроцедуры


&НаСервере
Процедура АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	Элементы.ВидОперации.Видимость = Ложь;   
	
	Если РежимВводНаОсновании
		И Параметры.Свойство("ДокументОснование")
		И ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
		ЦМО = Параметры.ДокументОснование.ЦМО;
		Подразделение = Параметры.ДокументОснование.Подразделение; 
	КонецЕсли;     
	
	ИнвентарныйНомерКФО = Перечисления.КВД.Бюджет;
КонецПроцедуры


&НаКлиенте
Процедура АБК_ГрупповойВводОС_РешениеОПризнанииНФА_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Справочник.ПостоянноДействующиеКомиссии.Форма.ФормаВыбора" 
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Комиссия = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставКомиссии(НовыйДокумент) Экспорт
	
	Комиссия = НовыйДокумент.Комиссия;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Комиссия", НовыйДокумент.Комиссия);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставКомиссии.Сотрудник КАК Сотрудник
	|ИЗ
	|	Справочник.ПостоянноДействующиеКомиссии.СоставКомиссии КАК СоставКомиссии
	|ГДЕ
	|	СоставКомиссии.Ссылка = &Комиссия
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставКомиссии.НомерСтроки";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	НовыйДокумент.СоставКомиссии.Загрузить(Результат);
	
КонецПроцедуры

