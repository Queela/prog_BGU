
&НаКлиенте
Процедура АБК_ОтключитьКонтрольПроведенияПосле(Команда)       
	
	ОтключитьКонтрольПроведения = НЕ ОтключитьКонтрольПроведения;
	Элементы.ФормаОтключитьКонтрольПроведения.Пометка = ОтключитьКонтрольПроведения; 
	
КонецПроцедуры

&НаСервере
Процедура АБК_ОбработкаПроверкиЗаполненияНаСервереПеред(Отказ, ПроверяемыеРеквизиты)
	
	Если Отказ ИЛИ ОтключитьКонтрольПроведения Тогда
		Возврат;
	КонецЕсли;  
		
	ПараметрыЗаполнения = РаботаСОбязательствами.ПараметрыПолученияОстатковНФАПоДоговору(Объект);
	ПараметрыЗаполнения.ПолучитьДанныеДоговора = Ложь;
	ПараметрыЗаполнения.ДоговорОснование       = Объект.Договор;
	ПараметрыЗаполнения.ТипыНоменклатуры       = УправлениеМатериальнымиЗапасами.ТипыНоменклатурыМатериальныеЗапасы();
	
	ОстаткиНФАПоДоговору = ОстатокМЗУслугПоДоговоруСЦеной(ПараметрыЗаполнения);
	Остатки_ПФ = ОстаткиНФАПоДоговору.ОстаткиНФА;
	Остатки_ПФ.Свернуть("Номенклатура,Цена","Сумма,Количество"); 
	Остатки_ПФ.Колонки.Добавить("КоличествоИзначально",Новый ОписаниеТипов("Число"));
	Остатки_ПФ.Колонки.Добавить("СуммаИзначально",Новый ОписаниеТипов("Число"));
	Для Каждого Строка из Остатки_ПФ Цикл
		Строка.КоличествоИзначально = Строка.Количество;
		Строка.СуммаИзначально = Строка.Сумма;
	КонецЦикла;
	
	Запрос_СрокиИсполнения = новый Запрос("ВЫБРАТЬ
	|	СрокиИсполненияИСуммыОбязательствСрезПоследних.Обязательство КАК Обязательство,
	|	СрокиИсполненияИСуммыОбязательствСрезПоследних.НачалоДействия КАК НачалоДействия,
	|	СрокиИсполненияИСуммыОбязательствСрезПоследних.ОкончаниеДействия КАК ОкончаниеДействия,
	|	СрокиИсполненияИСуммыОбязательствСрезПоследних.СрокИсполнения КАК СрокИсполнения
	|ИЗ
	|	РегистрСведений.СрокиИсполненияИСуммыОбязательств.СрезПоследних(&ДатаСведений, Обязательство = &Обязательство) КАК СрокиИсполненияИСуммыОбязательствСрезПоследних");
	Запрос_СрокиИсполнения.Параметры.Вставить("ДатаСведений",		Объект.Дата);
	Запрос_СрокиИсполнения.Параметры.Вставить("Обязательство",		Объект.Договор);    
	
	Данные_СрокиИсполнения = Запрос_СрокиИсполнения.Выполнить().Выбрать();  
	
	ИмяСписка = НСтр("ru = 'Материалы'");   
	ДокументОбъект = РеквизитФормыВЗначение("Объект");   
	
	ЗапросПланФинансирования = Новый Запрос("ВЫБРАТЬ
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.Номенклатура КАК Номенклатура,
	|	ПланФинансированияОбязательствСрезПоследних.Количество КАК Количество,
	|	ПланФинансированияОбязательствСрезПоследних.СуммаВВалюте КАК СуммаВВалюте
	|ИЗ
	|	РегистрСведений.ПланФинансированияОбязательств.СрезПоследних(, Обязательство = &Обязательство) КАК
	|		ПланФинансированияОбязательствСрезПоследних
	|ГДЕ
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И (ПланФинансированияОбязательствСрезПоследних.КлючАналитики.ПериодПлана.ДатаОкончания <= &ДатаСведений
	|	ИЛИ &ДатаСведений = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))");    
	ЗапросПланФинансирования.Параметры.Вставить("ДатаСведений",		Объект.Дата);
    ЗапросПланФинансирования.Параметры.Вставить("Обязательство",Объект.Договор);
	
	ТЗ_ЦеныИзначальные = ЗапросПланФинансирования.Выполнить().Выгрузить();
	
	Если Данные_СрокиИсполнения.Следующий() Тогда
		
		СрокИсполненияДоговора = Данные_СрокиИсполнения.СрокИсполнения;	
		
		Если Объект.Дата > СрокИсполненияДоговора Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Срок исполнения договора раньше даты документа", ДокументОбъект, "Дата", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка из Объект.Материалы Цикл
			
			ЦенаТекущая 	= Окр(Строка.Всего / ?(Строка.Количество = 0, 1, Строка.Количество),0);
			
			СтруктураОтбора = Новый Структура("Номенклатура");
			МассивОстатков = Остатки_ПФ.НайтиСтроки(Новый Структура("Номенклатура,Цена",Строка.Номенклатура,ЦенаТекущая));
			
			Если МассивОстатков.Количество() Тогда 
				ОстатокКоличествоИзначально 	= МассивОстатков[0].КоличествоИзначально;
				ОстатокСуммаИзначально 			= МассивОстатков[0].СуммаИзначально;
				ОстатокКоличество 	= МассивОстатков[0].Количество;
				ОстатокСумма 		= МассивОстатков[0].Сумма; 
			Иначе  
				ОстатокКоличествоИзначально 	= 0;
				ОстатокСуммаИзначально 			= 0;
				ОстатокСумма 		= 0;
				ОстатокКоличество 	= 0;
			КонецЕсли;
			
			// Проверка на Количество
			РазницаКоличество = ОстатокКоличество - Строка.Количество;   
			Если РазницаКоличество < 0 Тогда
				
				Префикс = "Материалы[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Количество'"), 
					Строка.НомерСтроки, 
					ИмяСписка,
					СокрЛП(Строка.Номенклатура) +" : Количество в документе по цене "+Формат(ЦенаТекущая,"ЧДЦ=2; ЧГ=")+" превышает количество указанное в договоре: остаток "+Формат(ОстатокКоличество,"ЧДЦ=2; ЧН=; ЧГ=")+" | разница "+Формат(-РазницаКоличество,"ЧГ="));
					
				Поле = Префикс + "Количество";  
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
				
			ИначеЕсли МассивОстатков.Количество() Тогда
				МассивОстатков[0].Количество = МассивОстатков[0].Количество - Строка.Количество; 	
			КонецЕсли;
			
			// Проверка на Сумму
			РазницаСумма = ОстатокСумма - Строка.Всего;   
			Если РазницаСумма < 0 Тогда  
				
				Префикс = "Материалы[" + Формат(Строка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].";   
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Всего'"),
					Строка.НомерСтроки, 
					ИмяСписка, 
					СокрЛП(Строка.Номенклатура) +" : Сумма в документе по цене "+Формат(ЦенаТекущая,"ЧДЦ=2; ЧГ=")+" превышает количество указанное в договоре: остаток "+Формат(ОстатокСумма,"ЧДЦ=2; ЧН=; ЧГ=")+" | разница "+Формат(-РазницаСумма,"ЧДЦ=2; ЧГ="));  
				
				Поле = Префикс + "Всего";                                                                    
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ); 
				
			ИначеЕсли МассивОстатков.Количество() Тогда
				МассивОстатков[0].Сумма = МассивОстатков[0].Сумма - Строка.Всего; 	
			КонецЕсли; 
			
			//// Проверка на Цена  
			//МассивИзначальныхЦен = ТЗ_ЦеныИзначальные.НайтиСтроки(Новый Структура("Номенклатура",Строка.Номенклатура));  
			//Если МассивИзначальныхЦен.Количество() Тогда
			//	
			//	ЦенаИзначальная = МассивИзначальныхЦен[0].СуммаВВалюте / ?(МассивИзначальныхЦен[0].Количество = 0, 1, МассивИзначальныхЦен[0].Количество);
			//	РазницаЦена 	= ЦенаИзначальная - ЦенаТекущая;   
			//	Разница_Модуль = ?(РазницаЦена<0, -РазницаЦена, РазницаЦена);
			//	
			//	Если РазницаЦена <> 0 И Разница_Модуль > 1 Тогда
			//		
			//		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка","Корректность", НСтр("ru = 'Цена'"), 
			//		Строка.НомерСтроки, 
			//		ИмяСписка,
			//		СокрЛП(Строка.Номенклатура) +" : Цена в документе не соответствует цене, указанной в договоре: "+Формат(ЦенаИзначальная,"ЧДЦ=2; ЧГ=")+" | разница "+Формат(-РазницаЦена,"ЧДЦ=2; ЧГ="));
			//		
			//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, , , Отказ);
			//		
			//	ИначеЕсли МассивОстатков.Количество() Тогда
			//		МассивОстатков[0].Количество = МассивОстатков[0].Количество - Строка.Количество; 	
			//	КонецЕсли;	 
			//	
			//КонецЕсли;
			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает остаток МЗ и услуг по договору с учетом предмета договора. При расчете учитывается период плана.
// 
// Параметры:
// 	Параметры - Структура - параметры заполнения.(См. ПараметрыПолученияОстатковНФАПоДоговору())
// Возвращаемое значение:
// 	Неопределено - передан ошибочный договор. Причина ошибки выводится сообщением пользователю.
// 	Структура - Описание:
// * ОстаткиНФА - ТаблицаЗначений - таблица остатков НФА и услуг.
// * ДанныеДоговора - Структура - последние данные договора из регистра накопления СрокиИсполненияИСуммыОбязательств.
&НаСервере
Функция ОстатокМЗУслугПоДоговоруСЦеной(Параметры) Экспорт
	
	ДоговорОснование = Параметры.ДоговорОснование;
	ПервичныйДоговор = Параметры.ПервичныйДоговор;
	Дата             = Параметры.Дата;
	Документ         = Параметры.Документ;
	ТипыНоменклатуры = Параметры.ТипыНоменклатуры;
	
	Если НЕ ЗначениеЗаполнено(ДоговорОснование) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорОснование, "ПометкаУдаления,Представление");
	
	Если РеквизитыДоговора.ПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru='Документ поступления можно ввести только на основании не помеченного на удаление договора'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если Параметры.ПолучитьДанныеДоговора ИЛИ Не ЗначениеЗаполнено(ПервичныйДоговор) Тогда
		ПервичныйДоговор = ПолучитьДоговорПервогоУровня(ДоговорОснование);
	КонецЕсли;
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПервичныйДоговор, "ВидДоговора, УчетПредметаДоговора,"
		+ "ЗаключаетсяПоРезультатамКонкурсныхПроцедур, ПризнакЗавершенияКонкурсныхПроцедур,"
		+ "РезультатЗавершенияКонкурсныхПроцедур");
	
	Если НЕ (РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		И РеквизитыДоговора.УчетПредметаДоговора) Тогда
			
		ТекстОшибки = НСтр("ru='Документ поступления можно ввести только на основании договора с поставщиком с установленным признаком ""Учет предмета договора""'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Если РеквизитыДоговора.ЗаключаетсяПоРезультатамКонкурсныхПроцедур 
		И НЕ РеквизитыДоговора.ПризнакЗавершенияКонкурсныхПроцедур 
		И НЕ РеквизитыДоговора.РезультатЗавершенияКонкурсныхПроцедур = 1 Тогда
			
		ТекстОшибки = НСтр("ru='Документ поступления можно ввести только на основании договора по которому завершены конкурсные процедуры'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Запрос.УстановитьПараметр("Обязательство",   ДоговорОснование);
	Запрос.УстановитьПараметр("СсылкаДокумента", Документ);
	Запрос.УстановитьПараметр("КЭК340",          БухгалтерскийУчетПовтИсп.КЭКПоКоду("340")); 
	Запрос.УстановитьПараметр("ДатаОкончания",   КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипыНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОСГУ.Ссылка КАК ДетальныйКЭК,
	|	&КЭК340 КАК КЭК340
	|ПОМЕСТИТЬ КЭКМЗ
	|ИЗ
	|	Справочник.КОСГУ КАК КОСГУ
	|ГДЕ
	|	КОСГУ.Ссылка В ИЕРАРХИИ(&КЭК340)
	|	И КОСГУ.Ссылка <> &КЭК340";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.Номенклатура КАК Номенклатура,
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.КПС КАК КПС,
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.КФО КАК КФО,
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.КЭК КАК КЭК,
	|	ПланФинансированияОбязательствСрезПоследних.Количество КАК Количество,
	|	ПланФинансированияОбязательствСрезПоследних.СуммаВВалюте КАК СуммаВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(ПланФинансированияОбязательствСрезПоследних.Количество, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(ПланФинансированияОбязательствСрезПоследних.СуммаВВалюте, 0) / ПланФинансированияОбязательствСрезПоследних.Количество
	|		КОНЕЦ КАК ЧИСЛО(15, 0)) КАК Цена
	|ПОМЕСТИТЬ ПланПоступлений
	|ИЗ
	|	РегистрСведений.ПланФинансированияОбязательств.СрезПоследних(, Обязательство = &Обязательство) КАК
	|		ПланФинансированияОбязательствСрезПоследних
	|ГДЕ
	|	ПланФинансированияОбязательствСрезПоследних.КлючАналитики.Номенклатура ССЫЛКА Справочник.Номенклатура
	|	И ПланФинансированияОбязательствСрезПоследних.КлючАналитики.Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры)
	|	И (ПланФинансированияОбязательствСрезПоследних.КлючАналитики.ПериодПлана.ДатаОкончания <= &ДатаОкончания
	|	ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА КЭКМЗ.ДетальныйКЭК ЕСТЬ НЕ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ИспользуютсяДетальныеКЭК
	|ИЗ
	|	ПланПоступлений КАК ПланПоступлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ КЭКМЗ КАК КЭКМЗ
	|		ПО ПланПоступлений.КЭК = КЭКМЗ.ДетальныйКЭК";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ИспользуютсяДетальныеКЭК = Выборка.Следующий() И Выборка.ИспользуютсяДетальныеКЭК = Истина;
	Запрос.УстановитьПараметр("ИспользуютсяДетальныеКЭК", ИспользуютсяДетальныеКЭК);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НеисполненныеОбязательства.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС КАК СтавкаНДС,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).ПрослеживаемыйТовар КАК ПрослеживаемыйТовар,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).СтранаПроисхождения КАК СтранаПроисхождения,
	|	НеисполненныеОбязательства.КПС КАК КПС,
	|	НеисполненныеОбязательства.КФО КАК КФО,
	|	НеисполненныеОбязательства.КЭК КАК КЭК,
	|	СУММА(НеисполненныеОбязательства.Количество) КАК Количество,
	|	СУММА(НеисполненныеОбязательства.Сумма) КАК Сумма,
	|	НеисполненныеОбязательства.Номенклатура.СчетУчета КАК СчетУчетаКод,
	|	НеисполненныеОбязательства.Цена КАК Цена
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланПоступлений.Номенклатура КАК Номенклатура,
	|		ПланПоступлений.КПС КАК КПС,
	|		ПланПоступлений.КФО КАК КФО,
	|		ПланПоступлений.КЭК КАК КЭК,
	|		ПланПоступлений.Количество КАК Количество,
	|		ПланПоступлений.СуммаВВалюте КАК Сумма,
	|		ПланПоступлений.Цена КАК Цена
	|	ИЗ
	|		ПланПоступлений КАК ПланПоступлений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеМЗМатериалы.Номенклатура,
	|		ПоступлениеМЗМатериалы.КПС,
	|		ПоступлениеМЗМатериалы.КФО,
	|		ВЫБОР
	|			КОГДА НЕ &ИспользуютсяДетальныеКЭК
	|					И ПоступлениеМЗМатериалы.КЭК В
	|						(ВЫБРАТЬ
	|							КЭКМЗ.ДетальныйКЭК
	|						ИЗ
	|							КЭКМЗ КАК КЭКМЗ)
	|				ТОГДА &КЭК340
	|			ИНАЧЕ ПоступлениеМЗМатериалы.КЭК
	|		КОНЕЦ,
	|		-ПоступлениеМЗМатериалы.Количество,
	|		-ПоступлениеМЗМатериалы.Всего,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПоступлениеМЗМатериалы.Количество, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПоступлениеМЗМатериалы.Всего, 0) / ПоступлениеМЗМатериалы.Количество
	|			КОНЕЦ КАК ЧИСЛО(15, 0))
	|	ИЗ
	|		Документ.ПоступлениеМЗ.Материалы КАК ПоступлениеМЗМатериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналПроводокЕПСБУ КАК ДвиженияДокумента
	|		ПО ПоступлениеМЗМатериалы.Ссылка = ДвиженияДокумента.Регистратор
	|		И ДвиженияДокумента.НомерСтроки = 1
	|	ГДЕ
	|		ПоступлениеМЗМатериалы.Ссылка.Договор В ИЕРАРХИИ(&Обязательство)
	|		И ПоступлениеМЗМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПоступлениеМЗМатериалы.Ссылка <> &СсылкаДокумента
	|		И НЕ ПоступлениеМЗМатериалы.Ссылка.ДокументОснование ССЫЛКА Документ.ПоступлениеМЗВПути
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеМЗВПутиМатериалы.Номенклатура,
	|		ПоступлениеМЗВПутиМатериалы.КПС,
	|		ПоступлениеМЗВПутиМатериалы.КФО,
	|		ВЫБОР
	|			КОГДА НЕ &ИспользуютсяДетальныеКЭК
	|					И ПоступлениеМЗВПутиМатериалы.КЭК В
	|						(ВЫБРАТЬ
	|							КЭКМЗ.ДетальныйКЭК
	|						ИЗ
	|							КЭКМЗ КАК КЭКМЗ)
	|				ТОГДА &КЭК340
	|			ИНАЧЕ ПоступлениеМЗВПутиМатериалы.КЭК
	|		КОНЕЦ,
	|		-ПоступлениеМЗВПутиМатериалы.Количество,
	|		-ПоступлениеМЗВПутиМатериалы.Всего,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПоступлениеМЗВПутиМатериалы.Количество, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПоступлениеМЗВПутиМатериалы.Всего, 0) / ПоступлениеМЗВПутиМатериалы.Количество
	|			КОНЕЦ КАК ЧИСЛО(15, 0))
	|	ИЗ
	|		Документ.ПоступлениеМЗВПути.Материалы КАК ПоступлениеМЗВПутиМатериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналПроводокЕПСБУ КАК ДвиженияДокумента
	|		ПО ПоступлениеМЗВПутиМатериалы.Ссылка = ДвиженияДокумента.Регистратор
	|		И ДвиженияДокумента.НомерСтроки = 1
	|	ГДЕ
	|		ПоступлениеМЗВПутиМатериалы.Ссылка.Договор В ИЕРАРХИИ(&Обязательство)
	|		И ПоступлениеМЗВПутиМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПоступлениеМЗВПутиМатериалы.Ссылка <> &СсылкаДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеУслугиИРаботы.Номенклатура,
	|		ПоступлениеУслугиИРаботы.КПС,
	|		ПоступлениеУслугиИРаботы.КФО,
	|		ПоступлениеУслугиИРаботы.КЭК,
	|		-ПоступлениеУслугиИРаботы.Количество,
	|		-ПоступлениеУслугиИРаботы.Всего,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА ЕСТЬNULL(ПоступлениеУслугиИРаботы.Количество, 0) = 0
	|					ТОГДА 0
	|				ИНАЧЕ ЕСТЬNULL(ПоступлениеУслугиИРаботы.Всего, 0) / ПоступлениеУслугиИРаботы.Количество
	|			КОНЕЦ КАК ЧИСЛО(15, 0))
	|	ИЗ
	|		Документ.ПоступлениеУслугРабот.УслугиИРаботы КАК ПоступлениеУслугиИРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.ЖурналПроводокЕПСБУ КАК ДвиженияДокумента
	|		ПО ПоступлениеУслугиИРаботы.Ссылка = ДвиженияДокумента.Регистратор
	|		И ДвиженияДокумента.НомерСтроки = 1
	|	ГДЕ
	|		ПоступлениеУслугиИРаботы.Ссылка.Договор В ИЕРАРХИИ(&Обязательство)
	|		И ПоступлениеУслугиИРаботы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|		И ПоступлениеУслугиИРаботы.Ссылка <> &СсылкаДокумента) КАК НеисполненныеОбязательства
	|
	|СГРУППИРОВАТЬ ПО
	|	НеисполненныеОбязательства.Номенклатура,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).СтавкаНДС,
	|	ВЫРАЗИТЬ(НеисполненныеОбязательства.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения,
	|	НеисполненныеОбязательства.КПС,
	|	НеисполненныеОбязательства.КФО,
	|	НеисполненныеОбязательства.КЭК,
	|	НеисполненныеОбязательства.Номенклатура.СчетУчета,
	|	НеисполненныеОбязательства.Цена
	|
	|ИМЕЮЩИЕ
	|	СУММА(НеисполненныеОбязательства.Количество) > 0";
	
	Если Параметры.ПолучитьДанныеДоговора Тогда
		Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
		"ВЫБРАТЬ
		|	СрокиИсполненияИСуммыОбязательствСрезПоследних.Обязательство.Организация КАК Организация,
		|	СрокиИсполненияИСуммыОбязательствСрезПоследних.Обязательство.Контрагент КАК Контрагент,
		|	СрокиИсполненияИСуммыОбязательствСрезПоследних.Обязательство КАК ДокументОснование,
		|	СрокиИсполненияИСуммыОбязательствСрезПоследних.ИФО,
		|	СрокиИсполненияИСуммыОбязательствСрезПоследних.ВалютаРасчетов КАК ВалютаДокумента
		|ИЗ
		|	РегистрСведений.СрокиИсполненияИСуммыОбязательств.СрезПоследних(, Обязательство = &Обязательство) КАК
		|		СрокиИсполненияИСуммыОбязательствСрезПоследних";
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Если Параметры.ПолучитьДанныеДоговора Тогда
		ИндексДанныеДоговора = РезультатЗапроса.ВГраница();
		ДанныеДоговора = РезультатЗапроса[ИндексДанныеДоговора].Выгрузить();
		Результат.Вставить("ДанныеДоговора",
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(?(ДанныеДоговора.Количество() > 0,ДанныеДоговора[0], ДанныеДоговора.Добавить())));
		ИндекстОстаткиНФА = ИндексДанныеДоговора - 1;
	Иначе
		ИндекстОстаткиНФА = РезультатЗапроса.ВГраница();
	КонецЕсли;
	
	Результат.Вставить("ОстаткиНФА", РезультатЗапроса[ИндекстОстаткиНФА].Выгрузить());
	
	Возврат Результат;
	
КонецФункции     

&НаСервере
Функция ПолучитьДоговорПервогоУровня(Договор) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("Ссылка", Договор); 
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Выборка.Следующий();
	
	Если Выборка.Ссылка.Пустая() Тогда
		
		Возврат Договор;
		
	Иначе
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;	 
	
КонецФункции	

