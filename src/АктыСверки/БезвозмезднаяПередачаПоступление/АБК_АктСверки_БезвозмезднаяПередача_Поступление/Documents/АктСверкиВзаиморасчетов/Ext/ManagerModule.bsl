
&ИзменениеИКонтроль("ПолучитьДанныеБухУчета")
Процедура АБК_ПолучитьДанныеБухУчета(ПараметрыПроцедуры, АдресРезультата)

	УстановитьПривилегированныйРежим(Истина);

	ПараметрыЗаполнения = ПолучитьПараметрыЗаполнения(ПараметрыПроцедуры);

	РезультатыСверки = ВыполнитьСтандартнуюСверку(ПараметрыЗаполнения); 
	#Вставка
	АБК_ДополнитьРезультатСверкиПоОСиМЗ(РезультатыСверки,ПараметрыЗаполнения);
	#КонецВставки

	Если ПараметрыПроцедуры.ШапкаДокумента.ЭтоЭлектронныйДокумент Тогда
		РезультатыСверки.Вставить("Успешно", Ложь);
		РезультатыСверки.Вставить("ЗаполнятьДанныеКонтрагента", ПараметрыПроцедуры.ЗаполнятьДанныеКонтрагента);
	КонецЕсли;

	СверкаПоДолгосрочнымДоговорам = ВыполнитьСверкуПоДолгосрочнымДоговорам(ПараметрыЗаполнения);

	// Добавляем обороты
	ТаблицаПриемник = РезультатыСверки.Обороты;
	ТаблицаИсточник = СверкаПоДолгосрочнымДоговорам.Обороты;
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	ТаблицаПоДаннымОрганизации = РезультатыСверки.Обороты;
	
	#Удаление
	СвернутьОбороты(ТаблицаПоДаннымОрганизации, ПараметрыПроцедуры);
	#КонецУдаления

	УдалитьСтрокиСНулевымиСуммами(ТаблицаПоДаннымОрганизации);

	// Добавляем остатки на начало
	ТаблицаПриемник = РезультатыСверки.ОстаткиНаНачало;
	ТаблицаИсточник = СверкаПоДолгосрочнымДоговорам.ОстаткиНаНачало;
	Для Каждого СтрокаТаблицы Из ТаблицаИсточник Цикл
		НоваяСтрока = ТаблицаПриемник.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	РезультатыСверки.ОстаткиНаНачало.Свернуть("Организация,Договор", "ОстатокНаНачало");

	Если ПараметрыПроцедуры.ШапкаДокумента.ЭтоЭлектронныйДокумент Тогда
		РезультатыСверки.Вставить("ОстатокНаНачало", РезультатыСверки.ОстаткиНаНачало.Итог("ОстатокНаНачало"));
	КонецЕсли;

	// Заполним представления документов в таблице оборотов

	ЗаполнитьПредставленияДокументов(ТаблицаПоДаннымОрганизации, ПараметрыПроцедуры, ПараметрыЗаполнения);

	РезультатыСверки.Вставить("ОшибкиНастроекПредставленияДокументаДлительныеДоговоры", ПараметрыПроцедуры.ОшибкиНастроекПредставленияДокументаДлительныеДоговоры);

	ТаблицаПоДаннымОрганизации.Сортировать("Дата Возр, Представление Возр");

	Если ПараметрыПроцедуры.ШапкаДокумента.ЭтоЭлектронныйДокумент Тогда
		РезультатыСверки.Вставить("ПоДаннымОрганизации", ТаблицаПоДаннымОрганизации);

		Если ПараметрыПроцедуры.ЗаполнятьДанныеКонтрагента Тогда
			РезультатыСверки.Вставить("ПоДаннымКонтрагента", ТаблицаПоДаннымКонтрагента(ТаблицаПоДаннымОрганизации));
		КонецЕсли;

		РезультатыСверки.Успешно = Истина;

	Иначе
		ТаблицаПоДаннымОрганизации.Колонки.Добавить("ДатаУчетногоДокумента", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));

		ЗаполнитьДатыУчетныхДокументов(, ТаблицаПоДаннымОрганизации);
	КонецЕсли;

	ЗаполнитьКолонкуОтветственныйВТаблице(ТаблицаПоДаннымОрганизации);

	ПоместитьВоВременноеХранилище(РезультатыСверки, АдресРезультата);

КонецПроцедуры

&НаСервере
Процедура АБК_ДополнитьРезультатСверкиПоОСиМЗ(РезультатыСверки,Параметры)
	
	#Область ОписаниеДокументовЗаполнения

	ДокументыЗаполнения = Новый Соответствие;
	
	#Область МЗ
	// Накладная на отпуск материалов
	МассивОпераций_НакладнаяНаОтпускМатериалов = Новый Массив;
	МассивОпераций_НакладнаяНаОтпускМатериалов.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_БезвозмезднаяПередача);
	МассивОпераций_НакладнаяНаОтпускМатериалов.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_БезвозмезднаяПередачаВложений1);
	МассивОпераций_НакладнаяНаОтпускМатериалов.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_ПередачаВПользование);	
	ДокументыЗаполнения.Вставить("НакладнаяНаОтпускМ15", МассивОпераций_НакладнаяНаОтпускМатериалов);   
	
	// ПоступлениеМЗ
	МассивОпераций_ПоступлениеМЗ = Новый Массив;
	МассивОпераций_ПоступлениеМЗ.Добавить(Справочники.ТиповыеОперации.ПоступлениеМЗ_БезвозмездноеВнутриведомственное);
	МассивОпераций_ПоступлениеМЗ.Добавить(Справочники.ТиповыеОперации.ПоступлениеМЗ_БезвозмездноеПрочее);  
	МассивОпераций_ПоступлениеМЗ.Добавить(Справочники.ТиповыеОперации.ПоступлениеМЗ_Резерв_Покупка);
	ДокументыЗаполнения.Вставить("ПоступлениеМЗ", МассивОпераций_ПоступлениеМЗ);
	
	#КонецОбласти
	
	#Область ОС
	
	// Передача Объектов ОС
	МассивОпераций_ПредачаОбъектовОС = Новый Массив;
	МассивОпераций_ПредачаОбъектовОС.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередачаНФА);
	МассивОпераций_ПредачаОбъектовОС.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередача_Организациям);
	МассивОпераций_ПредачаОбъектовОС.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередача);   
	МассивОпераций_ПредачаОбъектовОС.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередача_Межбюджетная);
	ДокументыЗаполнения.Вставить("ПередачаОбъектовОС", МассивОпераций_ПредачаОбъектовОС); 
	
	// ПоступлениеОС
	МассивОпераций_ПоступлениеОС = Новый Массив;
	МассивОпераций_ПоступлениеОС.Добавить(Справочники.ТиповыеОперации.ПоступлениеОС_БезвозмездноеПоступлениеВнутриведомственное);
	МассивОпераций_ПоступлениеОС.Добавить(Справочники.ТиповыеОперации.ПоступлениеОС_БезвозмездноеПоступлениеПрочее);
	ДокументыЗаполнения.Вставить("ПоступлениеОС", МассивОпераций_ПоступлениеОС);
	
	// ПринятиеКУчетуОбъектовОС
	МассивОпераций_ПринятиеКУчетуОбъектовОС = Новый Массив;
	МассивОпераций_ПринятиеКУчетуОбъектовОС.Добавить(Справочники.ТиповыеОперации.ПринятиеКУчетуОбъектовОС_БезвозмездноеПолучениеПрочее);
	ДокументыЗаполнения.Вставить("ПринятиеКУчетуОбъектовОС", МассивОпераций_ПринятиеКУчетуОбъектовОС);      
	
	// РешениеОПризнанииОбъектовОС
	МассивОпераций_РешениеОПризнанииОбъектовОС = Новый Массив;
	МассивОпераций_РешениеОПризнанииОбъектовОС.Добавить(Справочники.ТиповыеОперации.РешениеОПризнанииОбъектовОС_БезвозмездноеПоступление);
	ДокументыЗаполнения.Вставить("РешениеОПризнанииОбъектовОС", МассивОпераций_РешениеОПризнанииОбъектовОС);
	
	#КонецОбласти
	
	#Область ИК
	// Принятие к учету объектов ИК 
	МассивОпераций_ПринятиеКУчетуОбъектовИК = Новый Массив;                                         
	МассивОпераций_ПринятиеКУчетуОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПринятиеКУчетуОбъектовИК_Приобретение);
	МассивОпераций_ПринятиеКУчетуОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПринятиеКУчетуОбъектовИК_ПоступлениеОтДругихОрганизаций);
	ДокументыЗаполнения.Вставить("ПринятиеКУчетуОбъектовИК", МассивОпераций_ПринятиеКУчетуОбъектовИК);
	
	// Передача Объектов ИК
	МассивОпераций_ПредачаОбъектовИК = Новый Массив;
	МассивОпераций_ПредачаОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередачаНФА);
	МассивОпераций_ПредачаОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередача);
	МассивОпераций_ПредачаОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередачаНФА_Внутриведомственная);
	МассивОпераций_ПредачаОбъектовИК.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередача);
	ДокументыЗаполнения.Вставить("ПередачаОбъектовИК", МассивОпераций_ПредачаОбъектовИК);
	
	// Накладная на отпуск ИК
	МассивОпераций_Операция_НакладнаяНаОтпускИК = Новый Массив;
	МассивОпераций_Операция_НакладнаяНаОтпускИК.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускИК_БезвозмезднаяПередача);
	МассивОпераций_Операция_НакладнаяНаОтпускИК.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускИК_ПередачаПоДоговоруБезвозмездногоПользования);
	ДокументыЗаполнения.Вставить("НакладнаяНаОтпускИК", МассивОпераций_Операция_НакладнаяНаОтпускИК);	
	
	#КонецОбласти
	
	#КонецОбласти
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ДатаНачала",					Параметры.ДатаНачалаОбороты.Значение);
	Запрос.Параметры.Вставить("ДатаОкончания",				Параметры.ДатаОкончанияОбороты.Значение);
	Запрос.Параметры.Вставить("Организация",				Параметры.Организация);
	Запрос.Параметры.Вставить("Контрагент",					Параметры.Контрагент);	     
	
	Запрос.Текст = ПолучитьТекстЗапросаПоДокументамЗаполнения(ДокументыЗаполнения);
	ДополнитьПараметрыПользовательскимиТиповыми(Запрос.Параметры, ДокументыЗаполнения);
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ВТ_ДокументыЗаПериод.Ссылка КАК Ссылка,
	|	ВТ_ДокументыЗаПериод.Контрагент КАК Контрагент,
	|	ВТ_ДокументыЗаПериод.Договор КАК Договор,
	|	ВТ_ДокументыЗаПериод.Организация КАК Организация,
	|	ВТ_ДокументыЗаПериод.Дата КАК Дата,
	|	ВТ_ДокументыЗаПериод.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.НомерПервичногоДокумента КАК НомерПервичногоДокумента
	|ПОМЕСТИТЬ ВТ_ДокументыСоСторно
	|ИЗ
	|	ВТ_ДокументыЗаПериод КАК ВТ_ДокументыЗаПериод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сторно.Ссылка,
	|	ВТ_ДокументыЗаПериод.Контрагент,
	|	ВТ_ДокументыЗаПериод.Договор,
	|	ВТ_ДокументыЗаПериод.Организация,
	|	ВТ_ДокументыЗаПериод.Дата,
	|	ВТ_ДокументыЗаПериод.ВидПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.ДатаПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.НомерПервичногоДокумента
	|ИЗ
	|	Документ.Сторно КАК Сторно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыЗаПериод КАК ВТ_ДокументыЗаПериод
	|		ПО (ВТ_ДокументыЗаПериод.Ссылка = Сторно.ДокументОснование)" 
	+ ОбщегоНазначения.РазделительПакетаЗапросов() +  
	"ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУОбороты.Регистратор КАК Регистратор,
	|	ЖурналПроводокЕПСБУОбороты.СуммаОборот КАК СуммаОборот,
	|	ЖурналПроводокЕПСБУОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ЖурналПроводокЕПСБУОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_ОборотыЗаПериод
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&СчетаМЗиОС),
	|			,
	|			&УсловиеОрганизация
	|				И &УсловиеИФО
	|				И &УсловиеКФО
	|				И &УсловиеПодразделение,
	|			,
	|			) КАК ЖурналПроводокЕПСБУОбороты"
	+ ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ЖурналПроводокЕПСБУОбороты.Регистратор КАК Регистратор,
	|	ЖурналПроводокЕПСБУОбороты.СуммаОборотДт КАК СуммаОборотДт,
	|	ЖурналПроводокЕПСБУОбороты.СуммаОборотКт КАК СуммаОборотКт
	|ПОМЕСТИТЬ ВТ_ОборотыАмортизация
	|ИЗ
	|	РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Регистратор,
	|			Счет В (&СчетаАмортизации),
	|			,
	|			&УсловиеОрганизация
	|				И &УсловиеИФО
	|				И &УсловиеКФО
	|				И &УсловиеПодразделение,
	|			,
	|			) КАК ЖурналПроводокЕПСБУОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыЗаПериод.Ссылка КАК Документ,
	|	ВТ_ОборотыЗаПериод.СуммаОборотДт + ЕСТЬNULL(ВТ_ОборотыАмортизация.СуммаОборотДт, 0) КАК Дебет,
	|	ВТ_ДокументыЗаПериод.Контрагент КАК Контрагент,
	|	ВТ_ДокументыЗаПериод.Договор КАК Договор,
	|	ВТ_ДокументыЗаПериод.ВидПервичногоДокумента КАК ВидПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	ВТ_ДокументыЗаПериод.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	ВТ_ОборотыЗаПериод.СуммаОборотКт + ЕСТЬNULL(ВТ_ОборотыАмортизация.СуммаОборотКт, 0) КАК Кредит,
	|	ВТ_ДокументыЗаПериод.Организация КАК Организация,
	|	ВТ_ДокументыЗаПериод.Дата КАК Дата
	|ИЗ
	|	ВТ_ОборотыЗаПериод КАК ВТ_ОборотыЗаПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыСоСторно КАК ВТ_ДокументыЗаПериод
	|		ПО (ВТ_ДокументыЗаПериод.Ссылка = ВТ_ОборотыЗаПериод.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыАмортизация КАК ВТ_ОборотыАмортизация
	|		ПО ВТ_ОборотыЗаПериод.Регистратор = ВТ_ОборотыАмортизация.Регистратор";

	УстановитьОсновныеПараметрыЗапроса(Запрос, Параметры);
	
	ВыборкаДокументов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента из ВыборкаДокументов Цикл
		НовСтрСверки = РезультатыСверки.Обороты.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрСверки,СтрокаДокумента);
		НовСтрСверки.ВидДокумента = ТипЗнч(НовСтрСверки.Документ);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПоДокументамЗаполнения(ДокументыЗаполнения)
	
	МассивПолейВыбора = СтрРазделить("Ссылка, Контрагент, Договор, Организация, Дата, ВидПервичногоДокумента, ДатаПервичногоДокумента, НомерПервичногоДокумента", ", ", Ложь);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	
	Для Каждого НастройкаЗаполнения из ДокументыЗаполнения Цикл
		
		ОператорВыбора = ЗапросВыбора.Операторы.Добавить();
		
		ИсточникДокумент = ОператорВыбора.Источники.Добавить("Документ."+НастройкаЗаполнения.Ключ);
		
		ИсточникОперацииДокументов = ОператорВыбора.Источники.Добавить("РегистрСведений.ОперацииДокументов");
		ИсточникОперацииДокументов.Соединения.Добавить(ИсточникДокумент, 
			ИсточникДокумент.Источник.Псевдоним+".Ссылка = "+ИсточникОперацииДокументов.Источник.Псевдоним+".Документ"+
			" И (" + ИсточникОперацииДокументов.Источник.Псевдоним+".Операция В (&МассивОпераций_"+ НастройкаЗаполнения.Ключ +") 
			|	ИЛИ " + ИсточникДокумент.Источник.Псевдоним + ".Комментарий ПОДОБНО ""%Попадает в акт сверки%"")");
		// По дефолту схема ставит правое соединение, меняем обратно на левое) 
		ИсточникОперацииДокументов.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;	
		
		Для Каждого ПолеВыбора из МассивПолейВыбора Цикл
			Если ИсточникДокумент.Источник.ДоступныеПоля.Найти(ПолеВыбора) <> Неопределено Тогда
				ОператорВыбора.ВыбираемыеПоля.Добавить(ИсточникДокумент.Источник.Псевдоним + "." + ПолеВыбора);	
			КонецЕсли;
		КонецЦикла;
		
		ОператорВыбора.Отбор.Добавить(ИсточникДокумент.Источник.Псевдоним+".Проведен");
		ОператорВыбора.Отбор.Добавить(ИсточникДокумент.Источник.Псевдоним+".Организация = &Организация"); 
		ОператорВыбора.Отбор.Добавить(ИсточникДокумент.Источник.Псевдоним+".Дата Между &ДатаНачала И &ДатаОкончания");
		ОператорВыбора.Отбор.Добавить(ИсточникДокумент.Источник.Псевдоним+".Контрагент = &Контрагент");
		ОператорВыбора.Отбор.Добавить("НЕ "+ИсточникОперацииДокументов.Источник.Псевдоним+".Операция ЕСТЬ NULL");
			
	КонецЦикла;
	
	ЗапросВыбора.Операторы.Удалить(0); 
	ЗапросВыбора.ТаблицаДляПомещения = "ВТ_ДокументыЗаПериод";
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецФункции

Процедура ДополнитьПараметрыПользовательскимиТиповыми(ПараметрыЗапроса, ДокументыЗаполнения)
	
	Для Каждого НастройкаЗаполнения из ДокументыЗаполнения Цикл
		ПараметрыЗапроса.Вставить("МассивОпераций_"+НастройкаЗаполнения.Ключ, НастройкаЗаполнения.Значение);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеТиповыеОперации.ТиповаяОперация КАК ТиповаяОперация,
	|	СвязанныеТиповыеОперации.ВедущаяТиповаяОперация КАК ВедущаяТиповаяОперация
	|ИЗ
	|	РегистрСведений.СвязанныеТиповыеОперации КАК СвязанныеТиповыеОперации
	|ГДЕ
	|	&УсловиеТиповые";   
	
	Для Каждого КлючИзначение из ПараметрыЗапроса Цикл
		Если СтрНайти(КлючИзначение.Ключ,"МассивОпераций_") Тогда
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТиповые","&УсловиеТиповые 
			|	ИЛИ СвязанныеТиповыеОперации.ВедущаяТиповаяОперация В (&"+КлючИзначение.Ключ+")");
			Запрос.Параметры.Вставить(КлючИзначение.Ключ, КлючИзначение.Значение);
			
		КонецЕсли;
	КонецЦикла; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеТиповые","ЛОЖЬ"); 
	
	ТаблицаСвязанныхТиповыхОпераций = Запрос.Выполнить().Выгрузить();
	
	// Поиск пользовательских типовых операций со схожим наименованием
	Для Каждого КлючИзначение из ПараметрыЗапроса Цикл
		Если СтрНайти(КлючИзначение.Ключ,"МассивОпераций_") Тогда
			
			ИмяМД = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИзначение.Ключ, "МассивОпераций_")[1]; 
			ИдентификаторДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ."+ИмяМД);	
			
			МассивСвязанныхТиповых_ПоДокументу = Новый Массив; 
			МассивНаименованийТиповых_ПоДокументу = Новый Массив;  
			
			Для Каждого СтандартнаяТиповаяОперация из КлючИзначение.Значение Цикл
				
				МассивСвязанныхТиповых_ПоОперации_Строки = ТаблицаСвязанныхТиповыхОпераций.НайтиСтроки(Новый Структура("ВедущаяТиповаяОперация",СтандартнаяТиповаяОперация)); 	
				МассивСвязанныхТиповых_ПоОперации = ТаблицаСвязанныхТиповыхОпераций.Скопировать(МассивСвязанныхТиповых_ПоОперации_Строки).ВыгрузитьКолонку("ТиповаяОперация");	
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязанныхТиповых_ПоДокументу, МассивСвязанныхТиповых_ПоОперации, Истина);	
				
				МассивНаименованийТиповых_ПоДокументу.Добавить(СтандартнаяТиповаяОперация.Наименование);	
				
			КонецЦикла;  
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ТиповыеОперации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ТиповыеОперации КАК ТиповыеОперации
			|ГДЕ
			|	НЕ ТиповыеОперации.ПометкаУдаления
			|	И НЕ ТиповыеОперации.НеИспользуется
			|	И (&УсловиеПоНаименованию)
			|	И ТиповыеОперации.ИдентификаторДокумента = &ИдентификаторДокумента
			|	И НЕ ТиповыеОперации.Наименование ПОДОБНО ""(устарела """); 
			Запрос.Параметры.Вставить("ИдентификаторДокумента", ИдентификаторДокумента); 
			
			i=1;
			Для Каждого НаименованиеТиповой из МассивНаименованийТиповых_ПоДокументу Цикл  
				
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНаименованию", "&УсловиеПоНаименованию
				|	ИЛИ ТиповыеОперации.Наименование ПОДОБНО &Наименование_"+i);	 
				Запрос.Параметры.Вставить("Наименование_"+i, "%"+НаименованиеТиповой+"%");
				i = i + 1;   
				
			КонецЦикла;
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПоНаименованию","ЛОЖЬ"); 
			
			МассивТиповых_ПоНаименованию = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСвязанныхТиповых_ПоДокументу, МассивТиповых_ПоНаименованию, Истина); 
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КлючИЗначение.Значение, МассивСвязанныхТиповых_ПоДокументу, Истина);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОсновныеПараметрыЗапроса(Запрос, Параметры)

	// Договора
	Если Параметры.ИспользоватьОтборПоДоговору Тогда
		Запрос.Текст = Запрос.Текст + " И ВТ_ДокументыЗаПериод.Договор В(&СписокДоговоров)";
		Запрос.Параметры.Вставить("СписокДоговоров",Параметры.ДоговорыСКонтрагентом.ВсеДоговоры);
	КонецЕсли; 
	
	// Подразделение
	Если Параметры.ИспользоватьОтборПоПодразделению Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеПодразделение","Подразделение В(&Подразделение)");
		Запрос.Параметры.Вставить("Подразделение",Параметры.Подразделение);
	Иначе
		Запрос.Параметры.Вставить("УсловиеПодразделение",Истина);	
	КонецЕсли;
	
	// Организация
	Если Параметры.ИспользоватьОтборПоОрганизации Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеОрганизация","Организация В(&Организация)");
		Запрос.Параметры.Вставить("Организация",Параметры.Организация);
	Иначе
		Запрос.Параметры.Вставить("УсловиеОрганизация",Истина);	
	КонецЕсли;
	
	// ИФО
	Если Параметры.ИспользоватьОтборПоИФО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеИФО","ИФО В(&ИФО)");
		Запрос.Параметры.Вставить("ИФО",Параметры.ИФО);
	Иначе
		Запрос.Параметры.Вставить("УсловиеИФО",Истина);	
	КонецЕсли;
	
	// КФО
	Если Параметры.ИспользоватьОтборПоКФО Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&УсловиеКФО","КФО В(&КФО)");
		Запрос.Параметры.Вставить("КФО",Параметры.КФО);
	Иначе
		Запрос.Параметры.Вставить("УсловиеКФО",Истина);	
	КонецЕсли;
	
	// Счета учета
	МассивСчетов = Новый Массив;
	МассивСчетовАмортизация = Новый Массив;    
	
	МассивДопустимыхСчетов = БухгалтерскийУчет.СписокСчетов("101.00,103.00,105.00,106.00,108.00,111.00", Параметры.ДатаОкончанияОбороты.Значение, Ложь, Параметры.Организация);
	МассивДопустимыхСчетов_Амортизация = БухгалтерскийУчет.СписокСчетов("104.00", Параметры.ДатаОкончанияОбороты.Значение, Ложь, Параметры.Организация);
	
	МассивИсключаемыхСчетов = БухгалтерскийУчет.СписокСчетов(Параметры.СчетаСтандартнойСверки.КодыИсключаемыхСчетов, Параметры.ДатаОкончанияОбороты.Значение, Ложь, Параметры.Организация);
	
	Для Каждого Счет из МассивИсключаемыхСчетов Цикл    
		Если МассивДопустимыхСчетов.Найти(Счет)  <> Неопределено Тогда 
			МассивСчетов.Добавить(Счет);
		ИначеЕсли МассивДопустимыхСчетов_Амортизация.Найти(Счет) <> Неопределено Тогда
			МассивСчетовАмортизация.Добавить(Счет);
		КонецЕсли;
	КонецЦикла; 
	
	Запрос.Параметры.Вставить("СчетаМЗиОС",МассивСчетов);
	Запрос.Параметры.Вставить("СчетаАмортизации",МассивСчетовАмортизация);
	
КонецПроцедуры


