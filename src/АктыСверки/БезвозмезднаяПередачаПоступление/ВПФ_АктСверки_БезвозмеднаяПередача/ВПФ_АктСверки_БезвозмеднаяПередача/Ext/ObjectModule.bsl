 Функция СведенияОВнешнейОбработке() Экспорт
	 
	 //Инициализируем структуру с параметрами регистрации
	 
	 //Определяем список объектов, вызывающих обработку
	 ОбъектыНазначенияФормы = Новый Массив;
	 Для каждого Тип Из ЭтотОбъект.Метаданные().Реквизиты.СсылкаНаОбъект.Тип.Типы() Цикл
		 ОбъектыНазначенияФормы.Добавить(Метаданные.НайтиПоТипу(Тип).ПолноеИмя());	
	 КонецЦикла; 
	 
	 
	 ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	 ПараметрыРегистрации.Версия = "100.36.00";
	 ПараметрыРегистрации.Информация =  ЭтотОбъект.Метаданные().Представление();
	 
	 
	 //Определяем команды для печати формы
	 
	 ТаблицаКоманд = ПолучитьТаблицуКоманд();

	 ДобавитьКоманду(ТаблицаКоманд,
	 "" + УправлениеПечатьюБГУ.ПредставлениеКомандыПечати(НСтр("ru = 'Акт сверки взаимных расчетов без сальдо безвозмездных передач'")), // Представление команды в пользовательском интерфейсе
	 "АктСверки",				// Уникальный идентификатор команды
	 );       
	 ДобавитьКоманду(ТаблицаКоманд,
	 "" + УправлениеПечатьюБГУ.ПредставлениеКомандыПечати(НСтр("ru = 'Акт сверки взаимных расчетов без сальдо безвозмездных передач (с оборотами за период)'")), // Представление команды в пользовательском интерфейсе
	 "АктСверкиСОборотами",				// Уникальный идентификатор команды
	 );       

	 ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	 
	 Возврат ПараметрыРегистрации;
	 
 КонецФункции
 
 Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")
	 
	 Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		 ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		 ОбъектыНазначенияФормы = Новый Массив;
		 ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	 КонецЕсли; 
	 
	 ПараметрыРегистрации = Новый Структура;
	 ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	 ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	 ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	 
	 Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		 НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	 КонецЕсли; 
	 ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	 
	 Если Не ЗначениеЗаполнено(Информация) Тогда
		 Информация = ЭтотОбъект.Метаданные().Комментарий;
	 КонецЕсли; 
	 ПараметрыРегистрации.Вставить("Информация", Информация);
	 
	 ПараметрыРегистрации.Вставить("Версия", Версия);
	 
	 Возврат ПараметрыРегистрации;
	 
 КонецФункции
 
 Функция ПолучитьТаблицуКоманд()
	 
	 Команды = Новый ТаблицаЗначений;
	 
	 //Представление команды в пользовательском интерфейсе
	 Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	 
	 //Уникальный идентификатор команды или имя макета печати
	 Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	 
	 //Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	 // "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	 // "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	 // "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	 Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	 
	 //Показывать оповещение.
	 //Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	 //Имеет смысл только при запуске обработки без открытия формы
	 Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	 
	 //Дополнительный модификатор команды. 
	 //Используется для дополнительных обработок печатных форм на основе табличных макетов.
	 //Для таких команд должен содержать строку ПечатьMXL
	 Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	 
	 Возврат Команды;
	 
 КонецФункции
 
 Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	 
	 НоваяКоманда = ТаблицаКоманд.Добавить();
	 НоваяКоманда.Представление = Представление;
	 НоваяКоманда.Идентификатор = Идентификатор;
	 НоваяКоманда.Использование = Использование;
	 НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	 НоваяКоманда.Модификатор = Модификатор;
	 
 КонецПроцедуры
 
 Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	 
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки") Тогда
		СтруктураПараметровОбработчика = Новый Структура();
		СтруктураПараметровОбработчика.Вставить("МассивОбъектов",	МассивОбъектов);
		//СтруктураПараметровОбработчика.Вставить("ПараметрыПечати",	ПараметрыПечати);
		СтруктураПараметровОбработчика.Вставить("ОбъектыПечати",	ОбъектыПечати);
		СтруктураПараметровОбработчика.Вставить("ПараметрыВывода",	ПараметрыВывода);
		СтруктураПараметровОбработчика.Вставить("ВключатьОборотыЗаПериод",	Ложь);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктСверки",
			"Акт сверки взаимных расчетов",
			Печать_АктСверки(СтруктураПараметровОбработчика));
		КонецЕсли;   
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиСОборотами") Тогда
		СтруктураПараметровОбработчика = Новый Структура();
		СтруктураПараметровОбработчика.Вставить("МассивОбъектов",	МассивОбъектов);
		//СтруктураПараметровОбработчика.Вставить("ПараметрыПечати",	ПараметрыПечати);
		СтруктураПараметровОбработчика.Вставить("ОбъектыПечати",	ОбъектыПечати);
		СтруктураПараметровОбработчика.Вставить("ПараметрыВывода",	ПараметрыВывода);
		СтруктураПараметровОбработчика.Вставить("ВключатьОборотыЗаПериод",	Истина);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АктСверкиСОборотами",
			"Акт сверки взаимных расчетов",
			Печать_АктСверки(СтруктураПараметровОбработчика));
	КонецЕсли;
	
	
 КонецПроцедуры 
 
 Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати, ИмяМакета) Экспорт

	ТабДок = Печать_АктСверки(Новый Структура("МассивОбъектов, ОбъектыПечати", МассивОбъектов, ОбъектыПечати));

	Возврат ТабДок;
	 
 КонецФункции
 

#Область ПечатьДокумента

Функция Печать_АктСверки(СтруктураПараметровОбработчика)
	
	// Используемый макет
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АктСверкиВзаиморасчетов.ПФ_MXL_АктСверки");
	
	// Заполняемый документ
	ТабДок = Новый ТабличныйДокумент();
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.ТолькоПросмотр		= Истина;
	ТабДок.ИмяПараметровПечати	= "ПАРАМЕТРЫПЕЧАТИ_АктСверкиВзаиморасчетов";
	
	// Настраиваем запрос
	ЗапросПечать = Новый Запрос();
	ЗапросПечать.УстановитьПараметр("МассивДокументов",	СтруктураПараметровОбработчика["МассивОбъектов"]);
	ЗапросПечать.УстановитьПараметр("ПустаяДата",		'00010101');
	ЗапросПечать.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК ДокументСсылка,
	|	ВЫБОР
	|		КОГДА Док.ПоВсемОрганизациям
	|				И Док.РазделятьАкты
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатков.Ссылка ЕСТЬ NULL
	|						ТОГДА Док.Организация
	|					ИНАЧЕ ТаблицаОстатков.Организация
	|				КОНЕЦ
	|		ИНАЧЕ Док.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА Док.РазбитьПоДоговорам
	|				И Док.ДетализироватьПоДоговорам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатков.Ссылка ЕСТЬ NULL
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ ТаблицаОстатков.Договор
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Договор,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаОстатков.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаОстатков.ОстатокНаНачало
	|		КОНЕЦ) КАК ОстатокНаНачало
	|ПОМЕСТИТЬ ОстаткиНаНачало
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов.СписокОрганизаций КАК ТаблицаОстатков
	|		ПО Док.Ссылка = ТаблицаОстатков.Ссылка
	|ГДЕ
	|	Док.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Ссылка,
	|	ВЫБОР
	|		КОГДА Док.ПоВсемОрганизациям
	|				И Док.РазделятьАкты
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатков.Ссылка ЕСТЬ NULL
	|						ТОГДА Док.Организация
	|					ИНАЧЕ ТаблицаОстатков.Организация
	|				КОНЕЦ
	|		ИНАЧЕ Док.Организация
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Док.РазбитьПоДоговорам
	|				И Док.ДетализироватьПоДоговорам
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаОстатков.Ссылка ЕСТЬ NULL
	|						ТОГДА НЕОПРЕДЕЛЕНО
	|					ИНАЧЕ ТаблицаОстатков.Договор
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧ.Ссылка КАК ДокументСсылка,
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.ПоВсемОрганизациям
	|				И ТЧ.Ссылка.РазделятьАкты
	|			ТОГДА ТЧ.Организация
	|		ИНАЧЕ ТЧ.Ссылка.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧ.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Договоры.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ТЧ.Дата КАК Дата,
	|	ТЧ.Документ КАК Документ,
	|	ТЧ.Представление КАК ДокументПредставление,
	|	ТЧ.Дебет КАК Дебет,
	|	ТЧ.Кредит КАК Кредит,
	|	ТЧ.НомерДокумента КАК НомерДокумента,
	|	ТЧ.ДатаДокумента КАК ДатаДокумента,
	|	ТЧ.НаименованиеДокумента КАК НаименованиеДокумента,
	|	ТЧ.НаименованиеОперации КАК НаименованиеОперации, 
	//АБК +
	|	ВЫБОР
	|		КОГДА ОперацииДокументов.Операция В (&МассивБезвозмедныхОпераций)
	|			ТОГДА ТЧ.Дебет
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДебетБезвозмездный,
	|	ВЫБОР
	|		КОГДА ОперацииДокументов.Операция В (&МассивБезвозмедныхОпераций)
	|			ТОГДА ТЧ.Кредит
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КредитБезвозмездный 
	//АБК -
	|ПОМЕСТИТЬ ТабличныеЧастиПоДаннымОрганизации
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымОрганизации КАК ТЧ    
	//АБК+
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииДокументов КАК ОперацииДокументов
	|		ПО ТЧ.Документ = ОперацииДокументов.Документ       
	//АБК-
	|ГДЕ
	|	ТЧ.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСсылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТЧ.Ссылка КАК ДокументСсылка,
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.ПоВсемОрганизациям
	|				И ТЧ.Ссылка.РазделятьАкты
	|			ТОГДА ТЧ.Организация
	|		ИНАЧЕ ТЧ.Ссылка.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ТЧ.Ссылка.РазбитьПоДоговорам
	|			ТОГДА ТЧ.Договор
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Договоры.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ТЧ.Дата КАК ДатаК,
	|	ТЧ.Документ КАК ДокументК,
	|	ТЧ.Представление КАК ДокументПредставлениеК,
	|	ТЧ.Дебет КАК ДебетК,
	|	ТЧ.Кредит КАК КредитК,
	|	ТЧ.НомерДокумента КАК НомерДокументаК,
	|	ТЧ.ДатаДокумента КАК ДатаДокументаК,
	|	ТЧ.НаименованиеДокумента КАК НаименованиеДокументаК,
	|	ТЧ.НаименованиеОперации КАК НаименованиеОперацииК, 
	//АБК +
	|	ВЫБОР
	|		КОГДА ОперацииДокументов.Операция В (&МассивБезвозмедныхОпераций)
	|			ТОГДА ТЧ.Дебет
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДебетБезвозмездныйК,
	|	ВЫБОР
	|		КОГДА ОперацииДокументов.Операция В (&МассивБезвозмедныхОпераций)
	|			ТОГДА ТЧ.Кредит
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КредитБезвозмездныйК    
	//АБК-
	|ПОМЕСТИТЬ ТабличныеЧастиПоДаннымКонтрагента
	|ИЗ
	|	Документ.АктСверкиВзаиморасчетов.ПоДаннымКонтрагента КАК ТЧ     
	//АБК+
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииДокументов КАК ОперацииДокументов
	|		ПО ТЧ.Документ = ОперацииДокументов.Документ  
	//АБК -
	|ГДЕ
	|	ТЧ.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСсылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымОрганизации.ДокументСсылка КАК ДокументСсылка,
	|	ТабличныеЧастиПоДаннымОрганизации.НомерСтроки КАК НомерСтроки,
	|	ТабличныеЧастиПоДаннымОрганизации.Организация КАК Организация,
	//АБК
	|	ВЫБОР
	|		КОГДА ТабличныеЧастиПоДаннымОрганизации.ДебетБезвозмездный <> 0
	|				ИЛИ ТабличныеЧастиПоДаннымОрганизации.КредитБезвозмездный <> 0
	|			ТОГДА ""Безвозмездная передача""
	|		ИНАЧЕ ТабличныеЧастиПоДаннымОрганизации.Договор
	|	КОНЕЦ КАК Договор,         
	//АБК
	|	ТабличныеЧастиПоДаннымОрганизации.Дата КАК Дата,
	|	ТабличныеЧастиПоДаннымОрганизации.Документ КАК Документ,
	|	ТабличныеЧастиПоДаннымОрганизации.ДокументПредставление КАК ДокументПредставление,
	|	ТабличныеЧастиПоДаннымОрганизации.Дебет КАК Дебет,
	|	ТабличныеЧастиПоДаннымОрганизации.Кредит КАК Кредит,
	|	ТабличныеЧастиПоДаннымОрганизации.НомерДокумента КАК НомерДокумента,
	|	ТабличныеЧастиПоДаннымОрганизации.ДатаДокумента КАК ДатаДокумента,
	|	ТабличныеЧастиПоДаннымОрганизации.НаименованиеДокумента КАК НаименованиеДокумента,
	|	ТабличныеЧастиПоДаннымОрганизации.НаименованиеОперации КАК НаименованиеОперации, 
	//АБК  +
	|	ТабличныеЧастиПоДаннымОрганизации.ДебетБезвозмездный КАК ДебетБезвозмездный,
	|	ТабличныеЧастиПоДаннымОрганизации.КредитБезвозмездный КАК КредитБезвозмездный  
	//АБК -
	|ИЗ
	|	ТабличныеЧастиПоДаннымОрганизации КАК ТабличныеЧастиПоДаннымОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличныеЧастиПоДаннымОрганизации.ДокументСсылка,
	|	ТабличныеЧастиПоДаннымОрганизации.НомерСтроки
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(ТабличныеЧастиПоДаннымОрганизации.Дебет), 0) КАК Дебет,
	|	ЕСТЬNULL(СУММА(ТабличныеЧастиПоДаннымОрганизации.Кредит), 0) КАК Кредит, 
	//АБК +
	|	ЕСТЬNULL(СУММА(ДебетБезвозмездный), 0) КАК ДебетБезвозмездный,
	|	ЕСТЬNULL(СУММА(КредитБезвозмездный), 0) КАК КредитБезвозмездный  
	//АБК -
	|ПО
	|	ДокументСсылка,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументСсылка КАК ДокументСсылка,
	|	ТабличныеЧастиПоДаннымКонтрагента.НомерСтроки КАК НомерСтроки,
	|	ТабличныеЧастиПоДаннымКонтрагента.Организация КАК Организация,
	//АБК
	|	ВЫБОР
	|		КОГДА ТабличныеЧастиПоДаннымКонтрагента.ДебетБезвозмездныйК <> 0
	|				ИЛИ ТабличныеЧастиПоДаннымКонтрагента.КредитБезвозмездныйК <> 0
	|			ТОГДА ""Безвозмездная передача""
	|		ИНАЧЕ ТабличныеЧастиПоДаннымКонтрагента.Договор
	|	КОНЕЦ КАК Договор,       
	//АБК
	|	ТабличныеЧастиПоДаннымКонтрагента.ДатаК КАК ДатаК,
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументК КАК ДокументК,
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументПредставлениеК КАК ДокументПредставлениеК,
	|	ТабличныеЧастиПоДаннымКонтрагента.ДебетК КАК ДебетК,
	|	ТабличныеЧастиПоДаннымКонтрагента.КредитК КАК КредитК,
	|	ТабличныеЧастиПоДаннымКонтрагента.НомерДокументаК КАК НомерДокументаК,
	|	ТабличныеЧастиПоДаннымКонтрагента.ДатаДокументаК КАК ДатаДокументаК,
	|	ТабличныеЧастиПоДаннымКонтрагента.НаименованиеДокументаК КАК НаименованиеДокументаК,
	|	ТабличныеЧастиПоДаннымКонтрагента.НаименованиеОперацииК КАК НаименованиеОперацииК,    
	//АБК +
	|	ТабличныеЧастиПоДаннымКонтрагента.ДебетБезвозмездныйК КАК ДебетБезвозмездныйК,
	|	ТабличныеЧастиПоДаннымКонтрагента.КредитБезвозмездныйК КАК КредитБезвозмездныйК   
	//АБК -
	|ИЗ
	|	ТабличныеЧастиПоДаннымКонтрагента КАК ТабличныеЧастиПоДаннымКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументСсылка,
	|	ТабличныеЧастиПоДаннымКонтрагента.НомерСтроки
	|ИТОГИ
	|	ЕСТЬNULL(СУММА(ТабличныеЧастиПоДаннымКонтрагента.ДебетК), 0) КАК ДебетК,
	|	ЕСТЬNULL(СУММА(ТабличныеЧастиПоДаннымКонтрагента.КредитК), 0) КАК КредитК,  
	//АБК +
	|	ЕСТЬNULL(СУММА(ДебетБезвозмездныйК), 0) КАК ДебетБезвозмездныйК,
	|	ЕСТЬNULL(СУММА(КредитБезвозмездныйК), 0) КАК КредитБезвозмездныйК
	//АБК -
	|ПО
	|	ДокументСсылка,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиНаНачало.ДокументСсылка КАК ДокументСсылка,
	|	ОстаткиНаНачало.Организация КАК Организация,
	|	ОстаткиНаНачало.Договор КАК Договор,
	|	ОстаткиНаНачало.ОстатокНаНачало КАК ОстатокНаНачало
	|ИЗ
	|	ОстаткиНаНачало КАК ОстаткиНаНачало
	|ИТОГИ
	|	СУММА(ОстатокНаНачало)
	|ПО
	|	ДокументСсылка,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымОрганизации.ДокументСсылка КАК ДокументСсылка,
	|	ТабличныеЧастиПоДаннымОрганизации.Организация КАК Организация,        
	//АБК
	|	ВЫБОР
	|		КОГДА ТабличныеЧастиПоДаннымОрганизации.ДебетБезвозмездный <> 0
	|				ИЛИ ТабличныеЧастиПоДаннымОрганизации.КредитБезвозмездный <> 0
	|			ТОГДА ""Безвозмездная передача""
	|		ИНАЧЕ ТабличныеЧастиПоДаннымОрганизации.Договор
	|	КОНЕЦ КАК Договор         
	//АБК
	|ПОМЕСТИТЬ УникальныеГруппировки
	|ИЗ
	|	ТабличныеЧастиПоДаннымОрганизации КАК ТабличныеЧастиПоДаннымОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументСсылка,
	|	ТабличныеЧастиПоДаннымКонтрагента.Организация,  
	//АБК
	|	ВЫБОР
	|		КОГДА ТабличныеЧастиПоДаннымКонтрагента.ДебетБезвозмездныйК <> 0
	|				ИЛИ ТабличныеЧастиПоДаннымКонтрагента.КредитБезвозмездныйК <> 0
	|			ТОГДА ""Безвозмездная передача""
	|		ИНАЧЕ ТабличныеЧастиПоДаннымКонтрагента.Договор
	|	КОНЕЦ       
	//АБК
	|ИЗ
	|	ТабличныеЧастиПоДаннымКонтрагента КАК ТабличныеЧастиПоДаннымКонтрагента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОстаткиНаНачало.ДокументСсылка,
	|	ОстаткиНаНачало.Организация,
	|	ОстаткиНаНачало.Договор
	|ИЗ
	|	ОстаткиНаНачало КАК ОстаткиНаНачало
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УникальныеГруппировки.ДокументСсылка КАК ДокументСсылка,
	|	УникальныеГруппировки.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА НЕ УникальныеГруппировки.Организация.НаименованиеПолное = """"
	|			ТОГДА УникальныеГруппировки.Организация.НаименованиеПолное
	|		ИНАЧЕ УникальныеГруппировки.Организация.Наименование
	|	КОНЕЦ КАК ОрганизацияПредставление,
	|	УникальныеГруппировки.Договор КАК Договор,   
	//АБК
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УникальныеГруппировки.Договор) = ТИП(Справочник.Договоры)
	|			ТОГДА УникальныеГруппировки.Договор.Наименование
	|		ИНАЧЕ УникальныеГруппировки.Договор
	|	КОНЕЦ КАК ДоговорПредставление,         
	//АБК
	|	АктСверкиВзаиморасчетов.Договор КАК ДоговорИзШапки,
	|	ПРЕДСТАВЛЕНИЕ(АктСверкиВзаиморасчетов.Договор) КАК ДоговорИзШапкиПредставление,
	|	АктСверкиВзаиморасчетов.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(АктСверкиВзаиморасчетов.Подразделение) КАК ПодразделениеПредставление,
	|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА АктСверкиВзаиморасчетов.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА """"
	|		КОГДА НЕ АктСверкиВзаиморасчетов.Контрагент.НаименованиеСокращенное = """"
	|			ТОГДА АктСверкиВзаиморасчетов.Контрагент.НаименованиеСокращенное
	|		КОГДА АктСверкиВзаиморасчетов.Контрагент.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				И НЕ АктСверкиВзаиморасчетов.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное = """"
	|			ТОГДА ВЫРАЗИТЬ(АктСверкиВзаиморасчетов.Контрагент.ЮридическоеФизическоеЛицо.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ АктСверкиВзаиморасчетов.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентПредставление,
	|	АктСверкиВзаиморасчетов.Дата КАК Дата,
	|	АктСверкиВзаиморасчетов.Номер КАК Номер,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента КАК Валюта,
	|	АктСверкиВзаиморасчетов.ВалютаДокумента.Наименование КАК ВалютаПредставление,
	|	АктСверкиВзаиморасчетов.ДатаНачала КАК ДатаНачала,
	|	АктСверкиВзаиморасчетов.ДатаОкончания КАК ДатаОкончания,
	|	АктСверкиВзаиморасчетов.ПредставительОрганизации КАК ПредставительОрганизации,
	|	АктСверкиВзаиморасчетов.ПредставительКонтрагента КАК ПредставительКонтрагента,
	|	АктСверкиВзаиморасчетов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	АктСверкиВзаиморасчетов.ПоВсемОрганизациям КАК ПоВсемОрганизациям,
	|	АктСверкиВзаиморасчетов.РазделятьАкты КАК РазделятьАкты,
	|	АктСверкиВзаиморасчетов.РазбитьПоДоговорам КАК РазбитьПоДоговорам,
	|	АктСверкиВзаиморасчетов.ДетализироватьПоДоговорам КАК ДетализироватьПоДоговорам,
	|	АктСверкиВзаиморасчетов.СверкаСогласована КАК СверкаСогласована,
	|	АктСверкиВзаиморасчетов.Ответственный.ФизическоеЛицо КАК Исполнитель,
	|	АктСверкиВзаиморасчетов.ЭтоЭлектронныйДокумент КАК ЭтоЭлектронныйДокумент
	|ИЗ
	|	УникальныеГруппировки КАК УникальныеГруппировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
	|		ПО УникальныеГруппировки.ДокументСсылка = АктСверкиВзаиморасчетов.Ссылка
	|			И (АктСверкиВзаиморасчетов.Ссылка В (&МассивДокументов))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ
	|	МАКСИМУМ(ДоговорИзШапки),
	|	МАКСИМУМ(ДоговорИзШапкиПредставление),
	|	МАКСИМУМ(Подразделение),
	|	МАКСИМУМ(ПодразделениеПредставление),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(КонтрагентПредставление),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ВалютаПредставление),
	|	МАКСИМУМ(ДатаНачала),
	|	МАКСИМУМ(ДатаОкончания),
	|	МАКСИМУМ(ПредставительОрганизации),
	|	МАКСИМУМ(ПредставительКонтрагента),
	|	МАКСИМУМ(ГлавныйБухгалтер),
	|	МАКСИМУМ(ПоВсемОрганизациям),
	|	МАКСИМУМ(РазделятьАкты),
	|	МАКСИМУМ(РазбитьПоДоговорам),
	|	МАКСИМУМ(ДетализироватьПоДоговорам),
	|	МАКСИМУМ(СверкаСогласована),
	|	МАКСИМУМ(Исполнитель),
	|	МАКСИМУМ(ЭтоЭлектронныйДокумент)
	|ПО
	|	ДокументСсылка,
	|	Организация,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымОрганизации.Документ КАК Ссылка
	|ИЗ
	|	ТабличныеЧастиПоДаннымОрганизации КАК ТабличныеЧастиПоДаннымОрганизации
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТабличныеЧастиПоДаннымКонтрагента.ДокументК
	|ИЗ
	|	ТабличныеЧастиПоДаннымКонтрагента КАК ТабличныеЧастиПоДаннымКонтрагента";  
	
	МассивБезвозмедныхОпераций = Новый Массив;
	
	// Накладная на отпуск материалов
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_БезвозмезднаяПередача);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_БезвозмезднаяПередачаВложений1);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.НакладнаяНаОтпускМ15_ПередачаВПользование);
	
	// Передача Объектов ОС
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередачаНФА);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередача_Организациям);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовОС_БезвозмезднаяПередача);
	
	// Передача Объектов ИК
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередачаНФА);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПередачаОбъектовИК_БезвозмезднаяПередача);
	
	// ПоступлениеМЗ
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПоступлениеМЗ_БезвозмездноеВнутриведомственное);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПоступлениеМЗ_БезвозмездноеПрочее);
	
	// ПоступлениеОС
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПоступлениеОС_БезвозмездноеПоступлениеВнутриведомственное);
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПоступлениеОС_БезвозмездноеПоступлениеПрочее);
	
	// ПринятиеКУчетуОбъектовОС
	МассивБезвозмедныхОпераций.Добавить(Справочники.ТиповыеОперации.ПринятиеКУчетуОбъектовОС_БезвозмездноеПолучениеПрочее);  
	
	ЗапросПечать.Параметры.Вставить("МассивБезвозмедныхОпераций",	МассивБезвозмедныхОпераций);    
	
	РезультатыПечать = ЗапросПечать.ВыполнитьПакет();
	
	Выборки = ПолучитьСтруктуруВыборок();
	
	// [3]. Все табличные части ""По данным организации""
	Выборки["ГруппировкаДокументСсылка"]["ПоДаннымОрганизации"] = РезультатыПечать[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// [4]. Все табличные части ""По данным контрагента""
	Выборки["ГруппировкаДокументСсылка"]["ПоДаннымКонтрагента"] = РезультатыПечать[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// [5]. Остатки на начало
	Выборки["ГруппировкаДокументСсылка"]["Остатки"] = РезультатыПечать[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// [7]. Шапки документов, сгруппированные для формирования задающей выборки
	Выборки["ГруппировкаДокументСсылка"]["Шапка"] = РезультатыПечать[7].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// [8]. Учетные документы
	ДатыУчетныхДокументов = ПолучитьДатыУчетныхДокументов(РезультатыПечать[8].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	// Используемые области макета
	ИспользуемыеОбласти = Новый Структура();
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ВалютаРУ",							Константы.ВалютаРегламентированногоУчета.Получить());
	ЗначенияПараметров.Вставить("ДатыУчетныхДокументов",			ДатыУчетныхДокументов);
	ЗначенияПараметров.Вставить("Поиск",							Новый Структура());
	ЗначенияПараметров.Вставить("ВыводитьДатуУчетногоДокумента",	ОбщегоНазначенияБГУ.ПолучитьНастройкуБулевоИзМакета(Макет, "ВыводитьДатуУчетногоДокумента", Ложь));
	ЗначенияПараметров.Вставить("СклонятьНаименованияСторон",		ОбщегоНазначенияБГУ.ПолучитьНастройкуБулевоИзМакета(Макет, "СклонятьНаименованияСторон", Ложь));
	ЗначенияПараметров.Вставить("ВыводитьНомерДату",				Истина);
	ЗначенияПараметров.Вставить("ВыводитьСальдоКПоДокументуВЦелом",			ОбщегоНазначенияБГУ.ПолучитьНастройкуБулевоИзМакета(Макет, "ВыводитьСальдоКПоДокументуВЦелом", Ложь));
	ЗначенияПараметров.Вставить("ВыводитьСальдоКВГруппировкеПоДоговору",	ОбщегоНазначенияБГУ.ПолучитьНастройкуБулевоИзМакета(Макет, "ВыводитьСальдоКВГруппировкеПоДоговору", Ложь));
	ЗначенияПараметров.Вставить("ВыводитьНадписьСверкаНеСогласована",		ОбщегоНазначенияБГУ.ПолучитьНастройкуБулевоИзМакета(Макет, "ВыводитьНадписьСверкаНеСогласована", Истина));
	
	//
	// Обходим группировки по полю ДокументСсылка
	//
	ПервыйДокумент = Истина;
	Пока Выборки["ГруппировкаДокументСсылка"]["Шапка"].Следующий() Цикл
		
		// Начинаем выводить новый документ
		Если НЕ ПервыйДокумент Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабДок.ВысотаТаблицы + 1;
		
		// Продвигаемся в остальных выборках до текущего значения группировки
		ПродвинутьВыборкиТекущейГруппировки(Выборки, "ДокументСсылка");
		
		// Выбираем более глубокие группировки (Организация)
		ВыбратьСледующиеГруппировки(Выборки, "ДокументСсылка", "Организация");
		
		//
		// Обходим группировки по полю Организация
		//
		ПерваяОрганизация = Истина;
		Пока Выборки["ГруппировкаОрганизация"]["Шапка"].Следующий() Цикл
			
			// Начинаем выводить новую организацию
			Если НЕ ПерваяОрганизация Тогда
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПерваяОрганизация = Ложь;
			
			// Продвигаемся в остальных выборках до текущего значения группировки
			ПродвинутьВыборкиТекущейГруппировки(Выборки, "Организация");
			
			// Используемые области макета
			ИнициализироватьИспользуемыеОбласти(ИспользуемыеОбласти, Макет, ЗначенияПараметров);
			
			//---
			// Заголовок
			//---
			ВывестиЗаголовок(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
			
			//---
			// Заголовок организации
			//---
			ВывестиЗаголовокОрганизации(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
			
			// Выбираем более глубокие группировки (Договор)
			ВыбратьСледующиеГруппировки(Выборки, "Организация", "Договор");
			
			//
			// Обходим группировки по полю Договор
			//
			Пока Выборки["ГруппировкаДоговор"]["Шапка"].Следующий() Цикл
				// Продвигаемся в остальных выборках до текущего значения группировки
				ПродвинутьВыборкиТекущейГруппировки(Выборки, "Договор");
				
				//---
				// Заголовок договора
				//---
				ВывестиЗаголовокДоговора(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
				
				// Выбираем детальные записи
				ВыбратьДетальныеЗаписи(Выборки, "Договор");
				
				//---
				// Таблица
				//---
				ВывестиТаблицу(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
				
				//---
				// Итоги договора
				//---
				ВывестиИтогиДоговора(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
			КонецЦикла;
			
			//---
			// Итоги организации
			//---
			ВывестиИтогиОрганизации(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров, СтруктураПараметровОбработчика.ВключатьОборотыЗаПериод);
			
			//--------
			// Подвал
			//--------
			ВывестиПодвалОрганизации(ТабДок, ИспользуемыеОбласти, Выборки, ЗначенияПараметров);
		КонецЦикла;
		
		// В табличном документе зададим имя области,
		// в которую был выведен объект.
		// Нужно для возможности печати покомплектно
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабДок,
			НомерСтрокиНачало,
			СтруктураПараметровОбработчика["ОбъектыПечати"],
			Выборки["ГруппировкаДокументСсылка"]["Шапка"]["ДокументСсылка"]);
	КонецЦикла;
	
	Возврат ТабДок;
	
КонецФункции

Процедура ИнициализироватьИспользуемыеОбласти(ИспользуемыеОбласти, Макет, ВычисляемыеПараметры)
	
	ИспользуемыеОбласти.Вставить("Заголовок",					Макет.ПолучитьОбласть("Заголовок"));
	ИспользуемыеОбласти.Вставить("ШапкаТаблицы",				Макет.ПолучитьОбласть("ШапкаТаблицы"));
	ИспользуемыеОбласти.Вставить("Договор",						Макет.ПолучитьОбласть("Договор"));
	ИспользуемыеОбласти.Вставить("ДоговорОбороты",				Макет.ПолучитьОбласть("ДоговорОбороты"));
	ИспользуемыеОбласти.Вставить("ДоговорСальдоНачальное",		Макет.ПолучитьОбласть("ДоговорСальдоНачальное"));
	ИспользуемыеОбласти.Вставить("ДоговорСальдоКонечное",		Макет.ПолучитьОбласть("ДоговорСальдоКонечное"));
	ИспользуемыеОбласти.Вставить("ОрганизацияСальдоНачальное",	Макет.ПолучитьОбласть("ОрганизацияСальдоНачальное"));
	ИспользуемыеОбласти.Вставить("ОрганизацияОбороты",			Макет.ПолучитьОбласть("ОрганизацияОбороты"));
	ИспользуемыеОбласти.Вставить("ОрганизацияСальдоКонечное",	Макет.ПолучитьОбласть("ОрганизацияСальдоКонечное"));
	ИспользуемыеОбласти.Вставить("Строка",						Макет.ПолучитьОбласть("Строка"));
	ИспользуемыеОбласти.Вставить("Подвал",						Макет.ПолучитьОбласть("Подвал"));
	
	// Для согласованной сверки
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ДоговорОборотыСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ДоговорОбороты"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ДоговорОборотыСверкаСогласована",				ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ДоговорСальдоНачальноеСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ДоговорСальдоНачальное"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ДоговорСальдоНачальноеСверкаСогласована",		ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ДоговорСальдоКонечноеСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ДоговорСальдоКонечное"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ДоговорСальдоКонечноеСверкаСогласована",		ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ОрганизацияСальдоНачальноеСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ОрганизацияСальдоНачальное"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ОрганизацияСальдоНачальноеСверкаСогласована",	ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ОрганизацияОборотыСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ОрганизацияОбороты"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ОрганизацияОборотыСверкаСогласована",			ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("ОрганизацияСальдоКонечноеСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["ОрганизацияСальдоКонечное"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("ОрганизацияСальдоКонечноеСверкаСогласована",	ТекущаяОбласть);
	
	Попытка
		ТекущаяОбласть = Макет.ПолучитьОбласть("СтрокаСверкаСогласована");
	Исключение
		ТекущаяОбласть = ИспользуемыеОбласти["Строка"];
	КонецПопытки;
	ИспользуемыеОбласти.Вставить("СтрокаСверкаСогласована",						ТекущаяОбласть);
	
КонецПроцедуры

Процедура ВывестиЗаголовок(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	Перем	ФИОГлавбуха,
			ПредставительДолжность,
			ФИОПредставителя,
			ПредставительДолжностьК,
			ФИОПредставителяК,
			ФИОИсполнителя,
			ТелИсполнителя;

	ПредставлениеПустойДолжности	= "________________";
	ПредставлениеПустойФИО			= "______________________________";
	
	ОбластьЗаголовок	= ИспользуемыеОбласти["Заголовок"];
	ОбластьШапкаТаблицы	= ИспользуемыеОбласти["ШапкаТаблицы"];
	
	ВыборкаШапка = Выборки["ГруппировкаОрганизация"]["Шапка"];
	
	ВыводитьПодразделение = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям") И ЗначениеЗаполнено(ВыборкаШапка["ПодразделениеПредставление"]);
	
	Если ВыборкаШапка["Валюта"]	= ВычисляемыеПараметры["ВалютаРУ"] Тогда
		ВалютаПредставление = НСтр("ru='руб.'");
	Иначе
		ВалютаПредставление = ВыборкаШапка["ВалютаПредставление"];
	КонецЕсли;
	
	ОрганизацияПредставление	= ВыборкаШапка["ОрганизацияПредставление"];
	КонтрагентПредставление		= ВыборкаШапка["КонтрагентПредставление"];
	ДоговорПредставление		= ВыборкаШапка["ДоговорИзШапкиПредставление"];
	
	ОрганизацияПредставлениеМежду	= ОрганизацияПредставление;
	ОрганизацияПредставлениеОт		= ОрганизацияПредставление;
	
	КонтрагентПредставлениеМежду	= КонтрагентПредставление;
	КонтрагентПредставлениеОт		= КонтрагентПредставление;
	
	Если ВычисляемыеПараметры.СклонятьНаименованияСторон Тогда
		ОрганизацияПредставлениеМежду	= СклонениеПредставленийОбъектов.ПросклонятьПредставление(ОрганизацияПредставление, 5);
		ОрганизацияПредставлениеОт		= СклонениеПредставленийОбъектов.ПросклонятьПредставление(ОрганизацияПредставление, 2);
		
		КонтрагентПредставлениеМежду	= СклонениеПредставленийОбъектов.ПросклонятьПредставление(КонтрагентПредставление, 5);
		КонтрагентПредставлениеОт		= СклонениеПредставленийОбъектов.ПросклонятьПредставление(КонтрагентПредставление, 2);
		
		ДоговорПредставление = СклонениеПредставленийОбъектов.ПросклонятьПредставление(ДоговорПредставление, 2);
	КонецЕсли;
	
	Если ВыводитьПодразделение Тогда
		ОрганизацияПредставлениеМежду = ОрганизацияПредставлениеМежду
			+ Символы.ПС
			+ НСтр("ru='подразделение '") + ВыборкаШапка["ПодразделениеПредставление"];
	КонецЕсли;
	
	ВычисляемыеПараметры.Вставить("ОрганизацияПредставлениеОт", ОрганизацияПредставлениеОт);
	ВычисляемыеПараметры.Вставить("КонтрагентПредставлениеОт", КонтрагентПредставлениеОт);
	
	ШаблонТекстЗаголовка = НСтр("ru='взаимных расчетов'");
	
	Если ВычисляемыеПараметры.ВыводитьНомерДату Тогда
		ШаблонТекстЗаголовка = ШаблонТекстЗаголовка + НСтр("ru='
			|№ [Номер] от [Дата]
			|'");
	КонецЕсли;
	
	ШаблонТекстЗаголовка = ШаблонТекстЗаголовка + НСтр("ru='
		|за период [ПериодПредставление]
		|между [ОрганизацияПредставление]
		|и [КонтрагентПредставление]'");
	
	Если ЗначениеЗаполнено(ВыборкаШапка["ДоговорИзШапкиПредставление"]) Тогда
		ШаблонТекстЗаголовка = ШаблонТекстЗаголовка + НСтр("ru='
			|по договору [ДоговорПредставление]'");
	КонецЕсли;
	
	//
	// Текст заголовка
	//
	
	ВставляемыеЗначения = Новый Структура();	
	ВставляемыеЗначения.Вставить("ПериодПредставление",			ПредставлениеПериода(
																	НачалоДня(ВыборкаШапка["ДатаНачала"]),
																	КонецДня(ВыборкаШапка["ДатаОкончания"]),
																	"ФП=Истина"));
	ВставляемыеЗначения.Вставить("ОрганизацияПредставление",	ОрганизацияПредставлениеМежду);
	ВставляемыеЗначения.Вставить("КонтрагентПредставление",		КонтрагентПредставлениеМежду);
	ВставляемыеЗначения.Вставить("ДоговорПредставление",		ДоговорПредставление);
	ВставляемыеЗначения.Вставить("Дата",						Формат(ВыборкаШапка.Дата, "ДФ=""дд.ММ.гггг"""));
	ВставляемыеЗначения.Вставить("Номер",						РегистрыСведений.НастройкиПечатиПрефиксаНомера.ПолучитьНомерДляПечатиПоСсылкеИдентификаторуДокумента(
																	ВыборкаШапка.ДокументСсылка,
																	ВыборкаШапка.Номер));
			
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонТекстЗаголовка, ВставляемыеЗначения);
	
	// Главный бухгалтер
	Если ЗначениеЗаполнено(ВыборкаШапка["ГлавныйБухгалтер"]) Тогда
		ФИОГлавбуха = Справочники.Сотрудники.ФамилияИО(ВыборкаШапка["ГлавныйБухгалтер"], , ВыборкаШапка["Дата"]);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ФИОГлавбуха) Тогда
		ФИОГлавбуха = ПредставлениеПустойФИО;
	КонецЕсли;
	
	// Представитель организации
	Если ЗначениеЗаполнено(ВыборкаШапка["ПредставительОрганизации"]) Тогда
		ТребуемыеДанные = Новый Структура("СсылкаНаОбъект, Период, Должность",
			ВыборкаШапка["ПредставительОрганизации"],
			ВыборкаШапка["Дата"]);
		Справочники.Сотрудники.ПолучитьДанныеСотрудника(ТребуемыеДанные);
		
		ПредставительДолжность	= ТребуемыеДанные.Должность;
		ФИОПредставителя		= Справочники.Контрагенты.ФамилияИО(ВыборкаШапка["ПредставительОрганизации"], , ВыборкаШапка["Дата"]);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ПредставительДолжность) Тогда
		ПредставительДолжность	= ПредставлениеПустойДолжности;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ФИОПредставителя) Тогда
		ФИОПредставителя		= ПредставлениеПустойФИО;
	КонецЕсли;	
	
	// Представитель контрагента
	ПредставительДолжностьК	= ПредставлениеПустойДолжности;
	Если НЕ ПустаяСтрока(ВыборкаШапка["ПредставительКонтрагента"]) Тогда
		ФИОПредставителяК	= ВыборкаШапка["ПредставительКонтрагента"];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ФИОПредставителяК) Тогда
		ФИОПредставителяК	= ПредставлениеПустойФИО;
	КонецЕсли;	
	
	//
	// Текст "Мы, нижеподписавшиеся, ..."
	//
	
	ТекстМыНижеподписавшиеся = "Мы, нижеподписавшиеся, "
		+ ПредставительДолжность + " " + ФИОПредставителя
		+ " от " + ОрганизацияПредставлениеОт + ", с одной стороны, и "
		+ ПредставительДолжностьК + " " + ФИОПредставителяК
		+ " от " + КонтрагентПредставлениеОт + " " + ", с другой стороны, "
		+ "составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:";
				
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ТекстЗаголовка",				ТекстЗаголовка);
	ЗначенияПараметров.Вставить("ТекстМыНижеподписавшиеся",		ТекстМыНижеподписавшиеся);
	ЗначенияПараметров.Вставить("ОрганизацияПредставление",		ОрганизацияПредставлениеОт);
	ЗначенияПараметров.Вставить("ВалютаПредставление",			ВалютаПредставление);
	ЗначенияПараметров.Вставить("КонтрагентПредставление",		КонтрагентПредставлениеОт);
	ОбластьЗаголовок.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
	
	ВычисляемыеПараметры.Вставить("ФИОГлавбуха",				ФИОГлавбуха);
	ВычисляемыеПараметры.Вставить("ПредставительДолжность",		ПредставительДолжность);
	ВычисляемыеПараметры.Вставить("ФИОПредставителя",			ФИОПредставителя);
	ВычисляемыеПараметры.Вставить("ПредставительДолжностьК",	ПредставительДолжностьК);
	ВычисляемыеПараметры.Вставить("ФИОПредставителяК",			ФИОПредставителяК);
	
	// Исполнитель, заполняем только если заполнен
	
	Если ЗначениеЗаполнено(ВыборкаШапка["Исполнитель"]) Тогда
		ФИОИсполнителя = Справочники.Сотрудники.ФамилияИО(ВыборкаШапка["Исполнитель"], , ВыборкаШапка["Дата"]);
		ТелИсполнителя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВыборкаШапка["Исполнитель"], Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	КонецЕсли;
	
	ВычисляемыеПараметры.Вставить("ФИОИсполнителя",ФИОИсполнителя);
	ВычисляемыеПараметры.Вставить("ТелИсполнителя",ТелИсполнителя);
	
КонецПроцедуры

Процедура ВывестиЗаголовокОрганизации(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"] Тогда
		ОбластьОрганизацияСальдоНачальное = ИспользуемыеОбласти["ОрганизацияСальдоНачальноеСверкаСогласована"];
	Иначе
		ОбластьОрганизацияСальдоНачальное = ИспользуемыеОбласти["ОрганизацияСальдоНачальное"];
	КонецЕсли;
	
	//---
	// Остатки на начало
	//---
	Если Выборки["ГруппировкаОрганизация"]["ЕстьОстатки"] Тогда
		ОстатокНаНачало			= Выборки["ГруппировкаОрганизация"]["Остатки"]["ОстатокНаНачало"];
		СуммаНачальныйОстатокДт	= ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
		СуммаНачальныйОстатокКт	= ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
	Иначе
		ОстатокНаНачало			= 0;
		СуммаНачальныйОстатокДт	= 0;
		СуммаНачальныйОстатокКт	= 0;
	КонецЕсли;
	
	// Начальные остатки по данным контрагента
	СуммаНачальныйОстатокДтК = СуммаНачальныйОстатокКт;
	СуммаНачальныйОстатокКтК = СуммаНачальныйОстатокДт;
	
	Если Не ВычисляемыеПараметры.ВыводитьСальдоКПоДокументуВЦелом Тогда
		СуммаНачальныйОстатокДтК = 0;
		СуммаНачальныйОстатокКтК = 0;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("СуммаНачальныйОстатокДт",	СуммаНачальныйОстатокДт);
	ЗначенияПараметров.Вставить("СуммаНачальныйОстатокКт",	СуммаНачальныйОстатокКт);
	ЗначенияПараметров.Вставить("СуммаНачальныйОстатокДтК",	СуммаНачальныйОстатокДтК);
	ЗначенияПараметров.Вставить("СуммаНачальныйОстатокКтК",	СуммаНачальныйОстатокКтК);
	ОбластьОрганизацияСальдоНачальное.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьОрганизацияСальдоНачальное);
	
КонецПроцедуры

Процедура ВывестиЗаголовокДоговора(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	ЗаданаРазбивкаПоДоговорам	= Выборки["ГруппировкаДокументСсылка"]["Шапка"]["РазбитьПоДоговорам"]
									И НЕ Выборки["ГруппировкаДоговор"]["Шапка"]["Договор"] = Неопределено;
	Если НЕ ЗаданаРазбивкаПоДоговорам Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьДоговор						= ИспользуемыеОбласти["Договор"];
	
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"] Тогда
		ОбластьДоговорСальдоНачальное	= ИспользуемыеОбласти["ДоговорСальдоНачальноеСверкаСогласована"];
	Иначе
		ОбластьДоговорСальдоНачальное	= ИспользуемыеОбласти["ДоговорСальдоНачальное"];
	КонецЕсли;
	
	//---
	// Название договора
	//---
	ДоговорСсылка = Выборки["ГруппировкаДоговор"]["Шапка"]["Договор"];
	Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
		ДоговорПредставление	= Выборки["ГруппировкаДоговор"]["Шапка"]["ДоговорПредставление"];
	Иначе
		ДоговорСсылка			= Неопределено;
		ДоговорПредставление	= НСтр("ru='<Договор не указан>'");
	КонецЕсли;
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("Договор",				ДоговорСсылка);
	ЗначенияПараметров.Вставить("ДоговорПредставление",	ДоговорПредставление);
	ОбластьДоговор.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьДоговор);
	
	//---
	// Начальное сальдо договора
	//---
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["ДетализироватьПоДоговорам"] Тогда
		Если Выборки["ГруппировкаДоговор"]["ЕстьОстатки"] Тогда
			ОстатокНаНачало			= Выборки["ГруппировкаДоговор"]["Остатки"]["ОстатокНаНачало"];
			СуммаНачальныйОстатокДт	= ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
			СуммаНачальныйОстатокКт	= ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
		Иначе
			ОстатокНаНачало			= 0;
			СуммаНачальныйОстатокДт	= 0;
			СуммаНачальныйОстатокКт = 0;
		КонецЕсли;
		
		СуммаНачальныйОстатокДтК = СуммаНачальныйОстатокКт;
		СуммаНачальныйОстатокКтК = СуммаНачальныйОстатокДт;
		
		ОчиститьОстаткиКонтрагентаПоДоговору = НЕ Выборки["ГруппировкаДокументСсылка"]["ЕстьПоДаннымКонтрагента"]
			И НЕ Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"]
			Или Не ВычисляемыеПараметры.ВыводитьСальдоКВГруппировкеПоДоговору;
			
		Если ОчиститьОстаткиКонтрагентаПоДоговору Тогда
			СуммаНачальныйОстатокДтК = 0;
			СуммаНачальныйОстатокКтК = 0;
		КонецЕсли;
		
		ЗначенияПараметров = Новый Структура();
		ЗначенияПараметров.Вставить("СуммаНачальныйОстатокДт",	СуммаНачальныйОстатокДт);
		ЗначенияПараметров.Вставить("СуммаНачальныйОстатокКт",	СуммаНачальныйОстатокКт);
		ЗначенияПараметров.Вставить("СуммаНачальныйОстатокДтК",	СуммаНачальныйОстатокДтК);
		ЗначенияПараметров.Вставить("СуммаНачальныйОстатокКтК",	СуммаНачальныйОстатокКтК);
		ОбластьДоговорСальдоНачальное.Параметры.Заполнить(ЗначенияПараметров);
		ЗаполняемыйТабличныйДокумент.Вывести(ОбластьДоговорСальдоНачальное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИтогиДоговора(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	ЗаданаРазбивкаПоДоговорам	= Выборки["ГруппировкаДокументСсылка"]["Шапка"]["РазбитьПоДоговорам"]
									И НЕ Выборки["ГруппировкаДоговор"]["Шапка"]["Договор"] = Неопределено;
	Если НЕ ЗаданаРазбивкаПоДоговорам Тогда
		Возврат;
	КонецЕсли;
	
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"] Тогда
		ОбластьДоговорОбороты			= ИспользуемыеОбласти["ДоговорОборотыСверкаСогласована"];
		ОбластьДоговорСальдоКонечное	= ИспользуемыеОбласти["ДоговорСальдоКонечноеСверкаСогласована"];
	Иначе
		ОбластьДоговорОбороты			= ИспользуемыеОбласти["ДоговорОбороты"];
		ОбластьДоговорСальдоКонечное	= ИспользуемыеОбласти["ДоговорСальдоКонечное"];
	КонецЕсли;
	
	//---
	// Обороты по договору
	//---
	Если Выборки["ГруппировкаДоговор"]["ЕстьПоДаннымОрганизации"] Тогда
		СуммаОборотДт	= Выборки["ГруппировкаДоговор"]["ПоДаннымОрганизации"]["Дебет"];
		СуммаОборотКт	= Выборки["ГруппировкаДоговор"]["ПоДаннымОрганизации"]["Кредит"];   
		
		//АБК
		СуммаОборотБезвозмедныйДт	= Выборки["ГруппировкаДоговор"]["ПоДаннымОрганизации"]["ДебетБезвозмездный"];
		СуммаОборотБезвозмедныйКт	= Выборки["ГруппировкаДоговор"]["ПоДаннымОрганизации"]["КредитБезвозмездный"];  
		//АБК
	Иначе
		СуммаОборотДт	= 0;
		СуммаОборотКт	= 0;   
		
		//АБК
		СуммаОборотБезвозмедныйДт	= 0;
		СуммаОборотБезвозмедныйКт	= 0;  
		//АБК
	КонецЕсли;
	Если Выборки["ГруппировкаДоговор"]["ЕстьПоДаннымКонтрагента"] Тогда
		СуммаОборотДтК	= Выборки["ГруппировкаДоговор"]["ПоДаннымКонтрагента"]["ДебетК"];
		СуммаОборотКтК	= Выборки["ГруппировкаДоговор"]["ПоДаннымКонтрагента"]["КредитК"]; 
		
		//АБК
		СуммаОборотБезвозмедныйДтК	= Выборки["ГруппировкаДоговор"]["ПоДаннымКонтрагента"]["ДебетБезвозмездныйК"];
		СуммаОборотБезвозмедныйКтК	= Выборки["ГруппировкаДоговор"]["ПоДаннымКонтрагента"]["КредитБезвозмездныйК"];  
		//АБК
	Иначе
		СуммаОборотДтК	= 0;
		СуммаОборотКтК	= 0;    
		
		//АБК
		СуммаОборотБезвозмедныйДтК	= 0;
		СуммаОборотБезвозмедныйКтК	= 0;  
		//АБК
	КонецЕсли;
	ЗначенияПараметров = Новый Структура();    
	//АБК
	ЗначенияПараметров.Вставить("СуммаОборотДт",	СуммаОборотДт - СуммаОборотБезвозмедныйДт);
	ЗначенияПараметров.Вставить("СуммаОборотКт",	СуммаОборотКт - СуммаОборотБезвозмедныйКт);
	ЗначенияПараметров.Вставить("СуммаОборотДтК",	СуммаОборотДтК - СуммаОборотБезвозмедныйДтК);
	ЗначенияПараметров.Вставить("СуммаОборотКтК",	СуммаОборотКтК - СуммаОборотБезвозмедныйКтК);
	//АБК
	ОбластьДоговорОбороты.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьДоговорОбороты);
	
	//---
	// Конечное сальдо договора
	//---
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["ДетализироватьПоДоговорам"] Тогда
		Если Выборки["ГруппировкаДоговор"]["ЕстьОстатки"] Тогда
			ОстатокНаНачало			= Выборки["ГруппировкаДоговор"]["Остатки"]["ОстатокНаНачало"];
			СуммаНачальныйОстатокДт	= ?(ОстатокНаНачало > 0, ОстатокНаНачало, 0);
			СуммаНачальныйОстатокКт	= ?(ОстатокНаНачало < 0, -ОстатокНаНачало, 0);
		Иначе
			ОстатокНаНачало			= 0;
			СуммаНачальныйОстатокДт	= 0;
			СуммаНачальныйОстатокКт	= 0;
		КонецЕсли;
		
		КонечныйОстаток		= ОстатокНаНачало + (СуммаОборотДт - СуммаОборотКт);
		КонечныйОстатокК	= ОстатокНаНачало - (СуммаОборотДтК - СуммаОборотКтК);
		
		//АБК
		КонечныйОстаток		= КонечныйОстаток + (СуммаОборотБезвозмедныйКт - СуммаОборотБезвозмедныйДт);
		КонечныйОстатокК	= КонечныйОстатокК - (СуммаОборотБезвозмедныйКтК - СуммаОборотБезвозмедныйДтК);   
		//АБК
		
		СуммаКонечныйОстатокДт	= ?(КонечныйОстаток > 0, КонечныйОстаток, 0);
		СуммаКонечныйОстатокКт	= ?(КонечныйОстаток < 0, -КонечныйОстаток, 0);
		
		СуммаКонечныйОстатокДтК	= ?(КонечныйОстатокК < 0, -КонечныйОстатокК, 0);
		СуммаКонечныйОстатокКтК	= ?(КонечныйОстатокК > 0, КонечныйОстатокК, 0);
		
		ОчиститьОстаткиКонтрагентаПоДоговору = НЕ Выборки["ГруппировкаДокументСсылка"]["ЕстьПоДаннымКонтрагента"]
			И НЕ Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"]
			Или Не ВычисляемыеПараметры.ВыводитьСальдоКВГруппировкеПоДоговору;
			
		Если ОчиститьОстаткиКонтрагентаПоДоговору Тогда
			СуммаКонечныйОстатокДтК = 0;
			СуммаКонечныйОстатокКтК = 0;
		КонецЕсли;
		
		ЗначенияПараметров = Новый Структура();
		ЗначенияПараметров.Вставить("СуммаКонечныйОстатокДт",	СуммаКонечныйОстатокДт);
		ЗначенияПараметров.Вставить("СуммаКонечныйОстатокКт",	СуммаКонечныйОстатокКт);
		ЗначенияПараметров.Вставить("СуммаКонечныйОстатокДтК",	СуммаКонечныйОстатокДтК);
		ЗначенияПараметров.Вставить("СуммаКонечныйОстатокКтК",	СуммаКонечныйОстатокКтК);
		ОбластьДоговорСальдоКонечное.Параметры.Заполнить(ЗначенияПараметров);
		ЗаполняемыйТабличныйДокумент.Вывести(ОбластьДоговорСальдоКонечное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиТаблицу(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"] Тогда
		ОбластьСтрока = ИспользуемыеОбласти["СтрокаСверкаСогласована"];
	Иначе
		ОбластьСтрока = ИспользуемыеОбласти["Строка"];
	КонецЕсли;
	
	ПустаяДата						= '00010101';
	ПустаяРасшифровка				= Неопределено;
	ПустаяСумма						= 0;
	
	// Для представления документа вместо пустой строки будем выводить пустую дату.
	// Потому, что функция Формат не принимает строки, зато принимает даты
	ПустоеПредставлениеДокумента	= ПустаяДата;
	
	ПустыеЗначенияПоДаннымОрганизации = Новый Структура();
	ПустыеЗначенияПоДаннымОрганизации.Вставить("Дата",						ПустаяДата);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("Документ",					ПустаяРасшифровка);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("ДокументПредставление",		ПустоеПредставлениеДокумента);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("Дебет",						ПустаяСумма);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("Кредит",					ПустаяСумма);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("ДатаУчетногоДокумента",		ПустаяДата);
	ПустыеЗначенияПоДаннымОрганизации.Вставить("ДатаПервичногоДокумента",	ПустаяДата);
	
	ПустыеЗначенияПоДаннымКонтрагента = Новый Структура();
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДатаК",						ПустаяДата);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДокументК",					ПустаяРасшифровка);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДокументПредставлениеК",	ПустоеПредставлениеДокумента);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДебетК",					ПустаяСумма);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("КредитК",					ПустаяСумма);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДатаУчетногоДокументаК",	ПустаяДата);
	ПустыеЗначенияПоДаннымКонтрагента.Вставить("ДатаПервичногоДокументаК",	ПустаяДата);
	
	ЗначенияПараметровОрганизации = Новый Структура("
		|Дата,
		|Документ,
		|ДокументПредставление,
		|Дебет,
		|Кредит,
		|ДатаУчетногоДокумента,
		|ДатаПервичногоДокумента");
	
	ЗначенияПараметровКонтрагента = Новый Структура("
		|ДатаК,
		|ДокументК,
		|ДокументПредставлениеК,
		|ДебетК,
		|КредитК,
		|ДатаУчетногоДокументаК,
		|ДатаПервичногоДокументаК");
	
	ВыборкаПоДаннымОрганизации = Выборки["ДетальныеЗаписи"]["ПоДаннымОрганизации"];
	ВыборкаПоДаннымКонтрагента = Выборки["ДетальныеЗаписи"]["ПоДаннымКонтрагента"];
	
	Если Выборки["ДетальныеЗаписи"]["ЕстьПоДаннымОрганизации"] Тогда
		КоличествоСтрокПоДаннымОрганизации = ВыборкаПоДаннымОрганизации.Количество();
	Иначе
		КоличествоСтрокПоДаннымОрганизации = 0;
	КонецЕсли;
	
	Если Выборки["ДетальныеЗаписи"]["ЕстьПоДаннымКонтрагента"] Тогда
		КоличествоСтрокПоДаннымКонтрагента = ВыборкаПоДаннымКонтрагента.Количество();
	Иначе
		КоличествоСтрокПоДаннымКонтрагента = 0;
	КонецЕсли;
	
	КоличествоСтрок = Макс(КоличествоСтрокПоДаннымОрганизации, КоличествоСтрокПоДаннымКонтрагента);
	
	Для СчетчикСтрок = 1 По КоличествоСтрок Цикл
		// Часть Организации
		Если СчетчикСтрок <= КоличествоСтрокПоДаннымОрганизации Тогда
			ВыборкаПоДаннымОрганизации.Следующий();
			
			ЗаполнитьЗначенияСвойств(ЗначенияПараметровОрганизации, ВыборкаПоДаннымОрганизации);
			
			Если ПустаяСтрока(ЗначенияПараметровОрганизации["ДокументПредставление"]) Тогда
				ЗначенияПараметровОрганизации["ДокументПредставление"] = ПустоеПредставлениеДокумента;
			КонецЕсли;
			
			ЗаполнитьПараметрыДат(Выборки.ГруппировкаОрганизация.Шапка, ВыборкаПоДаннымОрганизации, ЗначенияПараметровОрганизации, ВычисляемыеПараметры);
			
			ЗначенияПараметров = ЗначенияПараметровОрганизации;
		Иначе
			ЗначенияПараметров = ПустыеЗначенияПоДаннымОрганизации;
		КонецЕсли;
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		
		// Часть Контрагента
		Если СчетчикСтрок <= КоличествоСтрокПоДаннымКонтрагента Тогда
			ВыборкаПоДаннымКонтрагента.Следующий();
			
			ЗаполнитьЗначенияСвойств(ЗначенияПараметровКонтрагента, ВыборкаПоДаннымКонтрагента);
			
			Если ПустаяСтрока(ЗначенияПараметровКонтрагента["ДокументПредставлениеК"]) Тогда
				ЗначенияПараметровКонтрагента["ДокументПредставлениеК"] = ПустоеПредставлениеДокумента;
			КонецЕсли;
			
			ЗаполнитьПараметрыДат(Выборки.ГруппировкаОрганизация.Шапка, ВыборкаПоДаннымКонтрагента, ЗначенияПараметровКонтрагента, ВычисляемыеПараметры, "К");
			
			ЗначенияПараметров = ЗначенияПараметровКонтрагента;
		Иначе
			ЗначенияПараметров = ПустыеЗначенияПоДаннымКонтрагента;
		КонецЕсли;
		ОбластьСтрока.Параметры.Заполнить(ЗначенияПараметров);
		
		ЗаполняемыйТабличныйДокумент.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиИтогиОрганизации(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры, ВключатьОборотыЗаПериод)
	
	Если Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"] Тогда
		ОбластьОрганизацияОбороты			= ИспользуемыеОбласти["ОрганизацияОборотыСверкаСогласована"];
		ОбластьОрганизацияСальдоКонечное	= ИспользуемыеОбласти["ОрганизацияСальдоКонечноеСверкаСогласована"];
	Иначе
		ОбластьОрганизацияОбороты			= ИспользуемыеОбласти["ОрганизацияОбороты"];
		ОбластьОрганизацияСальдоКонечное	= ИспользуемыеОбласти["ОрганизацияСальдоКонечное"];
	КонецЕсли;
	
	//---
	// Итого обороты
	//---
	Если Выборки["ГруппировкаОрганизация"]["ЕстьПоДаннымОрганизации"] Тогда
		СуммаОборотДт	= Выборки["ГруппировкаОрганизация"]["ПоДаннымОрганизации"]["Дебет"];
		СуммаОборотКт	= Выборки["ГруппировкаОрганизация"]["ПоДаннымОрганизации"]["Кредит"];  
		
		//АБК
		СуммаОборотБезвозмедныйДт	= Выборки["ГруппировкаОрганизация"]["ПоДаннымОрганизации"]["ДебетБезвозмездный"];
		СуммаОборотБезвозмедныйКт	= Выборки["ГруппировкаОрганизация"]["ПоДаннымОрганизации"]["КредитБезвозмездный"];  
		//АБК
	Иначе
		СуммаОборотДт	= 0;
		СуммаОборотКт	= 0;     
		
		//АБК
		СуммаОборотБезвозмедныйДт	= 0;
		СуммаОборотБезвозмедныйКт	= 0;  
		//АБК
	КонецЕсли;
	Если Выборки["ГруппировкаОрганизация"]["ЕстьПоДаннымКонтрагента"] Тогда
		СуммаОборотДтК	= Выборки["ГруппировкаОрганизация"]["ПоДаннымКонтрагента"]["ДебетК"];
		СуммаОборотКтК	= Выборки["ГруппировкаОрганизация"]["ПоДаннымКонтрагента"]["КредитК"];   
		
		//АБК
		СуммаОборотБезвозмедныйДтК	= Выборки["ГруппировкаОрганизация"]["ПоДаннымКонтрагента"]["ДебетБезвозмездныйК"];
		СуммаОборотБезвозмедныйКтК	= Выборки["ГруппировкаОрганизация"]["ПоДаннымКонтрагента"]["КредитБезвозмездныйК"];      
		//АБК
	Иначе
		СуммаОборотДтК	= 0;
		СуммаОборотКтК	= 0; 
		
		//АБК
		СуммаОборотБезвозмедныйДтК	= 0;
		СуммаОборотБезвозмедныйКтК	= 0;  
		//АБК
	КонецЕсли;
	ЗначенияПараметров = Новый Структура();                          
	Если ВключатьОборотыЗаПериод Тогда
		ЗначенияПараметров.Вставить("СуммаОборотДт",	СуммаОборотДт);
		ЗначенияПараметров.Вставить("СуммаОборотКт",	СуммаОборотКт);
		ЗначенияПараметров.Вставить("СуммаОборотДтК",	СуммаОборотДтК);
		ЗначенияПараметров.Вставить("СуммаОборотКтК",	СуммаОборотКтК); 
	Иначе
		ЗначенияПараметров.Вставить("СуммаОборотДт",	СуммаОборотДт - СуммаОборотБезвозмедныйДт);
		ЗначенияПараметров.Вставить("СуммаОборотКт",	СуммаОборотКт - СуммаОборотБезвозмедныйКт);
		ЗначенияПараметров.Вставить("СуммаОборотДтК",	СуммаОборотДтК - СуммаОборотБезвозмедныйДтК);
		ЗначенияПараметров.Вставить("СуммаОборотКтК",	СуммаОборотКтК - СуммаОборотБезвозмедныйКтК); 
	КонецЕсли;
	ОбластьОрганизацияОбороты.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьОрганизацияОбороты);
	
	//---
	// Конечные остатки
	//---
	Если Выборки["ГруппировкаОрганизация"]["ЕстьОстатки"] Тогда
		ОстатокНаНачало	= Выборки["ГруппировкаОрганизация"]["Остатки"]["ОстатокНаНачало"];
	Иначе
		ОстатокНаНачало	= 0;
	КонецЕсли;
	ОстатокНаКонец	= ОстатокНаНачало + (СуммаОборотДт - СуммаОборотКт);
	ОстатокНаКонецК	= ОстатокНаНачало - (СуммаОборотДтК - СуммаОборотКтК);  
	
	//АБК
	ОстатокНаКонец		= ОстатокНаКонец + (СуммаОборотБезвозмедныйКт - СуммаОборотБезвозмедныйДт);
	ОстатокНаКонецК	= ОстатокНаКонецК - (СуммаОборотБезвозмедныйКтК - СуммаОборотБезвозмедныйДтК); 
	//АБК
	
	СуммаКонечныйОстатокДт		= ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
	СуммаКонечныйОстатокКт		= ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
	
	// Конечные остатки по данным контрагента
	СуммаКонечныйОстатокДтК		= ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
	СуммаКонечныйОстатокКтК		= ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
	
	Если Не ВычисляемыеПараметры.ВыводитьСальдоКПоДокументуВЦелом Тогда
		СуммаКонечныйОстатокДтК = 0;
		СуммаКонечныйОстатокКтК = 0;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("СуммаКонечныйОстатокДт",	СуммаКонечныйОстатокДт);
	ЗначенияПараметров.Вставить("СуммаКонечныйОстатокКт",	СуммаКонечныйОстатокКт);
	ЗначенияПараметров.Вставить("СуммаКонечныйОстатокДтК",	СуммаКонечныйОстатокДтК);
	ЗначенияПараметров.Вставить("СуммаКонечныйОстатокКтК",	СуммаКонечныйОстатокКтК);
	ОбластьОрганизацияСальдоКонечное.Параметры.Заполнить(ЗначенияПараметров);
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьОрганизацияСальдоКонечное);
	
	ВычисляемыеПараметры.Вставить("ОстатокНаКонец",		ОстатокНаКонец);
	ВычисляемыеПараметры.Вставить("ОстатокНаКонецК",	ОстатокНаКонецК);
	
КонецПроцедуры

Процедура ВывестиПодвалОрганизации(ЗаполняемыйТабличныйДокумент, ИспользуемыеОбласти, Выборки, ВычисляемыеПараметры)
	
	ОбластьПодвал = ИспользуемыеОбласти["Подвал"];
	
	ВыборкаШапка = Выборки["ГруппировкаОрганизация"]["Шапка"];
	
	СверкаСогласована = Выборки["ГруппировкаДокументСсылка"]["Шапка"]["СверкаСогласована"];
	
	ОрганизацияПредставление	= ВычисляемыеПараметры.ОрганизацияПредставлениеОт;
	КонтрагентПредставление		= ВычисляемыеПараметры.КонтрагентПредставлениеОт;
	ОстатокНаКонец				= ВычисляемыеПараметры["ОстатокНаКонец"];
	ОстатокНаКонецК				= ВычисляемыеПараметры["ОстатокНаКонецК"];
	Если ВыборкаШапка["Валюта"]	= ВычисляемыеПараметры["ВалютаРУ"] Тогда
		ВалютаПредставление		= НСтр("ru='руб.'");
	Иначе
		ВалютаПредставление		= ВыборкаШапка["ВалютаПредставление"];
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаШапка["ДатаОкончания"]) Тогда
		РезультатыСверки	= НСтр("ru='<не указана дата сверки>'");
		РезультатыСверкиК	= РезультатыСверки;
		ИтогСверки			= "";
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КонтрагентПредставление) Тогда
		РезультатыСверки	= НСтр("ru='<не указан контрагент>'");
		РезультатыСверкиК	= РезультатыСверки;
		ИтогСверки			= "";
		
	Иначе
		ШаблонРезультатыСверки		= НСтр("ru='на [Дата] задолженность [ОписаниеЗадолженности].'");
		ШаблонОписаниеЗадолженности	= НСтр("ru='в пользу [СторонаСверки] [СуммаЧислом][НеразрывныйПробел][ВалютаПредставление] ([СуммаПрописью])'");
		ШаблонИтогСверки			= Символы.ПС + "[ОписаниеИтогаСверки]" + Символы.ПС + " ";
		ШаблонОписаниеИтогаСверки	= НСтр("ru='В результате сверки выявлено расхождение информации о состоянии расчетов в размере [СуммаЧислом][НеразрывныйПробел][ВалютаПредставление] ([СуммаПрописью])'");
		
		//
		// По данным организации
		//
		// Описание задолженности
		Если ОстатокНаКонец = 0 Тогда
			ОписаниеЗадолженности = НСтр("ru='отсутствует'");
		Иначе
			Если ОстатокНаКонец > 0 Тогда
				СторонаСверки	= СокрЛП(ОрганизацияПредставление);
				Сумма			= ОстатокНаКонец;
			Иначе
				СторонаСверки	= СокрЛП(КонтрагентПредставление);
				Сумма			= -ОстатокНаКонец;
			КонецЕсли;
			
			ВставляемыеЗначения = Новый Структура();
			ВставляемыеЗначения.Вставить("СторонаСверки",		СторонаСверки);
			ВставляемыеЗначения.Вставить("СуммаЧислом",			Формат(Сумма, "ЧЦ=21; ЧДЦ=2"));
			ВставляемыеЗначения.Вставить("НеразрывныйПробел",	Символы.НПП);
			ВставляемыеЗначения.Вставить("ВалютаПредставление",	ВалютаПредставление);
			ВставляемыеЗначения.Вставить("СуммаПрописью",		ПлатежноРасчетныеДокументы.ФорматироватьСуммуПрописьюПлатежногоДокумента(
																	Сумма,
																	ВыборкаШапка["Валюта"],
																	Ложь));
			ОписаниеЗадолженности = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОписаниеЗадолженности, ВставляемыеЗначения);
		КонецЕсли;
		// Результаты сверки по данным организации
		ВставляемыеЗначения = Новый Структура();
		ВставляемыеЗначения.Вставить("Дата",					Формат(ВыборкаШапка["ДатаОкончания"], "ДФ=dd.MM.yyyy"));
		ВставляемыеЗначения.Вставить("ОписаниеЗадолженности",	ОписаниеЗадолженности);
		РезультатыСверки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонРезультатыСверки, ВставляемыеЗначения);
		
		//
		// По данным контрагента
		//
		// Описание задолженности
		Если ОстатокНаКонец = 0 Тогда
			ОписаниеЗадолженности = НСтр("ru='отсутствует'");
		Иначе
			Если ОстатокНаКонецК > 0 Тогда
				СторонаСверки	= СокрЛП(ОрганизацияПредставление);
				Сумма			= ОстатокНаКонецК;
		   	Иначе
				СторонаСверки	= СокрЛП(КонтрагентПредставление);
				Сумма			= -ОстатокНаКонецК;
			КонецЕсли;
			
			ВставляемыеЗначения = Новый Структура();
			ВставляемыеЗначения.Вставить("СторонаСверки",		СторонаСверки);
			ВставляемыеЗначения.Вставить("СуммаЧислом",			Формат(Сумма, "ЧЦ=21; ЧДЦ=2"));
			ВставляемыеЗначения.Вставить("НеразрывныйПробел",	Символы.НПП);
			ВставляемыеЗначения.Вставить("ВалютаПредставление",	ВалютаПредставление);
			ВставляемыеЗначения.Вставить("СуммаПрописью",		ПлатежноРасчетныеДокументы.ФорматироватьСуммуПрописьюПлатежногоДокумента(
																	Сумма,
																	ВыборкаШапка["Валюта"],
																	Ложь));
			ОписаниеЗадолженности = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОписаниеЗадолженности, ВставляемыеЗначения);
		КонецЕсли;
		// Результаты сверки по данным контрагента
		Если СверкаСогласована Тогда
			ВставляемыеЗначения = Новый Структура();
			ВставляемыеЗначения.Вставить("Дата",					Формат(ВыборкаШапка["ДатаОкончания"], "ДФ=dd.MM.yyyy"));
			ВставляемыеЗначения.Вставить("ОписаниеЗадолженности",	ОписаниеЗадолженности);
			РезультатыСверкиК = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонРезультатыСверки, ВставляемыеЗначения);
		Иначе
			РезультатыСверкиК = "";
		КонецЕсли;
		
		//
		// Итог сверки
		//
		Если СверкаСогласована Тогда
			Расхождение = ОстатокНаКонец - ОстатокНаКонецК;
			
			Если Расхождение = 0 Тогда
				ОписаниеИтогаСверки = "";
			Иначе
				Если Расхождение > 0 Тогда
					Сумма = Расхождение;
				Иначе
					Сумма = -Расхождение;
				КонецЕсли;
				
				ВставляемыеЗначения = Новый Структура();
				ВставляемыеЗначения.Вставить("ВалютаПредставление",	ВалютаПредставление);
				ВставляемыеЗначения.Вставить("НеразрывныйПробел",	Символы.НПП);
				ВставляемыеЗначения.Вставить("СуммаЧислом",			Формат(Сумма, "ЧЦ=21; ЧДЦ=2"));
				ВставляемыеЗначения.Вставить("СуммаПрописью",		ПлатежноРасчетныеДокументы.ФорматироватьСуммуПрописьюПлатежногоДокумента(
																		Сумма,
																		ВыборкаШапка["Валюта"],
																		Ложь));
				ОписаниеИтогаСверки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонОписаниеИтогаСверки, ВставляемыеЗначения);
			КонецЕсли;
		Иначе
			Если ВычисляемыеПараметры.ВыводитьНадписьСверкаНеСогласована Тогда
				ОписаниеИтогаСверки = НСтр("ru='Сверка не согласована'");
			Иначе
				ОписаниеИтогаСверки = "";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеИтогаСверки) Тогда
			ВставляемыеЗначения = Новый Структура();
			ВставляемыеЗначения.Вставить("ОписаниеИтогаСверки",	ОписаниеИтогаСверки);
			
			ИтогСверки = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонИтогСверки, ВставляемыеЗначения);
		Иначе
			ИтогСверки = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ОрганизацияПредставление",	ОрганизацияПредставление);
	ЗначенияПараметров.Вставить("ФИОГлавбуха",				ВычисляемыеПараметры["ФИОГлавбуха"]);
	ЗначенияПараметров.Вставить("ПредставительДолжность",	ВычисляемыеПараметры["ПредставительДолжность"]);
	ЗначенияПараметров.Вставить("ФИОПредставителя",			ВычисляемыеПараметры["ФИОПредставителя"]);
	
	ЗначенияПараметров.Вставить("ФИОИсполнителя",			ВычисляемыеПараметры["ФИОИсполнителя"]);
	ЗначенияПараметров.Вставить("ТелИсполнителя",			ВычисляемыеПараметры["ТелИсполнителя"]);
	
	ЗначенияПараметров.Вставить("КонтрагентПредставление",	КонтрагентПредставление);
	ЗначенияПараметров.Вставить("ПредставительДолжностьК",	ВычисляемыеПараметры["ПредставительДолжностьК"]);
	ЗначенияПараметров.Вставить("ФИОПредставителяК",		ВычисляемыеПараметры["ФИОПредставителяК"]);
	
	ЗначенияПараметров.Вставить("РезультатыСверки",			РезультатыСверки);
	ЗначенияПараметров.Вставить("РезультатыСверкиК",		РезультатыСверкиК);
	ЗначенияПараметров.Вставить("ИтогСверки",				ИтогСверки);
	
	ОбластьПодвал.Параметры.Заполнить(ЗначенияПараметров);
	
	ЗаполняемыйТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ПолучитьСтруктуруВыборок()
	
	ПоляВыборок = "
		|ПоДаннымОрганизации,
		|ПоДаннымКонтрагента,
		|Остатки,
		|Шапка,
		|ЕстьПоДаннымОрганизации,
		|ЕстьПоДаннымКонтрагента,
		|ЕстьОстатки";
		
	Выборки = Новый Структура();
	Выборки.Вставить("ГруппировкаДокументСсылка",	Новый Структура(ПоляВыборок));
	Выборки.Вставить("ГруппировкаОрганизация",		Новый Структура(ПоляВыборок));
	Выборки.Вставить("ГруппировкаДоговор",			Новый Структура(ПоляВыборок));
	Выборки.Вставить("ДетальныеЗаписи",				Новый Структура(ПоляВыборок));
	
	Возврат Выборки;
	
КонецФункции

Процедура ПродвинутьВыборкиТекущейГруппировки(Выборки, ИмяПоляГруппировки)
	
	// Задающая выборка
	Поиск = Новый Структура(ИмяПоляГруппировки, Выборки["Группировка" + ИмяПоляГруппировки]["Шапка"][ИмяПоляГруппировки]);
	
	// Ведомая выборка ПоДаннымОрганизации
	Выборка = Выборки["Группировка" + ИмяПоляГруппировки]["ПоДаннымОрганизации"];
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Выборка.Сбросить();
		ЕстьВыборка = Выборка.НайтиСледующий(Поиск);
	Иначе
		ЕстьВыборка = Ложь;
	КонецЕсли;
	Выборки["Группировка" + ИмяПоляГруппировки]["ЕстьПоДаннымОрганизации"] = ЕстьВыборка;
	
	// Ведомая выборка ПоДаннымКонтрагента
	Выборка = Выборки["Группировка" + ИмяПоляГруппировки]["ПоДаннымКонтрагента"];
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Выборка.Сбросить();
		ЕстьВыборка = Выборка.НайтиСледующий(Поиск);
	Иначе
		ЕстьВыборка = Ложь;
	КонецЕсли;
	Выборки["Группировка" + ИмяПоляГруппировки]["ЕстьПоДаннымКонтрагента"] = ЕстьВыборка;
	
	// Ведомая выборка Остатки
	Выборка = Выборки["Группировка" + ИмяПоляГруппировки]["Остатки"];
	Если ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Выборка.Сбросить();
		ЕстьВыборка = Выборка.НайтиСледующий(Поиск);
	Иначе
		ЕстьВыборка = Ложь;
	КонецЕсли;
	Выборки["Группировка" + ИмяПоляГруппировки]["ЕстьОстатки"] = ЕстьВыборка;
	
КонецПроцедуры

Процедура ВыбратьСледующиеГруппировки(Выборки, ИмяПоляТекущейГруппировки, ИмяПоляСледующейГруппировки)
	
	// Задающая выборка
	Выборки["Группировка" + ИмяПоляСледующейГруппировки]["Шапка"] = Выборки["Группировка" + ИмяПоляТекущейГруппировки]["Шапка"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Ведомая выборка ПоДаннымОрганизации
	Выборки["Группировка" + ИмяПоляСледующейГруппировки]["ПоДаннымОрганизации"] = ?(
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["ЕстьПоДаннымОрганизации"],
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["ПоДаннымОрганизации"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
		Неопределено);
		
	// Ведомая выборка ПоДаннымКонтрагента
	Выборки["Группировка" + ИмяПоляСледующейГруппировки]["ПоДаннымКонтрагента"] = ?(
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["ЕстьПоДаннымКонтрагента"],
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["ПоДаннымКонтрагента"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
		Неопределено);
		
	// Ведомая выборка Остатки
	Выборки["Группировка" + ИмяПоляСледующейГруппировки]["Остатки"] = ?(
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["ЕстьОстатки"],
		Выборки["Группировка" + ИмяПоляТекущейГруппировки]["Остатки"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
		Неопределено);
	
КонецПроцедуры

Процедура ВыбратьДетальныеЗаписи(Выборки, ИмяПоследнегоУровняГруппировки)
	
	// Задающая выборка
	Выборки["ДетальныеЗаписи"]["Шапка"] = Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["Шапка"].Выбрать();
	
	// Ведомая выборка ПоДаннымОрганизации
	Если Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["ЕстьПоДаннымОрганизации"] Тогда
		Выборка = Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["ПоДаннымОрганизации"].Выбрать();
	Иначе
		Выборка = Неопределено;
	КонецЕсли;
	Выборки["ДетальныеЗаписи"]["ПоДаннымОрганизации"] = Выборка;
	Выборки["ДетальныеЗаписи"]["ЕстьПоДаннымОрганизации"] = (ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса"));
	
	// Ведомая выборка ПоДаннымКонтрагента
	Если Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["ЕстьПоДаннымКонтрагента"] Тогда
		Выборка = Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["ПоДаннымКонтрагента"].Выбрать();
	Иначе
		Выборка = Неопределено;
	КонецЕсли;
	Выборки["ДетальныеЗаписи"]["ПоДаннымКонтрагента"] = Выборка;
	Выборки["ДетальныеЗаписи"]["ЕстьПоДаннымКонтрагента"] = (ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса"));
		
	// Ведомая выборка Остатки
	Если Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["ЕстьОстатки"] Тогда
		Выборка = Выборки["Группировка" + ИмяПоследнегоУровняГруппировки]["Остатки"].Выбрать();
	Иначе
		Выборка = Неопределено;
	КонецЕсли;
	Выборки["ДетальныеЗаписи"]["Остатки"] = Выборка;
	Выборки["ДетальныеЗаписи"]["ЕстьОстатки"] = (ТипЗнч(Выборка) = Тип("ВыборкаИзРезультатаЗапроса"));
	
КонецПроцедуры		

#КонецОбласти

Функция ПолучитьДатыУчетныхДокументов(МассивСсылок)
	
	ТипыВидыДокументов = ПолучитьТипыВидыДокументов(МассивСсылок);
	
	Если ТипыВидыДокументов.ВидыДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоиск = Новый Запрос();
	ЗапросПоиск.УстановитьПараметр("МассивСсылок", МассивСсылок);
	ЗапросПоиск.Текст = СоставитьТекстЗапросаДатаПоВидамДокументов(ТипыВидыДокументов.ВидыДокументов);
	
	Таблица = ЗапросПоиск.Выполнить().Выгрузить();
	
	Таблица.Индексы.Добавить("Ссылка");
	
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьПараметрыДат(ВыборкаШапка, ВыборкаТаблица, ЗначенияПараметров, ВычисляемыеПараметры, ПостфиксИмен = "")
	
	ЗначенияПараметров["ДатаПервичногоДокумента" + ПостфиксИмен] = ЗначенияПараметров["Дата" + ПостфиксИмен];
	
	ЗначенияПараметров["ДатаУчетногоДокумента" + ПостфиксИмен] = НайтиДатуУчетногоДокумента(
		ЗначенияПараметров["Документ" + ПостфиксИмен],
		ВычисляемыеПараметры);
			
	Если ВычисляемыеПараметры["ВыводитьДатуУчетногоДокумента"] Тогда
		ЗначенияПараметров["Дата" + ПостфиксИмен] = ЗначенияПараметров["ДатаУчетногоДокумента" + ПостфиксИмен];
		
	ИначеЕсли ВыборкаШапка.ЭтоЭлектронныйДокумент Тогда
		ЗначенияПараметров["Дата" + ПостфиксИмен] = ВыборкаТаблица["ДатаДокумента" + ПостфиксИмен];
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТипыВидыДокументов(МассивСсылок)
	
	ТипыДокументов = Новый Массив();
	
	ВидыДокументов = Новый Массив();
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		ТипДокумента = ТипЗнч(Ссылка);
		
		Если ЗначениеЗаполнено(Ссылка) И ТипыДокументов.Найти(ТипДокумента) = Неопределено Тогда
			ТипыДокументов.Добавить(ТипДокумента);
			
			ВидыДокументов.Добавить(Метаданные.НайтиПоТипу(ТипДокумента).Имя);
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура();
	Результат.Вставить("ТипыДокументов", ТипыДокументов);
	Результат.Вставить("ВидыДокументов", ВидыДокументов);
	
	Возврат Результат;
	
КонецФункции

Функция СоставитьТекстЗапросаДатаПоВидамДокументов(ВидыДокументов)
	
	ТекстШаблон = "
	|ВЫБРАТЬ
	|	Ссылка	КАК Ссылка,
	|	Дата	КАК Дата
	|ИЗ
	|	Документ.%1
	|ГДЕ
	|	Ссылка В(&МассивСсылок)
	|";
	
	ТекстОбъединитьВсе = "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапроса = "";
	
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		ТекстЗапроса = ТекстЗапроса
			+ ?(ТекстЗапроса = "", "", ТекстОбъединитьВсе)
			+ СтрШаблон(ТекстШаблон, ВидДокумента);
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НайтиДатуУчетногоДокумента(ДокументСсылка, ВычисляемыеПараметры)
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) ИЛИ ВычисляемыеПараметры["ДатыУчетныхДокументов"] = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ВычисляемыеПараметры["Поиск"].Вставить("Ссылка", ДокументСсылка);
	
	МассивСтрок = ВычисляемыеПараметры["ДатыУчетныхДокументов"].НайтиСтроки(ВычисляемыеПараметры["Поиск"]);
	
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат МассивСтрок[0].Дата;
	КонецЕсли;
	
	Возврат '00010101';
	
КонецФункции

