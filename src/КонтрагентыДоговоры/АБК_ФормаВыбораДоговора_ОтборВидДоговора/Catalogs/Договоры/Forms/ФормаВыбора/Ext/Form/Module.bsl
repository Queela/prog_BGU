
&НаСервере
Процедура АБК_НачислениеДоходов_ИноеОснованиеОбязательства_ПриСозданииНаСервереВместо(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОперацииСервер.УстановитьОтборСпискаИзНастроекКомпоновки(СписокДополнительный, Параметры);
	БухгалтерскиеОперацииСервер.УстановитьОтборСпискаИзНастроекКомпоновки(Список, Параметры);
	
	Элементы.ОтборДоговорыСтудента.Видимость = Ложь;
	Элементы.ОтборКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	
	Если Параметры.Свойство("Отбор") Тогда
		
		Если Параметры.Отбор.Свойство("Организация") Тогда
			
			Элементы.ОтборОрганизация.ТолькоПросмотр = Истина;
			Элементы.СписокОрганизация.Видимость = Ложь;
			ОтборОрганизация = Параметры.Отбор["Организация"];
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДополнительный.Отбор, "Организация", ОтборОрганизация,,, ЗначениеЗаполнено(ОтборОрганизация));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Организация", ОтборОрганизация,,, ЗначениеЗаполнено(ОтборОрганизация));
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Контрагент") Тогда
			
			// Если как контрагента указали ребенка, студента или сотрудника, то заменим указанное значение контрагента
			// на соответствующий реквизит:
			РебенокСотрудникСсылка = Параметры.Отбор["Контрагент"];
			
			Если (ТипЗнч(РебенокСотрудникСсылка) = Тип("СправочникСсылка.Дети") ИЛИ  
				ТипЗнч(РебенокСотрудникСсылка) = Тип("СправочникСсылка.Сотрудники") ИЛИ 
				ТипЗнч(РебенокСотрудникСсылка) = Тип("СправочникСсылка.Студенты")) 
				И ЗначениеЗаполнено(РебенокСотрудникСсылка) Тогда
				
				КонтрагентСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РебенокСотрудникСсылка, "Контрагент");
				Параметры.Отбор.Вставить("Контрагент", КонтрагентСсылка);
				
				Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
					ИмяОрганизации = ?(ТипЗнч(РебенокСотрудникСсылка) = Тип("СправочникСсылка.Дети"), "Организация", "Владелец");
					ОтборОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РебенокСотрудникСсылка, ИмяОрганизации);
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДополнительный.Отбор, "Организация", ОтборОрганизация,,, ЗначениеЗаполнено(ОтборОрганизация));
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Организация", ОтборОрганизация,,, ЗначениеЗаполнено(ОтборОрганизация));
				КонецЕсли;
				
				Если ТипЗнч(РебенокСотрудникСсылка) = Тип("СправочникСсылка.Студенты") Тогда
					ОтборПоСтуденту = Истина;
					Элементы.НеПоказыватьОбщие.Видимость = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.ОтборКонтрагент.ТолькоПросмотр = Истина;
			Элементы.Контрагент.Видимость 			= Ложь;
			Элементы.СписокКонтрагент.Видимость 	= Ложь;
			
			ОтборКонтрагент = Параметры.Отбор["Контрагент"];
			
			Если ЗначениеЗаполнено(ОтборКонтрагент) Тогда
				
				СписокДляОтбора = Новый СписокЗначений();
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				СписокДляОтбора.Добавить(ОтборКонтрагент);
				СписокДляОтбора.Добавить(Справочники.Контрагенты.ПустаяСсылка());
				
			Иначе
				
				СписокДляОтбора = ОтборКонтрагент;
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				
			КонецЕсли;	
			
			// удаляем отбор из параметров, иначе в список добавится еще и он
			Параметры.Отбор.Удалить("Контрагент");
			
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДополнительный.Отбор, "Контрагент", СписокДляОтбора, ВидСравненияОтбора,, ЗначениеЗаполнено(ОтборКонтрагент));
			//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Контрагент", СписокДляОтбора, ВидСравненияОтбора,, ЗначениеЗаполнено(ОтборКонтрагент));
			Если ОтборПоСтуденту И ЗначениеЗаполнено(ОтборКонтрагент) Тогда
				
				Элементы.ОтборКонтрагент.ТолькоПросмотр = Ложь;
				Элементы.ОтборКонтрагент.Подсказка = НСтр("ru = 'Отбор по контрагенту следует отключить, 
													|если договор учащегося оформлен на другого контрагента, 
													|не зарегистрированного в качестве плательщика.'");
				Элементы.ОтборКонтрагент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
				
				Элементы.СписокКонтрагент.Видимость = Истина;
				Элементы.ОтборДоговорыСтудента.Видимость = Истина;
				ОтборДоговорыСтудента = Истина;
				
				Элементы.ОтборДоговорыСтудента.Видимость = Истина;
				Элементы.ОтборКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				
				// Дополним список отбора договорами обучения, которые оплачивает данный Контрагент (плательщик).
				ОтборОрганизация = ?(Параметры.Отбор.Свойство("Организация"), Параметры.Отбор["Организация"], Неопределено);
				УстановитьОтборДоговорамСтудента();
				
			ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьУчетСтудентов") И ЗначениеЗаполнено(ОтборКонтрагент)	Тогда
				
				Элементы.СписокКонтрагент.Видимость = Истина;
				
				// Дополним список отбора договорами обучения, которые оплачивает данный Контрагент (плательщик).
				ОтборОрганизация = ?(Параметры.Отбор.Свойство("Организация"), Параметры.Отбор["Организация"], Неопределено);
				УстановитьОтборДоговорамСтудента();
				
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Контрагент", СписокДляОтбора, ВидСравненияОтбора,, ЗначениеЗаполнено(ОтборКонтрагент));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ВидДоговора") Тогда
			//АпогейБК 2022.11.02 Отбор по нескольким видам договора по умолчанию   
			МассивВидовДоговоров = Новый Массив; 
			МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
			МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.ИноеОбязательство);
			МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			МассивВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СоглашениеОСубсидии);

			ОтборВидДоговора = Параметры.Отбор["ВидДоговора"]; 
			
			Если ТипЗнч(ОтборВидДоговора) = Тип("ПеречислениеСсылка.ВидыДоговоровКонтрагентов") Тогда
				Если МассивВидовДоговоров.Найти(ОтборВидДоговора) = Неопределено Тогда
					МассивВидовДоговоров.Добавить(Параметры.Отбор["ВидДоговора"]);	
				КонецЕсли;
				ОтборВидДоговора =  Новый СписокЗначений;
				Для Каждого Стр из МассивВидовДоговоров Цикл
					Если ОтборВидДоговора.НайтиПоЗначению(Стр) = Неопределено Тогда
						ОтборВидДоговора.Добавить(Стр);	
					КонецЕсли;
				КонецЦикла;
			Иначе
				
				Если ТипЗнч(ОтборВидДоговора) = Тип("СписокЗначений") Тогда
					Для Каждого Стр из МассивВидовДоговоров Цикл
						Если ОтборВидДоговора.НайтиПоЗначению(Стр) = Неопределено Тогда
							ОтборВидДоговора.Добавить(Стр);	
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ОтборВидДоговора) = Тип("Массив") Тогда
					Для Каждого Стр из МассивВидовДоговоров Цикл
						ОтборВидДоговора.Добавить(Стр);
					КонецЦикла;
				ИначеЕсли ТипЗнч(ОтборВидДоговора) = Тип("ФиксированныйМассив") Тогда
					мОтборВидДоговора = Новый Массив(ОтборВидДоговора);
					
					ОтборВидДоговора = Новый СписокЗначений;
					Для Каждого Стр из МассивВидовДоговоров Цикл
						ОтборВидДоговора.Добавить(Стр);
					КонецЦикла;
					
					Для Каждого Стр из мОтборВидДоговора Цикл
						Если ОтборВидДоговора.НайтиПоЗначению(Стр) = Неопределено Тогда
							ОтборВидДоговора.Добавить(Стр);	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;	

			КонецЕсли;
			//АпогейБК 2022.11.02
			Если ТипЗнч(ОтборВидДоговора) = Тип("ПеречислениеСсылка.ВидыДоговоровКонтрагентов") Тогда
				ВидСравненияДляОтбора = ВидСравненияКомпоновкиДанных.Равно;
				ТекстОтборВидДоговора = Строка(ОтборВидДоговора);
			Иначе
				ВидСравненияДляОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				
				Если ТипЗнч(ОтборВидДоговора) = Тип("СписокЗначений") Тогда
					ОтборВидДоговораМассив = ОтборВидДоговора.ВыгрузитьЗначения();
				ИначеЕсли ТипЗнч(ОтборВидДоговора) = Тип("Массив") Тогда
					ОтборВидДоговораМассив = ОтборВидДоговора;
					ОтборВидДоговора = Новый СписокЗначений;
					ОтборВидДоговора.ЗагрузитьЗначения(ОтборВидДоговораМассив);
				ИначеЕсли ТипЗнч(ОтборВидДоговора) = Тип("ФиксированныйМассив") Тогда
					ОтборВидДоговораМассив = Новый Массив(ОтборВидДоговора);
					ОтборВидДоговора = Новый СписокЗначений;
					ОтборВидДоговора.ЗагрузитьЗначения(ОтборВидДоговораМассив);
				КонецЕсли;	
				
				ТекстОтборВидДоговора = СтрСоединить(ОтборВидДоговораМассив, ",");
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДополнительный.Отбор, "ВидДоговора", ОтборВидДоговора, ВидСравненияДляОтбора,, ЗначениеЗаполнено(ОтборВидДоговора));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ВидДоговора", ОтборВидДоговора, ВидСравненияДляОтбора,, ЗначениеЗаполнено(ОтборВидДоговора));
			
		Иначе
			Элементы.ТекстОтборВидДоговора.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ДоговорЗаключен") Тогда
			
			ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, "ГруппаИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			ГруппаИЛИДоп = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокДополнительный.Отбор.Элементы, "ГруппаИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "ЗаключаетсяПоРезультатамКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, Ложь,, Истина);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИДоп, "ЗаключаетсяПоРезультатамКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, Ложь,, Истина);
			
			ГруппаИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ, "ГруппаИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			ГруппаИДоп = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИДоп, "ГруппаИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "ЗаключаетсяПоРезультатамКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, Истина,, Истина);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИ, "РезультатЗавершенияКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, 1,, Истина);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИДоп, "ЗаключаетсяПоРезультатамКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, Истина,, Истина);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИДоп, "РезультатЗавершенияКонкурсныхПроцедур", ВидСравненияКомпоновкиДанных.Равно, 1,, Истина);
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("КонтрактСУчастникомГОЗ") Тогда
			
			ОтборКонтрактСУчастникомГОЗ = Параметры.Отбор["КонтрактСУчастникомГОЗ"];
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокДополнительный.Отбор, "КонтрактСУчастникомГОЗ", ОтборКонтрактСУчастникомГОЗ, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "КонтрактСУчастникомГОЗ", ОтборКонтрактСУчастникомГОЗ, ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ОтдельныйСчетДляРасчетовПоГОЗ") Тогда
			
			ОтборОтдельныйСчетДляРасчетовПоГОЗ = Параметры.Отбор["ОтдельныйСчетДляРасчетовПоГОЗ"];
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокДополнительный.Отбор, "ОтдельныйСчетДляРасчетовПоГОЗ", ОтборОтдельныйСчетДляРасчетовПоГОЗ, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "ОтдельныйСчетДляРасчетовПоГОЗ", ОтборОтдельныйСчетДляРасчетовПоГОЗ, ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
			
		Если Параметры.Отбор.Свойство("ВестиГрафикПлатежей") Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокДополнительный.Отбор, "ВестиГрафикПлатежей", Параметры.Отбор.ВестиГрафикПлатежей, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "ВестиГрафикПлатежей", Параметры.Отбор.ВестиГрафикПлатежей, ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;

		Если Параметры.Отбор.Свойство("ВестиПланГрафикИсполнения") Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				СписокДополнительный.Отбор, "ВестиПланГрафикИсполнения", Параметры.Отбор.ВестиПланГрафикИсполнения, ВидСравненияКомпоновкиДанных.Равно);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор, "ВестиПланГрафикИсполнения", Параметры.Отбор.ВестиПланГрафикИсполнения, ВидСравненияКомпоновкиДанных.Равно);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОтборАктуальность = "Действующие";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДополнительный.Отбор, "ВАрхиве", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ВАрхиве", Ложь);
	
	Элементы.ОтборОрганизация.ТолькоПросмотр = ЗначениеЗаполнено(ОтборОрганизация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокДополнительный, "Контрагент", ОтборКонтрагент);
	
	Если Параметры.Свойство("ТекущаяСтрока", НачальноеЗначениеВыбора) Тогда
		
		Элементы.СписокДополнительный.ТекущаяСтрока = Параметры.ТекущаяСтрока;
		Элементы.Список.ТекущаяСтрока 				= Параметры.ТекущаяСтрока;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		ИспользованиеОтбораПометкеУдаления = НЕ НачальноеЗначениеВыбора.ПометкаУдаления;
	Иначе
		ИспользованиеОтбораПометкеУдаления = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокДополнительный, "ПометкаУдаления", Ложь,,
		НСтр("ru = 'Не помеченные на удаление'"), ИспользованиеОтбораПометкеУдаления, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь,,
		НСтр("ru = 'Не помеченные на удаление'"), ИспользованиеОтбораПометкеУдаления,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный); 
	
	НеПоказыватьОбщие = ЗначениеЗаполнено(НачальноеЗначениеВыбора) И ЗначениеЗаполнено(НачальноеЗначениеВыбора.Контрагент);
	
	Если НЕ НеПоказыватьОбщие И ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		НеПоказыватьОбщие = ХранилищеОбщихНастроек.Загрузить("Договоры_ФормаВыбора_НеПоказыватьОбщие");
	КонецЕсли;
	
	УстновитьВидимостьОбщихДоговоров();
	
	Если НЕ Параметры.НикогдаНеВыбиратьДополнительные И (Параметры.ВыбиратьДополнительные ИЛИ ПолучитьФункциональнуюОпцию("РазрешитьВыборДоговоровСУчастиемКонтрагента")) Тогда
		Элементы.ВариантыСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	// Заполнение группы информационных ссылок
	ИнформационныйЦентрСервер.ВывестиКонтекстныеСсылки(ЭтаФорма, Элементы.ИнформационныеСсылки);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	

КонецПроцедуры
