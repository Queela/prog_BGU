
#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервереФормыСписка(Форма, ДинамическийСписок) Экспорт
		
	Элементы = Форма.Элементы;
	
	ЭлементСписок = Элементы.Найти(ДинамическийСписок); 
	
	Если ЭлементСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыПодключаемыхКоманд") Тогда    
		Возврат; // Нет подключаемых команд
	КонецЕсли;
	
	НастройкаУжеПрошла = Ложь;
	
	Попытка
		ДобавитьПодключаемыеКомандыНаФормуСписка(Форма, ДинамическийСписок, ЭлементСписок, НастройкаУжеПрошла);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось подключить расширение форм списков по причине: 
                            |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
	Если Не НастройкаУжеПрошла Тогда
		ПрочитатьНастройкиФормыИИзменитьСписок(Форма, ИмяПользователя(), ДинамическийСписок);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСоответствиеАгрегатныхФункций() Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("Сумма", 						"СУММА(%1)");
	Соответствие.Вставить("Количество различных", 		"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %1)");
	Соответствие.Вставить("Количество", 				"КОЛИЧЕСТВО(%1)");
	Соответствие.Вставить("Максимум", 					"МАКСИМУМ(%1)");
	Соответствие.Вставить("Минимум", 					"МИНИМУМ(%1)");
	Соответствие.Вставить("Среднее", 					"СРЕДНЕЕ(%1)");
	Соответствие.Вставить("Всегда из первой строки", 	"%1");
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьРеквизитыВДинамическийСписок(Форма, ДинамическийСписок, Настройки) Экспорт
	
	ОписаниеВложенныхЗапросов 	= Настройки.ОписаниеВложенныхЗапросов;
	ТаблицаПсевдонимов  		= Настройки.ТаблицаПсевдонимов;
	
	ОснонаяТаблица = Форма[ДинамическийСписок].ОсновнаяТаблица;
	
	Если Не Форма[ДинамическийСписок].ПроизвольныйЗапрос Тогда
		
		Форма[ДинамическийСписок].ПроизвольныйЗапрос 	= Истина;
		Форма[ДинамическийСписок].ТекстЗапроса 			= СформироватьЗапросПоОсновнойТаблице(ОснонаяТаблица);
		
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Форма[ДинамическийСписок].ТекстЗапроса);
	
	Пакет 		= СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1];
	Оператор 	= Пакет.Операторы[Пакет.Операторы.Количество()-1];
	
	ТекстВложенногоЗапроса 			= ПолучитьТекстВложенногоЗапроса(Форма, ОписаниеВложенныхЗапросов); 
	НаименованиеВложенногоЗапроса 	= ПолучитьНаименованиеВложенногоПакета();
	
	ИсточникВложенного = Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), НаименованиеВложенногоЗапроса);  
	ИсточникВложенного.Источник.Запрос.УстановитьТекстЗапроса(ТекстВложенногоЗапроса);
	
	ИсточникОсновной = Оператор.Источники.НайтиПоИмени(ОснонаяТаблица);
	ИсточникОсновной.Соединения.Добавить(ИсточникВложенного, СтрШаблон("%1.Ссылка = %2.Ссылка", ИсточникОсновной.Источник.Псевдоним, НаименованиеВложенногоЗапроса));
	
	Для Каждого СтрокаРеквизит Из ТаблицаПсевдонимов Цикл
		
		ВыражениеСхемыЗапроса = Оператор.ВыбираемыеПоля.Добавить(СтрШаблон("ЕСТЬNULL(%1.%2, %3)", НаименованиеВложенногоЗапроса, СтрокаРеквизит.ПсевдонимРеквизита, СтрокаРеквизит.ЗначениеПоУмолчанию));       
		Пакет.Колонки[Пакет.Колонки.Количество()-1].Псевдоним = СтрокаРеквизит.ПсевдонимРеквизита; 	
		
	КонецЦикла;
	
	Форма[ДинамическийСписок].ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого СтрокаРеквизит Из ТаблицаПсевдонимов Цикл
		
		Элементы = Форма.Элементы;
		
		Если (Элементы[ДинамическийСписок].ПодчиненныеЭлементы.Количество()) <= СтрокаРеквизит.Порядок Тогда
			Элемент = Элементы.Добавить(ДинамическийСписок + СтрокаРеквизит.ПсевдонимРеквизита, Тип("ПолеФормы"), Элементы[ДинамическийСписок]); 
		Иначе
			Элемент = Элементы.Вставить(ДинамическийСписок + СтрокаРеквизит.ПсевдонимРеквизита, Тип("ПолеФормы"), Элементы[ДинамическийСписок], Элементы[ДинамическийСписок].ПодчиненныеЭлементы[СтрокаРеквизит.Порядок]);
		КонецЕсли;
		Элемент.ПутьКДанным	= ДинамическийСписок + "." + СтрокаРеквизит.ПсевдонимРеквизита;
		Элемент.Заголовок	= СтрокаРеквизит.ЗаголовокНаФорме;	
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗаписатьНастройкиФормы(ИмяФормы, Пользователь, Настройки, ДинамическийСписок) Экспорт
	
	ХранилищеСистемныхНастроек.Сохранить(ИмяФормы + СтрШаблон("/НастройкиОтображенияДополнительныхКолонок_%1", ДинамическийСписок), "", Настройки,, Пользователь);	
	
КонецПроцедуры

Функция ПрочитатьНастройкиФормы(ИмяФормы, Пользователь, ДинамическийСписок, ПрочитатьВДерево = Ложь) Экспорт
	
	Настройки = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + СтрШаблон("/НастройкиОтображенияДополнительныхКолонок_%1", ДинамическийСписок), "",, Пользователь);
	
	Если Настройки <> Неопределено И ПрочитатьВДерево Тогда
		ПрочитатьНастройкиВДерево(Настройки);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция СформироватьЗапросПоОсновнойТаблице(ОсновнаяТаблица) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	Пакет 		= СхемаЗапроса.ПакетЗапросов.Добавить();
	Оператор	= Пакет.Операторы[0];
	
	МассивПодстрок = СтрРазделить(ОсновнаяТаблица, ".");
	МассивПодстрок.Удалить(0);
	
	Источник = Оператор.Источники.Добавить(ОсновнаяТаблица, СтрСоединить(МассивПодстрок, ""));
	
	Для Каждого ДоступноеПоле Из Источник.Источник.ДоступныеПоля Цикл
		Если ТипЗнч(ДоступноеПоле) = Тип("ДоступноеПолеСхемыЗапроса") Тогда
			Оператор.ВыбираемыеПоля.Добавить(ДоступноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет команду открытия настроек для добавления колонок в динамический список
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения	- 
//  ДинамическийСписок	 - Строка	 					- 
//  ЭлементСписок		 - ТаблицаФормы	 				- 
//
Процедура ДобавитьПодключаемыеКомандыНаФормуСписка(Форма, ДинамическийСписок, ЭлементСписок, НастройкаУжеПрошла)
	
	Элементы = Форма.Элементы;
	
	ИмяКоманды = СтрШаблон("АБК_%1_НастройкаОтображенияДанныхИзТабличныхЧастей", ДинамическийСписок);

	Если Элементы.Найти(ИмяКоманды) <> Неопределено Тогда
		НастройкаУжеПрошла = Истина;
		Возврат;
	КонецЕсли;
	
	Если (СтрНачинаетсяС(Форма.ИмяФормы, "Документ") Или СтрНачинаетсяС(Форма.ИмяФормы, "Справочник")) Тогда
		Если Элементы.Найти("КомандыФормы") <> Неопределено Тогда
			КоманднаяПанель = Элементы.КомандыФормы;
		Иначе 
			КоманднаяПанель = Форма.КоманднаяПанель;
		КонецЕсли;
	ИначеЕсли Форма.ИмяФормы = "ЖурналДокументов.ЖурналОпераций.Форма.ФормаСписка" Тогда
		КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "Обработка") Тогда
		КоманднаяПанель = Форма.КоманднаяПанель;
	Иначе 
		КоманднаяПанель = ЭлементСписок.КоманднаяПанель;
	КонецЕсли;
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие = "Подключаемый_ВыполнитьКоманду";
	
	Элемент = Элементы.Добавить(Команда.Имя, Тип("КнопкаФормы"), КоманднаяПанель);
	Элемент.ИмяКоманды					= Команда.Имя;
	Элемент.Заголовок					= НСтр("ru = 'Настройка отображения данных из табличных частей'");
	Элемент.ПоложениеВКоманднойПанели	= ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд);
	
	НоваяСтрока	= ТаблицаКоманд.Добавить();
	НоваяСтрока.ИмяВФорме			= Команда.Имя;
	НоваяСтрока.Обработчик			= "ОбщийМодуль.АБК_РасширениеФормСписковКлиент.ОткрытьНастройкуОтображенияДанныхИзТабличныхЧастей";
	НоваяСтрока.МножественныйВыбор	= Ложь;
	НоваяСтрока.ДополнительныеПараметры.Вставить("ИдентификаторыМетаданных", 	МассивИдентификаторовМетаданныхПоСписку(Форма[ДинамическийСписок]));
	НоваяСтрока.ДополнительныеПараметры.Вставить("МассивПсевдонимов", 			СписокПсевдонимовДинамическогоСписка(Форма[ДинамическийСписок]));
	
КонецПроцедуры

Процедура ПрочитатьНастройкиВДерево(Настройки)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Настройки);
	
	Структура = ПрочитатьJSON(ЧтениеJSON);
	
	ОписанияРеквизитов 	= ЗначениеИзСтрокиВнутр(Структура.ОписанияРеквизитов);
	ТаблицаРеквизитов	= ЗначениеИзСтрокиВнутр(Структура.ТаблицаРеквизитов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОписанияРеквизитов.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	ОписанияРеквизитов.ТабличнаяЧасть КАК ТабличнаяЧасть,
	|	ОписанияРеквизитов.НаименованиеРеквизита КАК НаименованиеРеквизита,
	|	ОписанияРеквизитов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ОписанияРеквизитов.ПолноеИмя КАК ПолноеИмя,
	|	ОписанияРеквизитов.АгрегатнаяФункция КАК АгрегатнаяФункция
	|ПОМЕСТИТЬ ОписанияРеквизитов
	|ИЗ
	|	&ОписанияРеквизитов КАК ОписанияРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеквизитов.ПсевдонимРеквизита КАК ПсевдонимРеквизита,
	|	ТаблицаРеквизитов.ЗаголовокНаФорме КАК ЗаголовокНаФорме,
	|	ТаблицаРеквизитов.Порядок КАК Порядок,
	|	ТаблицаРеквизитов.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаРеквизитов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ПОМЕСТИТЬ ТаблицаРеквизитов
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРеквизитов.ПсевдонимРеквизита КАК ПсевдонимРеквизита,
	|	ТаблицаРеквизитов.ЗаголовокНаФорме КАК ЗаголовокНаФорме,
	|	ТаблицаРеквизитов.Порядок КАК Порядок,
	|	ОписанияРеквизитов.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	ОписанияРеквизитов.ТабличнаяЧасть КАК ТабличнаяЧасть,
	|	ОписанияРеквизитов.НаименованиеРеквизита КАК НаименованиеРеквизита,
	|	ОписанияРеквизитов.ПолноеИмя КАК ПолноеИмя,
	|	ОписанияРеквизитов.АгрегатнаяФункция КАК АгрегатнаяФункция,
	|	ТаблицаРеквизитов.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию
	|ИЗ
	|	ОписанияРеквизитов КАК ОписанияРеквизитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРеквизитов КАК ТаблицаРеквизитов
	|		ПО ОписанияРеквизитов.ИдентификаторСтроки = ТаблицаРеквизитов.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеРеквизита";
	Запрос.УстановитьПараметр("ОписанияРеквизитов", ОписанияРеквизитов);
	Запрос.УстановитьПараметр("ТаблицаРеквизитов", 	ТаблицаРеквизитов);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеВложенныхЗапросов = Новый ДеревоЗначений;
	ОписаниеВложенныхЗапросов.Колонки.Добавить("ИдентификаторОбъекта");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("ТабличнаяЧасть");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("ПолноеИмя");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("НаименованиеРеквизита");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("АгрегатнаяФункция");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("ПсевдонимРеквизита");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("ЗначениеПоУмолчанию");
	ОписаниеВложенныхЗапросов.Колонки.Добавить("НомерКолонки");
	
	СтрукрутаПсевдонимов = Новый Структура;
	СтрукрутаПсевдонимов.Вставить("Ссылка", 1);
	
	Для Каждого ОписаниеРеквизита Из ТаблицаРезультат Цикл
		
		СписокСвойствРодительскойСтроки = "ИдентификаторОбъекта, ТабличнаяЧасть, ПолноеИмя";
		
		Отбор = Новый Структура(СписокСвойствРодительскойСтроки);
		ЗаполнитьЗначенияСвойств(Отбор, ОписаниеРеквизита);
		
		НайденныеСтроки = ОписаниеВложенныхЗапросов.Строки.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() Тогда
			ОписаниеКолонкиДерева = НайденныеСтроки[0].Строки.Добавить();
		Иначе
			НоваяСтрока = ОписаниеВложенныхЗапросов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеРеквизита, СписокСвойствРодительскойСтроки);
			ОписаниеКолонкиДерева 	= НоваяСтрока.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОписаниеКолонкиДерева, ОписаниеРеквизита);
		
		Если Не СтрукрутаПсевдонимов.Свойство(ОписаниеРеквизита.ПсевдонимРеквизита, ОписаниеКолонкиДерева.НомерКолонки) Тогда
			СтрукрутаПсевдонимов.Вставить(ОписаниеРеквизита.ПсевдонимРеквизита, СтрукрутаПсевдонимов.Количество()); // +2 потому что 1 колонка всегда будет Ссылка
			ОписаниеКолонкиДерева.НомерКолонки = СтрукрутаПсевдонимов[ОписаниеРеквизита.ПсевдонимРеквизита];
		КонецЕсли;
		
	КонецЦикла;
		
	Настройки = Новый Структура("ОписаниеВложенныхЗапросов, ТаблицаПсевдонимов");
	Настройки.ОписаниеВложенныхЗапросов = ОписаниеВложенныхЗапросов;
	Настройки.ТаблицаПсевдонимов		= ТаблицаРеквизитов;
	
КонецПроцедуры

Процедура ПрочитатьНастройкиФормыИИзменитьСписок(Форма, Пользователь, ДинамическийСписок)
	
	Настройки = ПрочитатьНастройкиФормы(Форма.ИмяФормы, Пользователь, ДинамическийСписок, Истина);
	
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДобавитьРеквизитыВДинамическийСписок(Форма, ДинамическийСписок, Настройки);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Не удалось подключить настройки из расширения форм списков по причине: 
                            |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьТекстВложенногоЗапроса(Форма, ОписаниеВложенныхЗапросов)
	
	СоответствиеАгрегатныхФункций = ПолучитьСоответствиеАгрегатныхФункций();
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить();
	ПервыйПакет  = Истина;
	МассивТаблиц = Новый Массив;
	
	Для Каждого СтрокаТабличнаяЧасть Из ОписаниеВложенныхЗапросов.Строки Цикл
		
		Оператор = Неопределено;
		
		// Поиск одинаковых источников, в случае если мы добавим колонки из разных табличных частей объекта,
		// мы добавляем их в один пакет объединения и соединяем по ссылке, т.к. если добавить их в разные пакеты
		// получим дублирование ссылок в списке
		Для Каждого ОператорСхемыЗапроса Из ПакетЗапроса.Операторы Цикл
			Для Каждого ИсточникСхемыЗапроса Из ОператорСхемыЗапроса.Источники Цикл
				Если СтрНайти(ИсточникСхемыЗапроса.Источник.ИмяТаблицы, СтрокаТабличнаяЧасть.ПолноеИмя) Тогда
					Оператор = ОператорСхемыЗапроса;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Оператор = Неопределено Тогда
			Если ПервыйПакет Тогда
				Оператор = ПакетЗапроса.Операторы[0];
			Иначе 
				Оператор = ПакетЗапроса.Операторы.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ИзДокумента 		= ПустаяСтрока(СтрокаТабличнаяЧасть.ТабличнаяЧасть);
		ПсевдонимТаблицы 	= СтрЗаменить(СтрокаТабличнаяЧасть.ПолноеИмя + СтрокаТабличнаяЧасть.ТабличнаяЧасть, ".", "");
		Источник 			= Оператор.Источники.Добавить(СтрокаТабличнаяЧасть.ПолноеИмя + ?(ИзДокумента, "", "." + СтрокаТабличнаяЧасть.ТабличнаяЧасть), ПсевдонимТаблицы);
		
		МассивТаблиц.Добавить(ПсевдонимТаблицы);
		
		Для Каждого ОписаниеКолонки Из СтрокаТабличнаяЧасть.Строки Цикл
			
			ОписаниеКолонки.НаименованиеРеквизита = СтрЗаменить(ОписаниеКолонки.НаименованиеРеквизита, "Таблица.", ПсевдонимТаблицы + ".");
			
			ШаблонФункции = СоответствиеАгрегатныхФункций.Получить(ОписаниеКолонки.АгрегатнаяФункция);
			
			Если ШаблонФункции = Неопределено Тогда
				Оператор.ВыбираемыеПоля.Добавить(ОписаниеКолонки.НаименованиеРеквизита, ОписаниеКолонки.НомерКолонки);
			Иначе 
				Оператор.ВыбираемыеПоля.Добавить(СтрШаблон(ШаблонФункции, ОписаниеКолонки.НаименованиеРеквизита), ОписаниеКолонки.НомерКолонки);
				Если СтрДлина(ШаблонФункции) = 2 И Не ИзДокумента Тогда // Берем из первой строки
					Если Оператор.Отбор.Найти(СтрШаблон("%1.НомерСтроки = 1", ПсевдонимТаблицы)) = Неопределено Тогда 
						Оператор.Отбор.Добавить(СтрШаблон("%1.НомерСтроки = 1", ПсевдонимТаблицы));
					КонецЕсли;
				Иначе // Группируем
					Если Оператор.Группировка.Найти(СтрШаблон("%1.Ссылка", ПсевдонимТаблицы)) = Неопределено Тогда
						Оператор.Группировка.Добавить(СтрШаблон("%1.Ссылка", ПсевдонимТаблицы));
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
						
			Если ПакетЗапроса.Колонки.Найти(ОписаниеКолонки.ПсевдонимРеквизита) = Неопределено Тогда
				ПакетЗапроса.Колонки[ОписаниеКолонки.НомерКолонки].Псевдоним = ОписаниеКолонки.ПсевдонимРеквизита;	
			КонецЕсли;
			
		КонецЦикла;
		
		ПервыйПакет = Ложь;
		
	КонецЦикла;
	
	Для Каждого Оператор Из ПакетЗапроса.Операторы Цикл
		
		// Ссылку однозначно добавляем только в случае если у нас 1 таблица в пакете,
		// Иначе ссылку нужно брать из основной таблицы (не табличной части),
		// Если ее нет в пакете, то добавим
		Если Оператор.Источники.Количество() = 1 Тогда
			Оператор.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Ссылка", Оператор.Источники[0].Источник.Псевдоним), 0);
			Продолжить;	
		КонецЕсли;
		
		Подстроки 			= СтрРазделить(Оператор.Источники[0].Источник.ИмяТаблицы, ".");
		ИмяОсновнойТаблицы 	= Подстроки[0] + "." + Подстроки[1];
		
		ОсновнаяТаблица = Оператор.Источники.НайтиПоИмени(ИмяОсновнойТаблицы);
		Если ОсновнаяТаблица = Неопределено Тогда
			ОсновнаяТаблица = Оператор.Источники.Добавить(ИмяОсновнойТаблицы, СтрЗаменить(ОсновнаяТаблица, ".", ""));	
		КонецЕсли;
		
		ВыражениеСсылки = СтрШаблон("%1.Ссылка", ОсновнаяТаблица.Источник.Псевдоним);
		
		Оператор.ВыбираемыеПоля.Добавить(ВыражениеСсылки, 0);
		
		// При добавлении источников (таблиц), автоматом создаются соединения,
		// Удаляем и добавляем свои
		Для Каждого Источник Из Оператор.Источники Цикл
			Источник.Соединения.Очистить();
		КонецЦикла;
		
		Для Каждого Источник Из Оператор.Источники Цикл
			Если Источник.Источник.ИмяТаблицы <> ОсновнаяТаблица.Источник.ИмяТаблицы Тогда
				ОсновнаяТаблица.Соединения.Добавить(Источник, СтрШаблон("%1.Ссылка = %2.Ссылка", ОсновнаяТаблица.Источник.Псевдоним, Источник.Источник.Псевдоним));
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ПакетЗапроса.Колонки[0].Псевдоним = "Ссылка";
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();
		
КонецФункции                  

Функция МассивИдентификаторовМетаданныхПоСписку(ДинамическийСписок)
	
	Результат = Новый Массив;
	
	ОсновнаяТаблица = ДинамическийСписок.ОсновнаяТаблица;
	
	Если СтрНачинаетсяС(ОсновнаяТаблица, "ЖурналДокументов") Тогда
		Для Каждого ОбъектМетаданных Из Метаданные.ЖурналыДокументов[СтрРазделить(ОсновнаяТаблица, ".")[1]].РегистрируемыеДокументы Цикл
			Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных));
		КонецЦикла;
		Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документы"));
	Иначе 
		
		Если Не СтрНачинаетсяС(ОсновнаяТаблица, "Документ")
			Или Не СтрНачинаетсяС(ОсновнаяТаблица, "Справочник") Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОсновнаяТаблица));
		
		Класс = СтрРазделить(ОсновнаяТаблица, ".")[0];
		
		Если Класс = "Справочник" Тогда
			Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочники"));
		ИначеЕсли Класс = "Документ" Тогда
			Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документы"));
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СписокПсевдонимовДинамическогоСписка(ДинамическийСписок)
	
	Результат = Новый Массив;
	
	Если Не ДинамическийСписок.ПроизвольныйЗапрос Тогда
		ТекстЗапроса = СформироватьЗапросПоОсновнойТаблице(ДинамическийСписок.ОсновнаяТаблица);
	Иначе 
		ТекстЗапроса = ДинамическийСписок.ТекстЗапроса;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ПакетЗапроса = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1];
	Оператор 	 = ПакетЗапроса.Операторы[ПакетЗапроса.Операторы.Количество()-1];
	
	Для Каждого КолонкаСхемыЗапроса Из ПакетЗапроса.Колонки Цикл
		Результат.Добавить(КолонкаСхемыЗапроса.Псевдоним);	
	КонецЦикла;
	
	Для Каждого Источник Из Оператор.Источники Цикл
		Результат.Добавить(Источник.Источник.Псевдоним);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНаименованиеВложенногоПакета()
	
	НаименованиеПакета = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "_");
	
	КодПервогоСимвола = КодСимвола(НаименованиеПакета, 1);
	
	Если КодПервогоСимвола >= 48 И КодПервогоСимвола <= 57 Тогда   // Начинается на цифру
		НаименованиеПакета = "_" + НаименованиеПакета;	
	КонецЕсли;
	
	Возврат НаименованиеПакета;
	
КонецФункции

#КонецОбласти











