
&НаСервере
Процедура АБК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресТабличнойЧасти") Тогда
		
		Материалы = ПолучитьИзВременногоХранилища(Параметры.АдресТабличнойЧасти);
		
		Если ТипЗнч(Материалы) = Тип("ТаблицаЗначений") Тогда
			Объект.ПодобраннаяНоменклатура.Загрузить(Материалы);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	
	МассивРеквизитов.Добавить(Новый РеквизитФормы("КлючСтроки", 	Новый ОписаниеТипов()));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("СписокСвойств", 	ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("БыстрыйПоиск",	ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	Если ПоказыватьОстатки Тогда
		
		СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПоказыватьОстатки", ПоказыватьОстатки);
		
		СписокСвойств = "";
		
		СформироватьСписокСвойствОтбораНоменклатуры(СписокСвойств);
		ОбновитьКорзинуВСвойствахСписка();
		
		ЭтаФорма["СписокСвойств"] = СписокСвойств;
		
		СписокНоменклатуры.ВидКлюча 	= ВидКлючаДинамическогоСписка.КлючСтроки;
		СписокНоменклатуры.ПоляКлюча	= Новый ФиксированныйМассив(СтрРазделить(СписокСвойств, ","));
		
	КонецЕсли;
	
	Элемент = Элементы.Добавить("БыстрыйПоиск", Тип("ПолеФормы"), Элементы.ГруппаСтрокаПоиска);
	Элемент.ПутьКДанным 		= "БыстрыйПоиск";
	Элемент.Вид					= ВидПоляФормы.ПолеВвода;
	Элемент.ПодсказкаВвода 		= НСтр("ru = 'Быстрый поиск'");
	Элемент.ПоложениеЗаголовка 	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.УстановитьДействие("ПриИзменении", "БыстрыйПоискПриИзменении");
	
	Элемент = Элементы.Добавить("СписокНоменклатурыКартинка",Тип("ПолеФормы"),Элементы.СписокНоменклатуры);
	Элемент.ПутьКДанным			= "СписокНоменклатуры.Картинка";
	Элемент.Вид 				= ВидПоляФормы.ПолеКартинки;
	Элемент.КартинкаЗначений 	= БиблиотекаКартинок[Метаданные.ОбщиеКартинки.ЗеленыйШар.Имя];
	Элемент.ПоложениеЗаголовка	= ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискПриИзменении()
	
	ОтключитьОбработчикОжидания("ПрименитьПоискНаКлиенте");
	
	ПодключитьОбработчикОжидания("ПрименитьПоискНаКлиенте", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоискНаКлиенте()
	
	СтруктураКлюча = Новый Структура(ЭтаФорма["СписокСвойств"]);
	
	Если ПрименитьБыстрыйПоиск(ЭтаФорма["БыстрыйПоиск"], СтруктураКлюча) Тогда
		Элементы.СписокНоменклатуры.ТекущаяСтрока = Новый КлючСтрокиДинамическогоСписка(СтруктураКлюча);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрименитьБыстрыйПоиск(Текст, СтруктураКлюча)
	
	СхемаКомпоновкиДанных 	= Элементы.СписокНоменклатуры.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки 				= Элементы.СписокНоменклатуры.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Использование = Истина;
	ДетальныеЗаписи.Имя = "Группировка1";
	Автополе = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Автополе.Использование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор,
	"Номенклатура.Наименование",
	Текст,
	ВидСравненияКомпоновкиДанных.НачинаетсяС,
	,
	Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Результат = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если Результат.Количество() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, Результат[0]);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
&Перед("СписокНоменклатурыВыбор")
Процедура АБК_СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не ПоказыватьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма["КлючСтроки"] = ВыбраннаяСтрока[0];	
	
КонецПроцедуры

&НаКлиенте
Процедура АБК_ПодобраннаяНоменклатураПриИзмененииПосле(Элемент)
	
	Если Не ПоказыватьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКорзинуВСвойствахСписка();
	
	Элементы.СписокНоменклатуры.Обновить();
	
КонецПроцедуры

// Процедура - Обновить корзину в свойствах списка
//
// Сохраняет в доп свойства настроек компоновщика данные из корзины, 
// для уменьшения факт. остатка при получении данных на сервере списка номенклатуры 
//
&НаСервере
Процедура ОбновитьКорзинуВСвойствахСписка()
	
	Корзина = Объект.ПодобраннаяНоменклатура.Выгрузить();
	
	Адрес = ПоместитьВоВременноеХранилище(Корзина, УникальныйИдентификатор);
	
	СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("АдресКорзины", Адрес);
	
КонецПроцедуры

// Процедура - Сформировать список свойств отбора номенклатуры
//
// Формирует список свойств структуры отбора для поиска номенклатуры в корзине во время получения данных
//
&НаСервере
Процедура СформироватьСписокСвойствОтбораНоменклатуры(СписокСвойств = "")
	
	Массив = Новый Массив;
	Массив.Добавить("Номенклатура");
	Массив.Добавить("СчетУчета");
	Массив.Добавить("КФО");
	
	ИспользоватьУчетПоКПС = Истина;
	
	Для Каждого Счет Из СчетУчета Цикл 
		
		Если НЕ Счет.Значение.УчетПоКПС Тогда
			ИспользоватьУчетПоКПС = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользоватьУчетПоКПС Тогда 
		Массив.Добавить("КПС");
	КонецЕсли;
	
	//Если СчетУчета[0].Значение.УчетПоКПС Тогда
	//	Массив.Добавить("КПС");
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСубконтоДополнительнойАналитикиСчета) Тогда
		Массив.Добавить("ДополнительнаяАналитикаСчета");
	КонецЕсли;
	
	Если ПодборОстатковВПользовании Тогда
		Массив.Добавить("КонтрагентВПользовании");
	КонецЕсли;
	
	Если РасширенныйПодборНоменклатуры Тогда
		Если УчетПоИФО Тогда
			Массив.Добавить("ИФО");
		КонецЕсли;
		Если УчетПоПодразделениям Тогда
			Массив.Добавить("Подразделение");
		КонецЕсли;
		Массив.Добавить("ЦМО");
	КонецЕсли;
	
	СписокСвойств = СтрСоединить(Массив, ",");
	
	СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокСвойствПоиска", СписокСвойств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АБК_СписокНоменклатурыПриПолученииДанныхНаСервереПосле(ИмяЭлемента, Настройки, Строки)
	
	Перем АдресКорзины;
	Перем СписокСвойствПоиска;
	Перем ПоказыватьОстатки;
	
	Если Не Настройки.ДополнительныеСвойства.Свойство("АдресКорзины", АдресКорзины)
		Или Не Настройки.ДополнительныеСвойства.Свойство("СписокСвойствПоиска", СписокСвойствПоиска)
		Или Не Настройки.ДополнительныеСвойства.Свойство("ПоказыватьОстатки", ПоказыватьОстатки)Тогда
		Возврат;
	КонецЕсли;
	
	Корзина = ПолучитьИзВременногоХранилища(Настройки.ДополнительныеСвойства.АдресКорзины);
	Корзина.Индексы.Добавить(СписокСвойствПоиска);
	
	Отбор = Новый Структура(СписокСвойствПоиска);
	
	Для Каждого СтрокаДинамическогоСписка Из Строки Цикл
		
		ДанныеСтроки = СтрокаДинамическогоСписка.Значение.Данные;
		
		ЗаполнитьЗначенияСвойств(Отбор, ДанныеСтроки);
		
		НайденныеСтроки = Корзина.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() Тогда
			
			ДанныеСтроки.КоличествоОстаток = ДанныеСтроки.КоличествоОстаток - НайденныеСтроки[0].Количество;
			ДанныеСтроки.Картинка = Истина;
			
		КонецЕсли;
		
		Если ДанныеСтроки.КоличествоОстаток <= 0 Тогда
			
			Для Каждого ЭлементОформления Из СтрокаДинамическогоСписка.Значение.Оформление Цикл
				ЭлементОформления.Значение.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 128, 128)); 
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
&Вместо("ТекстЗапросаОстатковМЗ")
Функция АБК_ТекстЗапросаОстатковМЗ()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕПСБУОстатки.Организация КАК Организация,
	|	&ЖурналПроводокЕПСБУОстатки_ИФО КАК ИФО,
	|	ВЫРАЗИТЬ(ЕПСБУОстатки.Субконто1 КАК Справочник.Номенклатура) КАК Номенклатура,
	|	&ЖурналПроводокЕПСБУОстатки_Субконто_КАК_Справочник_ЦМО КАК ЦМО,
	|	&ЖурналПроводокЕПСБУОстатки_ДопАналитика КАК ДополнительнаяАналитикаСчета,
	|	&ЖурналПроводокЕПСБУОстатки_КПС КАК КПС,
	|	ЕПСБУОстатки.КФО КАК КФО,
	|	ЕПСБУОстатки.Счет КАК СчетУчета,
	|	0 КАК КоличествоРезерв,
	|	ЕПСБУОстатки.КоличествоОстаток КАК КоличествоОстаток,
	// +АпогейБК
	|	ЕПСБУОстатки.КоличествоОстаток КАК ОбщКоличество,
	|	Ложь КАК Картинка,
	// -АпогейБК
	|	0 КАК КоличествоОстатокВключаяРезерв,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка) КАК ТипЦен,
	|	0 КАК Цена,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения,
	|	&ЕстьДополнительноеСубконто КАК ЕстьДополнительноеСубконто,
	|	ЕПСБУОстатки.СуммаОстаток КАК Сумма,
	|	&ЖурналПроводокЕПСБУОстатки_КонтрагентВПользовании КАК КонтрагентВПользовании
	|{ВЫБРАТЬ
	|	Организация,
	|	ИФО,
	|	Номенклатура.*,
	|	ЦМО,
	|	ДополнительнаяАналитикаСчета,
	|	КПС,
	|	КФО,
	|	СчетУчета,
	|	КоличествоОстаток,
	// +АпогейБК
	|	ОбщКоличество,
	|	Картинка,
	// -АпогейБК
	|	КоличествоРезерв,
	|	КоличествоОстатокВключаяРезерв,
	|	Валюта.*,
	|	ТипЦен.*,
	|	Цена,
	|	СтавкаНДС.*,
	|	ЕдиницаИзмерения.*,
	|	ЕстьДополнительноеСубконто,
	|	Сумма,
	|	КонтрагентВПользовании}
	|ИЗ
	|	#ТаблицаОстатки КАК ЕПСБУОстатки
	|ГДЕ
	|	ЕПСБУОстатки.КоличествоОстаток > 0
	|{ГДЕ
	|	ЕПСБУОстатки.Подразделение,
	|	ЕПСБУОстатки.КПС КАК КПС,
	|	ЕПСБУОстатки.КФО КАК КФО,
	|	ЕПСБУОстатки.Счет КАК СчетУчета,
	|	(&ЖурналПроводокЕПСБУОстатки_Субконто_КАК_Справочник_ЦМО) КАК ЦМО,
	|	(ВЫРАЗИТЬ(ЕПСБУОстатки.Субконто1 КАК Справочник.Номенклатура)).* КАК Номенклатура,
	|	(ВЫРАЗИТЬ(ЕПСБУОстатки.Субконто1 КАК Справочник.Номенклатура).ТипНоменклатуры) КАК ТипНоменклатуры,
	|	(&ЖурналПроводокЕПСБУОстатки_КонтрагентВПользовании) КАК КонтрагентВПользовании,
	|	(&ЖурналПроводокЕПСБУОстатки_ДопАналитика) КАК ДополнительнаяАналитикаСчета}";
	ТаблицаОстатки =
	"РегистрБухгалтерии.ЖурналПроводокЕПСБУ.Остатки(
	|		{(&ДатаОстатки)},
	|		Счет В (&СчетУчетаГлобальный){(Счет).* КАК СчетУчета},
	|		&ВидыСубконто,
	|		{&ПараметрыВиртуальнойТаблицы}) КАК ЕПСБУОстатки";
	Если ПроверятьОстаткиВПользовании Тогда
		ТаблицаОстатки = ТаблицаОстатки + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиВПользовании КАК ОстаткиВПользовании
		|		ПО ЕПСБУОстатки.Субконто1 = ОстаткиВПользовании.Номенклатура";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЕПСБУОстатки.КоличествоОстаток",
		"ВЫБОР
		|		КОГДА ЕПСБУОстатки.КоличествоОстаток < ОстаткиВПользовании.КоличествоВПользовании
		|			ТОГДА ЕПСБУОстатки.КоличествоОстаток
		|		ИНАЧЕ ОстаткиВПользовании.КоличествоВПользовании
		|	КОНЕЦ");
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаОстатки КАК ЕПСБУОстатки", ТаблицаОстатки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
&Вместо("ДобавитьВыбраннуюНоменклатуру")
Процедура АБК_ДобавитьВыбраннуюНоменклатуру(ПараметрыНоменклатуры, Количество, Пересчитывать)
	
	Если Пересчитывать = Неопределено Тогда
		Пересчитывать = Ложь;
	КонецЕсли;
	
	Если ПодборМЗВПути И ЗначениеЗаполнено(ПараметрыНоменклатуры.СчетУчета) Тогда
		ПараметрыНоменклатуры.СчетУчета = УправлениеМатериальнымиЗапасамиПовтИсп.СчетВПутиПоСчетуУчетаМЗ(
		ПараметрыНоменклатуры.СчетУчета);
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыПоиска.Вставить("СчетУчета", ПредопределенноеЗначение("ПланСчетов.ЕПСБУ.ПустаяСсылка"));
	ПараметрыПоиска.Вставить("КПС", ПредопределенноеЗначение("Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка"));
	ПараметрыПоиска.Вставить("КФО", ПредопределенноеЗначение("Перечисление.КВД.ПустаяСсылка"));
	
	Если ПараметрыНоменклатуры.Свойство("Цена") Тогда
		ПараметрыПоиска.Вставить("Цена");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСубконтоДополнительнойАналитикиСчета)
		ИЛИ ПараметрыНоменклатуры.ЕстьДополнительноеСубконто Тогда
		ПараметрыПоиска.Вставить("ДополнительнаяАналитикаСчета");
	КонецЕсли;
	
	Если ПодборОстатковВПользовании Тогда
		ПараметрыПоиска.Вставить("КонтрагентВПользовании");
	КонецЕсли;
	
	Если РасширенныйПодборНоменклатуры Тогда
		Если УчетПоИФО Тогда
			ПараметрыПоиска.Вставить("ИФО");
		КонецЕсли;
		Если УчетПоПодразделениям Тогда
			ПараметрыПоиска.Вставить("Подразделение");
		КонецЕсли;
		ПараметрыПоиска.Вставить("ЦМО");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ПараметрыНоменклатуры);
	
	НайденнаяСтрока = НайтиСтрокуКорзины(ПараметрыПоиска);
	Если НайденнаяСтрока = Неопределено Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыНоменклатуры);
	Иначе
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.НайтиПоИдентификатору(НайденнаяСтрока);
		ТекущаяСтрока.СтавкаНДС = ПараметрыНоменклатуры.СтавкаНДС;
	КонецЕсли;
	
	НовоеКоличество = ?(Пересчитывать, ПараметрыНоменклатуры.ДобавляемоеКоличество, Количество)
	+ ТекущаяСтрока.Количество;
	// +АпогейБК
	//Если ПараметрыНоменклатуры.Свойство("ОбщКоличество") Тогда
	//	НовоеКоличество = Мин(НовоеКоличество, ПараметрыНоменклатуры.ОбщКоличество);
	//КонецЕсли;
	// -АпогейБК
	
	ТекущаяСтрока.Количество = НовоеКоличество;
	
	Если ПараметрыНоменклатуры.Свойство("Цена") Тогда
		Если ПараметрыНоменклатуры.Свойство("ОбщКоличество") И ПараметрыНоменклатуры.ОбщКоличество = НовоеКоличество
			И ПараметрыНоменклатуры.Свойство("Сумма") И ЗначениеЗаполнено(ПараметрыНоменклатуры.Сумма) Тогда
			ТекущаяСтрока.Сумма = ПараметрыНоменклатуры.Сумма;
		Иначе
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
		КонецЕсли;
	КонецЕсли;
	
	ИндексДобавленнойСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	СформироватьИнформационнуюНадпись(ЭтотОбъект);
	
	// +АпогейБК
	
	Если Не ПоказыватьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКорзинуВСвойствахСписка();
	
	Элементы.СписокНоменклатуры.Обновить();
	
	Элементы.СписокНоменклатуры.ТекущаяСтрока = ЭтаФорма["КлючСтроки"];
	// -АпогейБК
	
КонецПроцедуры

&НаКлиенте
&Вместо("ДобавитьТекущуюСтроку")
Процедура АБК_ДобавитьТекущуюСтроку(ВыделенныеСтроки, ТекущийИндекс, ОжидатьВводДанных)
	
	ТекущиеДанные = ДанныеСтрокиНоменклатуры(ВыделенныеСтроки[ТекущийИндекс]);
	
	СтруктураПараметрыНоменклатуры = Новый Структура;
	СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Если ТекущиеДанные.Свойство("СчетУчета" ) Тогда
		СтруктураПараметрыНоменклатуры.Вставить("СчетУчета", ТекущиеДанные.СчетУчета);
	КонецЕсли;
	Если ТекущиеДанные.Свойство("ИФО") Тогда
		СтруктураПараметрыНоменклатуры.Вставить("ИФО", ТекущиеДанные.ИФО);
	КонецЕсли;
	Если ТекущиеДанные.Свойство("Подразделение") Тогда
		СтруктураПараметрыНоменклатуры.Вставить("Подразделение", ТекущиеДанные.Подразделение);
	КонецЕсли;
	Если ТекущиеДанные.Свойство("ЦМО") Тогда
		СтруктураПараметрыНоменклатуры.Вставить("ЦМО", ТекущиеДанные.ЦМО);
	КонецЕсли;
	Если ПоказыватьОстатки Тогда
		Если ТекущиеДанные.Свойство("КПС") Тогда
			СтруктураПараметрыНоменклатуры.Вставить("КПС", ТекущиеДанные.КПС);
		КонецЕсли;
		Если ТекущиеДанные.Свойство("КФО") Тогда
			СтруктураПараметрыНоменклатуры.Вставить("КФО", ТекущиеДанные.КФО);
		КонецЕсли;
	Иначе
		Если ЕстьКПСВТЧ Тогда
			СтруктураПараметрыНоменклатуры.Вставить("КПС", БыстрыйОтборКПС);
		КонецЕсли;
		Если ЕстьКФОВТЧ Тогда
			СтруктураПараметрыНоменклатуры.Вставить("КФО", БыстрыйОтборКФО);
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные.Свойство("Валюта") Тогда
		СтруктураПараметрыНоменклатуры.Вставить("Валюта", ТекущиеДанные.Валюта);
	КонецЕсли;
	Если ТекущиеДанные.Свойство("Цена") И ПоказыватьЦены И (ЗначениеЗаполнено(ТипЦен)
		ИЛИ ПодборОстатковВПользовании ИЛИ ПроверятьОстаткиВПользовании) Тогда
		ВалютаПараметров = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		СтруктураПараметрыНоменклатуры.Свойство("Валюта",ВалютаПараметров);
		Если ЗначениеЗаполнено(ВалютаПараметров)
			И ЗначениеЗаполнено(Валюта)
			И СтруктураПараметрыНоменклатуры.Валюта <> Валюта Тогда
			Цена = ПолучитьЦенуПослеПересчета(ТекущиеДанные.Цена,
			СтруктураПараметрыНоменклатуры.Валюта, Валюта, ДатаРасчетов);
			СтруктураПараметрыНоменклатуры.Вставить("Цена", Цена);
		Иначе
			СтруктураПараметрыНоменклатуры.Вставить("Цена", ТекущиеДанные.Цена);
		КонецЕсли;
		Если ТекущиеДанные.Свойство("Сумма" ) Тогда
			СтруктураПараметрыНоменклатуры.Вставить("Сумма", ТекущиеДанные.Сумма);
		КонецЕсли;
	КонецЕсли;
	СтруктураПараметрыНоменклатуры.Вставить("СтавкаНДС", ТекущиеДанные.СтавкаНДС);
	СтруктураПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПараметрыНоменклатуры.Вставить("ДополнительнаяАналитикаСчета",
	ТекущиеДанные.ДополнительнаяАналитикаСчета);
	СтруктураПараметрыНоменклатуры.Вставить("ЕстьДополнительноеСубконто",
	ТекущиеДанные.ЕстьДополнительноеСубконто);
	Если ПодборОстатковВПользовании Тогда
		СтруктураПараметрыНоменклатуры.Вставить("КонтрагентВПользовании",
		ТекущиеДанные.КонтрагентВПользовании);
	КонецЕсли;
	
	Количество = 1;
	Если ПоказыватьОстатки Тогда
		Количество = ?(ПодбиратьВсе, ТекущиеДанные.КоличествоОстаток,
		?(ТекущиеДанные.КоличествоОстаток < 1, ТекущиеДанные.КоличествоОстаток, 1));
	КонецЕсли;
	СтруктураПараметрыНоменклатуры.Вставить("ДобавляемоеКоличество", Количество);
	Если ПоказыватьОстатки И ТекущиеДанные.Свойство("КоличествоОстаток") Тогда
		СтруктураПараметрыНоменклатуры.Вставить("ОбщКоличество", ТекущиеДанные.КоличествоОстаток);
	КонецЕсли;
	
	ЗапроситьДополнительныеДанные = (ЗапрашиватьКоличество И НЕ ПодбиратьВсе) ИЛИ (ЗапрашиватьЦену И ЕстьЦена);
	
	ДопПараметрыОповещения = Новый Структура;
	ДопПараметрыОповещения.Вставить("ТекущийИндекс", ТекущийИндекс);
	ДопПараметрыОповещения.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДопПараметрыОповещения.Вставить("СтруктураПараметрыНоменклатуры", СтруктураПараметрыНоменклатуры);
	
	Если ЗапроситьДополнительныеДанные Тогда
		
		ОжидатьВводДанных = Истина;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура",		СтруктураПараметрыНоменклатуры.Номенклатура);
		ПараметрыФормы.Вставить("Цена",
		?(СтруктураПараметрыНоменклатуры.Свойство("Цена"), СтруктураПараметрыНоменклатуры.Цена, 0));
		ПараметрыФормы.Вставить("Количество",		Количество);
		ПараметрыФормы.Вставить("Валюта",			Валюта);
		ПараметрыФормы.Вставить("ЕстьЦена",			ЗапрашиватьЦену И ЕстьЦена);
		ПараметрыФормы.Вставить("ЕстьКоличество",	ЗапрашиватьКоличество);
		// +АпогейБК
		ПараметрыФормы.Вставить("КоличествоОстаток",ТекущиеДанные.КоличествоОстаток);
		// -АпогейБК
		
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ФормаВводаЦенаКоличество", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ДобавитьТекущуюСтрокуЗавершение", ЭтотОбъект, ДопПараметрыОповещения),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьВыбраннуюНоменклатуру(СтруктураПараметрыНоменклатуры, Количество);
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("УстановитьТекстЗапроса_ПоСправочнику")
Процедура АБК_УстановитьТекстЗапроса_ПоСправочнику()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕПСБУ.Ссылка КАК Ссылка,
	|	ЕПСБУ.Код КАК Код
	|ПОМЕСТИТЬ СчетНоменклатуры
	|ИЗ
	|	ПланСчетов.ЕПСБУ.ВидыСубконто КАК ЕПСБУВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.ЕПСБУ КАК ЕПСБУ
	|		ПО ЕПСБУВидыСубконто.Ссылка = ЕПСБУ.Ссылка
	|			И (ЕПСБУВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконто.Номенклатура))
	|ГДЕ
	|	(ЕПСБУ.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ЕПСБУ.ДатаНачалаДействия >= &ДатаРасчета)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ЦМО.ПустаяСсылка) КАК ЦМО,
	|	НЕОПРЕДЕЛЕНО КАК ДополнительнаяАналитикаСчета,
	|	ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка) КАК КПС,
	|	ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка) КАК КФО,
	|	СчетНоменклатуры.Ссылка КАК СчетУчета,
	|	0 КАК КоличествоОстаток,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка) КАК ТипЦен,
	|	0 КАК Цена,
	|	СправочникНоменклатура.СтавкаНДС КАК СтавкаНДС,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ЕстьДополнительноеСубконто,  
	#Вставка     
	|	ЛОЖЬ КАК Картинка,
	#КонецВставки
	|	0 КАК Сумма
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	ЦМО.*,
	|	ДополнительнаяАналитикаСчета,
	|	КПС.*,
	|	КФО.*,
	|	СчетУчета,
	|	КоличествоОстаток,
	|	Валюта.*,
	|	ТипЦен.*,
	|	Цена,
	|	СтавкаНДС.*,
	|	ЕдиницаИзмерения.*,
	|	ЕстьДополнительноеСубконто,
	#Вставка     
	|	Картинка,
	#КонецВставки
	|	Сумма}
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетНоменклатуры КАК СчетНоменклатуры
	|		ПО СправочникНоменклатура.СчетУчета = СчетНоменклатуры.Код
	|ГДЕ
	|	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ
	|{ГДЕ
	|	СправочникНоменклатура.Ссылка.* КАК Номенклатура,
	|	СправочникНоменклатура.Ссылка КАК ОтборНоменклатура,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры}";
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица = "Справочник.Номенклатура";
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.СписокНоменклатуры, СвойстваСписка);
	
	ДополнительныеСвойства = СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ДатаЦены = ?(ЗначениеЗаполнено(ДатаРасчетов), ДатаРасчетов, ТекущаяДатаСеанса());
		ДополнительныеСвойства.Вставить("ПолучатьЦену", Истина);
		ДополнительныеСвойства.Вставить("ТипЦены",      ТипЦен);
		ДополнительныеСвойства.Вставить("ДатаЦены",     ДатаЦены);
		ДополнительныеСвойства.Вставить("Организация",  Организация);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПолучатьДополнительноеСубконто", Ложь);
	
	УстановитьЗначенияДоступныхПолейОтбора(СобратьОтборыДляУстановки());
	УстановитьЗначенияДоступныхПараметров();
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СчетаИспользуемыеДляЗапроса")
Функция АБК_СчетаИспользуемыеДляЗапроса()
	#Удаление
	Если Параметры.ВыбратьВсеСчета Тогда
		ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
		ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
		ИспользуемыеСчета = Новый Массив(УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов));
	Иначе
		ВключатьСчета105 = Ложь;
		ВключатьСчета113 = Ложь;
		ОграничениеИспользуемыхСчетов = Новый Соответствие;
		Если ВыбираютсяСчета105_113(ВключатьСчета105, ВключатьСчета113, ОграничениеИспользуемыхСчетов) Тогда
			
			ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
			ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
			ПараметрыДанныхСчетов.Включать113 = ВключатьСчета113;
			ПараметрыДанныхСчетов.Включать105 = ВключатьСчета105;
			Если ОграничениеИспользуемыхСчетов.Количество() > 0 Тогда
				ИспользуемыеСчета = Новый Массив; // Массив из ФиксированнаяСтруктура
				Для Каждого СвойстваСчета Из УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов) Цикл
					Если ОграничениеИспользуемыхСчетов.Получить(СвойстваСчета.ТекущийСчет) = Истина
						Или ОграничениеИспользуемыхСчетов.Получить(СвойстваСчета.Счет) = Истина Тогда
						//@skip-check invocation-parameter-type-intersect
						ИспользуемыеСчета.Добавить(СвойстваСчета);
					КонецЕсли; 	
				КонецЦикла;
			Иначе
				ИспользуемыеСчета = Новый Массив(УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов));
			КонецЕсли;
		Иначе
			ЕдинственныйСчет = ЕдинственныйСчетУчета();
			Счета106ДляПроверки = Новый Соответствие;
			Если БухгалтерскийУчет.СчетВИерархии(ЕдинственныйСчет, "106.00") Тогда
				Для Каждого ТекущийСчет106 Из БухгалтерскийУчет.СписокСчетов(ЕдинственныйСчет) Цикл
					Счета106ДляПроверки.Вставить(ТекущийСчет106, Истина);
				КонецЦикла;
			КонецЕсли;
			ИспользуемыеСчета = Новый Массив; // Массив из ФиксированнаяСтруктура
			ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
			ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
			ПараметрыДанныхСчетов.Включать106 = Истина;
			ПараметрыДанныхСчетов.Включать113 = Параметры.ДополнитьСчетом113;
			ПараметрыДанныхСчетов.Включать108 = Истина;
			Для Каждого СвойстваСчета Из УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов) Цикл
				Если ОграничениеИспользуемыхСчетов.Получить(СвойстваСчета.ТекущийСчет) = Истина
					Или ОграничениеИспользуемыхСчетов.Получить(СвойстваСчета.Счет) = Истина
					Или Счета106ДляПроверки.Получить(СвойстваСчета.ТекущийСчет) = Истина Тогда
					//@skip-check invocation-parameter-type-intersect
					ИспользуемыеСчета.Добавить(СвойстваСчета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ИспользуемыеСчета 
	#КонецУдаления
	#Вставка     
	ЭтоСчет113 = Параметры.СчетУчета
	= БухгалтерскийУчет.СчетПоКоду("113.00",
	?(ЗначениеЗаполнено(ДатаРасчетов), ДатаРасчетов, ТекущаяДатаСеанса()),
	Параметры.Организация);
	Если Параметры.ВыбратьВсеСчета Тогда
		ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
		ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
		ИспользуемыеСчета = Новый Массив(УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов));
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.СчетУчета) Или ЭтоСчет113 Тогда
		ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
		ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
		ПараметрыДанныхСчетов.Включать113 = Параметры.ДополнитьСчетом113;
		ПараметрыДанныхСчетов.Включать105 = Не ЭтоСчет113;
		ИспользуемыеСчета = Новый Массив(УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов));
	Иначе
		Счета106ДляПроверки = Новый Соответствие;
		Если Параметры.СчетУчета = БухгалтерскийУчет.СчетПоКоду("106.00") Тогда
			Для Каждого ТекущийСчет106 Из БухгалтерскийУчет.СписокСчетов("106.00") Цикл
				Счета106ДляПроверки.Вставить(ТекущийСчет106, Истина);
			КонецЦикла;
		КонецЕсли;
		ИспользуемыеСчета = Новый Массив; // Массив из ФиксированнаяСтруктура
		ПараметрыДанныхСчетов = УправлениеМатериальнымиЗапасами.ПараметрыДанныхСчетовУчетаМЗ(Организация, Ложь);
		ПараметрыДанныхСчетов.ДатаСчета = ДатаРасчетов;
		ПараметрыДанныхСчетов.Включать106 = Истина;
		ПараметрыДанныхСчетов.Включать113 = Параметры.ДополнитьСчетом113;
		ПараметрыДанныхСчетов.Включать108 = Истина;
		Для Каждого СвойстваСчета Из УправлениеМатериальнымиЗапасами.СчетаУчетаМатериальныхЗапасов(ПараметрыДанныхСчетов) Цикл
			Если Параметры.СчетУчета = СвойстваСчета.ТекущийСчет
				//Или Параметры.СчетУчета = СвойстваСчета.Счет
				Или ?(ТипЗнч(Параметры.СчетУчета) = Тип("СписокЗначений"),Параметры.СчетУчета.НайтиПоЗначению(СвойстваСчета.Счет) <> Неопределено,Параметры.СчетУчета = СвойстваСчета.Счет)
				Или Счета106ДляПроверки.Получить(СвойстваСчета.Счет) <> Неопределено Тогда
				ИспользуемыеСчета.Добавить(СвойстваСчета);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ИспользуемыеСчета
	
	#КонецВставки
КонецФункции



























