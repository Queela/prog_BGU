
Функция ПолучитьПараметрыДополнительногоСубконто(Документ)
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("ВидСубконто");
	ТаблицаКолонок.Колонки.Добавить("ТабличнаяЧасть");
	ТаблицаКолонок.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицаКолонок.Колонки.Добавить("КолонкаТабличнойЧасти");
	ТаблицаКолонок.Колонки.Добавить("ИмяКолонки");
	ТаблицаКолонок.Колонки.Добавить("ОписаниеТипаКолонки");
	
	Результат = Новый Структура("СубконтоСчетов, КолонкиСубконто",
								 Новый Соответствие, ТаблицаКолонок);
	
	ТиповыеСубконто = Новый Массив;
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договоры);
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ДокументыРасчетов);

	Счета = БухгалтерскийУчет.СписокСчетов("206.00, 302.00", Документ.Дата);
	
	ЗапросСубконто = Новый Запрос;
	ЗапросСубконто.УстановитьПараметр("Счета", Счета);
	ЗапросСубконто.УстановитьПараметр("ТиповыеСубконто", ТиповыеСубконто);
	ЗапросСубконто.Текст = 
	"ВЫБРАТЬ
	|	ЕПСБУВидыСубконто.Ссылка КАК Счет,
	|	ЕПСБУВидыСубконто.ВидСубконто КАК ВидСубконто
	|ИЗ
	|	ПланСчетов.ЕПСБУ.ВидыСубконто КАК ЕПСБУВидыСубконто
	|ГДЕ
	|	ЕПСБУВидыСубконто.Ссылка В(&Счета)
	|	И НЕ ЕПСБУВидыСубконто.ВидСубконто В (&ТиповыеСубконто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕПСБУВидыСубконто.Ссылка,
	|	ЕПСБУВидыСубконто.ВидСубконто";
	ВыборкаСубконто = ЗапросСубконто.Выполнить().Выгрузить();
	
	Для Каждого Субконто из ВыборкаСубконто цикл
		Результат.СубконтоСчетов.Вставить(Субконто.Счет, Субконто.ВидСубконто);
	КонецЦикла;
	
	ВидыСубконто = ВыборкаСубконто.ВыгрузитьКолонку("ВидСубконто");
	ВидыСубконто = ОбщегоНазначенияБГУ.УдалитьПовторяющиесяЭлементыМассива(ВидыСубконто);
	
	ЗапросКолонок = Новый Запрос;
	ЗапросКолонок.УстановитьПараметр("ИдентификаторДокумента", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ), Ложь));
	ЗапросКолонок.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеТабличныеЧастиДокументов.Ссылка КАК ТабличнаяЧасть,
	|	ДополнительныеТабличныеЧастиДокументов.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	КолонкиДополнительныхТабличныхЧастей.Ссылка КАК КолонкаТабличнойЧасти,
	|	КолонкиДополнительныхТабличныхЧастей.ИмяКолонки КАК ИмяКолонки,
	|	КолонкиДополнительныхТабличныхЧастей.ОписаниеТипаКолонки
	|ИЗ
	|	Справочник.ДополнительныеТабличныеЧастиДокументов КАК ДополнительныеТабличныеЧастиДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КолонкиДополнительныхТабличныхЧастей КАК КолонкиДополнительныхТабличныхЧастей
	|		ПО ДополнительныеТабличныеЧастиДокументов.Ссылка = КолонкиДополнительныхТабличныхЧастей.Владелец
	|ГДЕ
	|	ДополнительныеТабличныеЧастиДокументов.ИдентификаторДокумента = &ИдентификаторДокумента
	|	И КолонкиДополнительныхТабличныхЧастей.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ КолонкиДополнительныхТабличныхЧастей.ПометкаУдаления";
	ВыборкаКолонок = ЗапросКолонок.Выполнить().Выгрузить();
	
	Для Каждого ВидСубконто из ВидыСубконто цикл
		ИскомыеТипы = ВидСубконто.ТипЗначения.Типы();
		Для Каждого Колонка из ВыборкаКолонок цикл
			ТипыКолонки = Колонка.ОписаниеТипаКолонки.ТипЗначения.Типы();
			Разность = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ИскомыеТипы, ТипыКолонки);
			Если Разность.Количество() < ИскомыеТипы.Количество() тогда
				НоваяКолонка = Результат.КолонкиСубконто.Добавить();
				НоваяКолонка.ВидСубконто = ВидСубконто;
				ЗаполнитьЗначенияСвойств(НоваяКолонка, Колонка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Результат.КолонкиСубконто.Свернуть("ВидСубконто,ТабличнаяЧасть,КолонкаТабличнойЧасти,ИмяКолонки,ОписаниеТипаКолонки");
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьНетиповоеСубконто(Счет)
	
	ТиповыеСубконто = Новый Массив;
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Контрагенты);
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.Договоры);
	ТиповыеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконто.ДокументыРасчетов);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ТиповыеСубконто", ТиповыеСубконто);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕПСБУВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.ЕПСБУ.ВидыСубконто КАК ЕПСБУВидыСубконто
	|ГДЕ
	|	ЕПСБУВидыСубконто.Ссылка = &Счет 
	|	И ЕПСБУВидыСубконто.ВидСубконто НЕ В (&ТиповыеСубконто)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&Вместо("ПодготовитьТаблицуРасчетовПоДокументу")
Функция АБК_ДопСубконтоАвансаПодготовитьТаблицуРасчетовПоДокументу(Документ, Параметры, Отказ)

	ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2, ДопустимыйЗнак.Любой));

	ТаблицаРасчетов = Новый ТаблицаЗначений;
	// Признак поступления ценностей: материальных запасов, услуг и пр.
	ТаблицаРасчетов.Колонки.Добавить("ЭтоПоступление", Новый ОписаниеТипов("Булево"));
	// Общие разрезы учета.
	ТаблицаРасчетов.Колонки.Добавить("ИФО",            Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"));
	ТаблицаРасчетов.Колонки.Добавить("КФО",            Новый ОписаниеТипов("ПеречислениеСсылка.КВД"));
	ТаблицаРасчетов.Колонки.Добавить("КПС",            Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
	ТаблицаРасчетов.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	// Счет и аналитика учета расчетов с контрагентами.
	ТаблицаРасчетов.Колонки.Добавить("КЭК",            Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));     
	ТаблицаРасчетов.Колонки.Добавить("СчетРасчетов",   Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	ТаблицаРасчетов.Колонки.Добавить("Контрагент",     Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчетов.Колонки.Добавить("Договор",        Новый ОписаниеТипов("СправочникСсылка.Договоры"));
	ТаблицаРасчетов.Колонки.Добавить("Валюта",         Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	// Суммовые показатели операции.
	ТаблицаРасчетов.Колонки.Добавить("СуммаНДС",       ОписаниеТипаСуммы);
	ТаблицаРасчетов.Колонки.Добавить("СуммаРасчетов",  ОписаниеТипаСуммы);
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ПоВсемКФО") Тогда
		Параметры.Вставить("ПоВсемКФО", Ложь);
	КонецЕсли;
	Если НЕ Параметры.Свойство("ПоВсемКПС") Тогда
		Параметры.Вставить("ПоВсемКПС", Ложь);
	КонецЕсли;

	МетаданныеДокумента = Документ.Метаданные();

	Если МетаданныеДокумента.Имя = "ГТДИмпорт" Тогда // Особый случай. Существенно отличается структура данных.
		Возврат ПодготовитьТаблицуРасчетовПоДокументуГТДИмпорт(ТаблицаРасчетов, Документ, Параметры, Отказ);
	КонецЕсли;

	Если МетаданныеДокумента.Имя = "ИзвещениеИсходящее" Тогда 
		// Особый случай. Зачет авансов будет реализован позднее
		Возврат Документы.ИзвещениеИсходящее.ТаблицаПередаваемыхРасчетов(ТаблицаРасчетов, Документ, Параметры, Отказ);
	КонецЕсли;

	ЕстьВалютаДокумента = ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента);
	Если Не ЕстьВалютаДокумента И НЕ Параметры.Свойство("ВалютаДокумента") Тогда
		Параметры.Вставить("ВалютаДокумента", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;

	Запрос = Новый Запрос;

	// 1. Расчеты по материальным запасам (поступившим и отгруженным).
	ЕстьТабЧастьМатериалы      = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("Материалы", МетаданныеДокумента);
	ЕстьТабЧастьНоменклатура   = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("Номенклатура", МетаданныеДокумента);
	ЕстьТабЧастьВозвратнаяТара = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("ВозвратнаяТара", МетаданныеДокумента);

	Если ЕстьТабЧастьМатериалы Тогда
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("КЭК", МетаданныеДокумента.ТабличныеЧасти.Материалы)
			И НЕ Параметры.Свойство("КЭК") Тогда
			Параметры.Вставить("КЭК", Справочники.КОСГУ.ПустаяСсылка());
		КонецЕсли;
		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Материалы",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего,КЭК",
		Документ, Параметры);
	ИначеЕсли ЕстьТабЧастьНоменклатура Тогда
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("КЭК", МетаданныеДокумента.ТабличныеЧасти.Номенклатура)
			И НЕ Параметры.Свойство("КЭК") Тогда
			Параметры.Вставить("КЭК", Справочники.КОСГУ.ПустаяСсылка());
		КонецЕсли;
		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Номенклатура",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего,КЭК",
		Документ, Параметры);
		// Переименуем таблицу, т.к. таб.часть называется так же, как реквизит - "Номенклатура".
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.", "ТабНоменклатура.");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ТаблицаНоменклатура КАК Номенклатура", "ТаблицаНоменклатура КАК ТабНоменклатура");
	КонецЕсли;
	Если ЕстьТабЧастьВозвратнаяТара Тогда
		Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("КЭК", МетаданныеДокумента.ТабличныеЧасти.ВозвратнаяТара)
			И НЕ Параметры.Свойство("КЭК") Тогда
			Параметры.Вставить("КЭК", Справочники.КОСГУ.ПустаяСсылка());
		КонецЕсли;
		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "ВозвратнаяТара",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,Сумма,КЭК",
		Документ, Параметры);
	КонецЕсли;

	Если ЕстьТабЧастьМатериалы ИЛИ ЕстьТабЧастьНоменклатура Тогда

		Если ЕстьТабЧастьМатериалы Тогда

			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	Материалы.ИФО КАК ИФО,
			|	Материалы.КФО КАК КФО,
			|	Материалы.КПС КАК КПС,
			|	Материалы.Подразделение КАК Подразделение,
			|	Материалы.Контрагент КАК Контрагент,
			|	Материалы.Договор КАК Договор,
			|	Материалы.ВалютаДокумента КАК Валюта,
			|	Материалы.СуммаНДС КАК СуммаНДС,
			|	Материалы.Всего КАК СуммаРасчетов,
			|	Материалы.КЭК КАК КЭК
			|ИЗ
			|	ТаблицаМатериалы КАК Материалы";
			
		ИначеЕсли ЕстьТабЧастьНоменклатура Тогда

			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	ТабНоменклатура.ИФО КАК ИФО,
			|	ТабНоменклатура.КФО КАК КФО,
			|	ТабНоменклатура.КПС КАК КПС,
			|	ТабНоменклатура.Подразделение КАК Подразделение,
			|	ТабНоменклатура.Контрагент КАК Контрагент,
			|	ТабНоменклатура.Договор КАК Договор,
			|	ТабНоменклатура.ВалютаДокумента КАК Валюта,
			|	ТабНоменклатура.СуммаНДС КАК СуммаНДС,
			|	ТабНоменклатура.Всего КАК СуммаРасчетов,
			|	ТабНоменклатура.КЭК КАК КЭК
			|ИЗ
			|	ТаблицаНоменклатура КАК ТабНоменклатура";
			
		КонецЕсли;

		Если ЕстьТабЧастьВозвратнаяТара Тогда

			Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБГУ.ТекстРазделителяОбъединенияЗапросов("ВСЕ");
			Запрос.Текст = Запрос.Текст + 
			"ВЫБРАТЬ
			|	ВозвратнаяТара.ИФО,
			|	ВозвратнаяТара.КФО,
			|	ВозвратнаяТара.КПС,
			|	ВозвратнаяТара.Подразделение,
			|	ВозвратнаяТара.Контрагент,
			|	ВозвратнаяТара.Договор,
			|	ВозвратнаяТара.ВалютаДокумента,
			|	0,
			|	ВозвратнаяТара.Сумма,
			|	ВозвратнаяТара.КЭК КАК КЭК
			|ИЗ
			|	ТаблицаВозвратнаяТара КАК ВозвратнаяТара";

		КонецЕсли;
		
		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Материалы.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабНоменклатура.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВозвратнаяТара.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Материалы.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабНоменклатура.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВозвратнаяТара.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоМатериальнымЗапасам = Запрос.Выполнить().Выгрузить();

		ВидОперации = ?(Найти(МетаданныеДокумента.Имя, "Поступление") > 0, "Поступление", "Реализация");
		СчетРасчетов = ОпределитьСчетРасчетовПоПараметрам(Параметры, ВидОперации,
		Документ.Дата, Документ.Организация, Документ.ИФО);

		ИспользоватьКПСРасчетов = Ложь;
		Если ВидОперации = "Реализация" И НЕ Параметры.ПоВсемКПС Тогда
			// В документах реализации в таб.части указан КПС расходов.
			// Для расчетов должен использоваться КПС доходов.
			ИспользоватьКПСРасчетов = Истина;
		ИначеЕсли ВидОперации = "Поступление" И НЕ Параметры.ПоВсемКПС Тогда
			// В документах поступления материальных запасов может быть указан КПС счета расчетов (302.ХХ),
			// отличный от КПС счета учета материальных запасов (105.ХХ).
			ИспользоватьКПСРасчетов = (Параметры.Свойство("КПС") И ЗначениеЗаполнено(Параметры.КПС));
		КонецЕсли;

		ГрупповойКЭК440 = БухгалтерскийУчетПовтИсп.КЭКпоКоду("440");
		КЭК360 = БухгалтерскийУчетПовтИсп.КЭКпоКоду("360");

		Для Каждого СтрокаДокумента Из РасчетыПоМатериальнымЗапасам Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			Если ЗначениеЗаполнено(СчетРасчетов) Тогда
				НоваяСтрока.СчетРасчетов = СчетРасчетов;
			Иначе
				Если ВидОперации = "Поступление" Тогда
					Если НоваяСтрока.КЭК = КЭК360 Тогда
						НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.СчетПоКоду("302.36", Документ.Дата, Документ.Организация);
					Иначе
						НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.СчетПоКоду("302.34", Документ.Дата, Документ.Организация);
					КонецЕсли;
				Иначе
					НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.СчетПоКоду("205.74", Документ.Дата, Документ.Организация);
				КонецЕсли;
			КонецЕсли;

			Если НоваяСтрока.КЭК <> КЭК360 Тогда
				КЭКПоСчету = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);
				Если КЭКПоСчету <> ГрупповойКЭК440 ИЛИ НЕ ЗначениеЗаполнено(НоваяСтрока.КЭК) Тогда
					НоваяСтрока.КЭК = КЭКПоСчету;
				КонецЕсли;
			КонецЕсли;

			Если ИспользоватьКПСРасчетов Тогда
				НоваяСтрока.КПС = Параметры.КПС;
			КонецЕсли;

			НоваяСтрока.ЭтоПоступление = БухгалтерскийУчет.СчетВИерархии(НоваяСтрока.СчетРасчетов, "302.00");

		КонецЦикла;

	КонецЕсли;


	// 2. Расчеты по поступившим услугам, работам.
	ЕстьТабЧастьУслугиИРаботы = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("УслугиИРаботы", МетаданныеДокумента);
	Если ЕстьТабЧастьУслугиИРаботы Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "УслугиИРаботы",
		"НомерСтроки,ИФО,КФО,КПС,КЭК,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	УслугиИРаботы.НомерСтроки КАК НомерСтроки,
		|	УслугиИРаботы.ИФО КАК ИФО,
		|	УслугиИРаботы.КФО КАК КФО,
		|	УслугиИРаботы.КПС КАК КПС,
		|	УслугиИРаботы.КЭК КАК КЭК,
		|	УслугиИРаботы.Подразделение КАК Подразделение,
		|	УслугиИРаботы.Контрагент КАК Контрагент,
		|	УслугиИРаботы.Договор КАК Договор,
		|	УслугиИРаботы.ВалютаДокумента КАК Валюта,
		|	УслугиИРаботы.СуммаНДС КАК СуммаНДС,
		|	УслугиИРаботы.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаУслугиИРаботы КАК УслугиИРаботы";
		
		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УслугиИРаботы.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УслугиИРаботы.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоУслугамРаботам = Запрос.Выполнить().Выгрузить();

		СчетРасчетов = ОпределитьСчетРасчетовПоПараметрам(Параметры, "Поступление",
		Документ.Дата, Документ.Организация, Документ.ИФО);

		Для Каждого СтрокаДокумента Из РасчетыПоУслугамРаботам Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Истина;

			// Счет расчетов.
			Если ЗначениеЗаполнено(СчетРасчетов) Тогда
				НоваяСтрока.СчетРасчетов = СчетРасчетов;
			Иначе
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
				СтрокаДокумента.КЭК, "302.00", , Документ.Дата, Документ.Организация, СтрокаДокумента.ИФО);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетРасчетов) Тогда
				ТекстОшибки = НСтр("ru='Невозможно определить счет расчетов с контрагентом по КЭК ""%1"".
				|Проверьте настройки соответствия аналитических счетов КЭК.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				СтрокаДокумента.КЭК);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
				Документ.Ссылка, "УслугиИРаботы[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].КЭК", "Объект", Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


	// 2b. Расчеты по аренде (арендатор) - начисление амортизации прав пользования.
	ЕстьТабЧастьПраваПользования = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("ПраваПользования", МетаданныеДокумента);
	Если ЕстьТабЧастьПраваПользования Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "ПраваПользования",
		"ВидОперации,ИФО,КФО,КПС,Подразделение,ОсновноеСредство,СчетУчета,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ПраваПользования.ВидОперации КАК ВидОперации,
		|	ПраваПользования.ИФО КАК ИФО,
		|	ПраваПользования.КФО КАК КФО,
		|	ПраваПользования.КПС КАК КПС,
		|	ПраваПользования.Подразделение КАК Подразделение,
		|	ПраваПользования.ОсновноеСредство КАК ОсновноеСредство,
		|	ПраваПользования.СчетУчета КАК СчетУчета,
		|	ПраваПользования.Контрагент КАК Контрагент,
		|	ПраваПользования.Договор КАК Договор,
		|	ПраваПользования.ВалютаДокумента КАК Валюта,
		|	ПраваПользования.СуммаНДС КАК СуммаНДС,
		|	ПраваПользования.Всего КАК СуммаРасчетов
		|ПОМЕСТИТЬ АрендныеПлатежи
		|ИЗ
		|	ТаблицаПраваПользования КАК ПраваПользования
		|ГДЕ
		|	ПраваПользования.Всего > 0
		|	И ПраваПользования.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПринятияКУчетуПравПользованияОС.ПоступлениеВБезвозмездноеПользование)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор,
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПараметрыАмортизацииПравПользованияСрезПоследних.Договор КАК Договор,
		|	ПараметрыАмортизацииПравПользованияСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыАмортизацииПравПользованияСрезПоследних.СчетРасчетов КАК СчетРасчетов,
		|	ПараметрыАмортизацииПравПользованияСрезПоследних.КПСРасчетов КАК КПСРасчетов
		|ПОМЕСТИТЬ ПараметрыАмортизацииПравПользования
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииПравПользованияОС.СрезПоследних(
		|			&ГраницаСреза,
		|			Договор В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						АрендныеПлатежи.Договор
		|					ИЗ
		|						АрендныеПлатежи)
		|				И Организация = &Организация
		|				И ОсновноеСредство В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						АрендныеПлатежи.ОсновноеСредство
		|					ИЗ
		|						АрендныеПлатежи)) КАК ПараметрыАмортизацииПравПользованияСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Договор,
		|	ОсновноеСредство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АрендныеПлатежи.ВидОперации КАК ВидОперации,
		|	АрендныеПлатежи.ИФО КАК ИФО,
		|	АрендныеПлатежи.КФО КАК КФО,
		|	АрендныеПлатежи.КПС КАК КПС,
		|	АрендныеПлатежи.Подразделение КАК Подразделение,
		|	АрендныеПлатежи.ОсновноеСредство КАК ОсновноеСредство,
		|	АрендныеПлатежи.СчетУчета КАК СчетУчета,
		|	АрендныеПлатежи.Контрагент КАК Контрагент,
		|	АрендныеПлатежи.Договор КАК Договор,
		|	АрендныеПлатежи.Валюта КАК Валюта,
		|	АрендныеПлатежи.СуммаНДС КАК СуммаНДС,
		|	АрендныеПлатежи.СуммаРасчетов КАК СуммаРасчетов,
		|	ЕСТЬNULL(ПараметрыАмортизацииПравПользования.СчетРасчетов, ЗНАЧЕНИЕ(ПланСчетов.ЕПСБУ.ПустаяСсылка)) КАК СчетРасчетов,
		|	ЕСТЬNULL(ПараметрыАмортизацииПравПользования.КПСРасчетов, ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)) КАК КПСРасчетов
		|ИЗ
		|	АрендныеПлатежи КАК АрендныеПлатежи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииПравПользования КАК ПараметрыАмортизацииПравПользования
		|		ПО АрендныеПлатежи.Договор = ПараметрыАмортизацииПравПользования.Договор
		|			И АрендныеПлатежи.ОсновноеСредство = ПараметрыАмортизацииПравПользования.ОсновноеСредство";
		Запрос.УстановитьПараметр("ГраницаСреза", КонецМесяца(Документ.Дата));
		Запрос.УстановитьПараметр("Организация",  Документ.Организация);

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПраваПользования.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПраваПользования.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПараметрыАмортизацииПравПользованияСрезПоследних.КПСРасчетов",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоАренднойПлате = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаДокумента Из РасчетыПоАренднойПлате Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Истина;

			Если ЗначениеЗаполнено(СтрокаДокумента.СчетРасчетов) Тогда
				// Счет расчетов указан в регистре сведений, берем его.
				// Если КПС расчетов не указан, значит совпадает с КПС учета.
				НоваяСтрока.СчетРасчетов = СтрокаДокумента.СчетРасчетов;
				НоваяСтрока.КПС = ?(ЗначениеЗаполнено(СтрокаДокумента.КПСРасчетов),
				СтрокаДокумента.КПСРасчетов, СтрокаДокумента.КПС);
			Иначе
				// Счет расчетов не указан в регистре сведений, определяем его по счету учета.
				// КПС совпадает с КПС учета.
				НоваяСтрока.СчетРасчетов = УчетРасчетов.СчетРасчетовПоАренднойПлате(
				СтрокаДокумента.СчетУчета, Документ.Дата, Документ.Организация);
				НоваяСтрока.КПС = СтрокаДокумента.КПС;
			КонецЕсли;

			НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);

		КонецЦикла;

	КонецЕсли;


	// 3. Расчеты по реализованным услугам, работам.
	ЕстьТабЧастьУслугиОказанные  = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("УслугиОказанные", МетаданныеДокумента);
	ЕстьТабЧастьСоставЭтапаРабот = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("СоставЭтапаРабот", МетаданныеДокумента);
	ЕстьТабЧастьНачисления       = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("Начисления", МетаданныеДокумента);

	Если ЕстьТабЧастьУслугиОказанные Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "УслугиОказанные",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	УслугиОказанные.ИФО КАК ИФО,
		|	УслугиОказанные.КФО КАК КФО,
		|	УслугиОказанные.КПС КАК КПС,
		|	УслугиОказанные.Подразделение КАК Подразделение,
		|	УслугиОказанные.Контрагент КАК Контрагент,
		|	УслугиОказанные.Договор КАК Договор,
		|	УслугиОказанные.ВалютаДокумента КАК Валюта,
		|	УслугиОказанные.СуммаНДС КАК СуммаНДС,
		|	УслугиОказанные.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаУслугиОказанные КАК УслугиОказанные";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УслугиОказанные.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УслугиОказанные.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

	ИначеЕсли ЕстьТабЧастьСоставЭтапаРабот Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "СоставЭтапаРабот",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	СоставЭтапаРабот.ИФО КАК ИФО,
		|	СоставЭтапаРабот.КФО КАК КФО,
		|	СоставЭтапаРабот.КПС КАК КПС,
		|	СоставЭтапаРабот.Подразделение КАК Подразделение,
		|	СоставЭтапаРабот.Контрагент КАК Контрагент,
		|	СоставЭтапаРабот.Договор КАК Договор,
		|	СоставЭтапаРабот.ВалютаДокумента КАК Валюта,
		|	СоставЭтапаРабот.СуммаНДС КАК СуммаНДС,
		|	СоставЭтапаРабот.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаСоставЭтапаРабот КАК СоставЭтапаРабот";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоставЭтапаРабот.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоставЭтапаРабот.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

	ИначеЕсли МетаданныеДокумента.Имя = "НачислениеЗаУслугиОбразования" Или МетаданныеДокумента.Имя = "НачислениеСтудентамЗаПрочиеУслуги" Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Начисления",
		"ИФО,КФО,КПС,КЭК,Факультет,Контрагент,ДоговорКонтрагента,
		|ВалютаДокумента,УчитыватьНДС,СуммаВключаетНДС,СуммаНДС,Сумма",
		Документ, Параметры);

		Если Документ.ВидОперации = Перечисления.ВидыОперацийНачисленияУчащимся.ПоКраткосрочнымДоговорам Тогда
			// Исключение из общего принципа - для начислений по краткосрочным договорам (образование),
			// КФО, КПС и КЭК берем из параметров источника данных (реквизитов типовой операции),
			// несмотря на то, что одноименные реквизиты есть в табличной части.
			Если Параметры.Свойство("КФО") И ЗначениеЗаполнено(Параметры.КФО) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КФО", "&ПараметрКФО");
				Запрос.УстановитьПараметр("ПараметрКФО", Параметры.КФО);
			КонецЕсли;
			Если Параметры.Свойство("КПС") И ЗначениеЗаполнено(Параметры.КПС) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КПС", "&ПараметрКПС");
				Запрос.УстановитьПараметр("ПараметрКПС", Параметры.КПС);
			КонецЕсли;
			Если Параметры.Свойство("КЭКРасчетов") И ЗначениеЗаполнено(Параметры.КЭКРасчетов) Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КЭК", "&ПараметрКЭК");
				Запрос.УстановитьПараметр("ПараметрКЭК", Параметры.КЭКРасчетов);
			КонецЕсли;
		КонецЕсли;

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Начисления.ИФО КАК ИФО,
		|	Начисления.КФО КАК КФО,
		|	Начисления.КПС КАК КПС,
		|	Начисления.КЭК КАК КЭК,
		|	Начисления.Факультет КАК Подразделение,
		|	Начисления.Контрагент КАК Контрагент,
		|	Начисления.ДоговорКонтрагента КАК Договор,
		|	Начисления.ВалютаДокумента КАК Валюта,
		|	Начисления.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Начисления.УчитыватьНДС
		|				И НЕ Начисления.СуммаВключаетНДС
		|			ТОГДА Начисления.Сумма + Начисления.СуммаНДС
		|		ИНАЧЕ Начисления.Сумма
		|	КОНЕЦ КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаНачисления КАК Начисления";

		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.Факультет", "ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)");
		КонецЕсли;

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

	ИначеЕсли ЕстьТабЧастьНачисления Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Начисления",
		"ИФО,КФО,КПС,Подразделение,Контрагент,ДоговорКонтрагента,ВалютаДокумента,УчитыватьНДС,СуммаВключаетНДС,СуммаНДС,Сумма",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Начисления.ИФО КАК ИФО,
		|	Начисления.КФО КАК КФО,
		|	Начисления.КПС КАК КПС,
		|	Начисления.Подразделение КАК Подразделение,
		|	Начисления.Контрагент КАК Контрагент,
		|	Начисления.ДоговорКонтрагента КАК Договор,
		|	Начисления.ВалютаДокумента КАК Валюта,
		|	Начисления.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА Начисления.УчитыватьНДС
		|				И НЕ Начисления.СуммаВключаетНДС
		|			ТОГДА Начисления.Сумма + Начисления.СуммаНДС
		|		ИНАЧЕ Начисления.Сумма
		|	КОНЕЦ КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаНачисления КАК Начисления";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Начисления.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

	КонецЕсли;

	Если ЕстьТабЧастьУслугиОказанные ИЛИ ЕстьТабЧастьСоставЭтапаРабот ИЛИ ЕстьТабЧастьНачисления Тогда

		РасчетыПоУслугамРаботам = Запрос.Выполнить().Выгрузить();

		Если Параметры.Свойство("КЭКРасчетов") Тогда
			КЭКРасчетов = Параметры.КЭКРасчетов;
		ИначеЕсли ОбщегоНазначенияБГУ.ЕстьРеквизитДокумента("КЭК", МетаданныеДокумента) Тогда
			КЭКРасчетов = Документ.КЭК;
			Параметры.Вставить("КЭКРасчетов", Документ.КЭК);
		Иначе
			КЭКРасчетов = Справочники.КОСГУ.ПустаяСсылка();
		КонецЕсли;

		СчетРасчетов = ОпределитьСчетРасчетовПоПараметрам(Параметры, "Реализация",
		Документ.Дата, Документ.Организация, Документ.ИФО);

		Для Каждого СтрокаДокумента Из РасчетыПоУслугамРаботам Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Ложь;

			Если ЗначениеЗаполнено(СчетРасчетов) Тогда
				НоваяСтрока.СчетРасчетов = СчетРасчетов;
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.КЭК) Тогда
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(НоваяСтрока.КЭК,
				?(Параметры.Свойство("СчетРасчетов") И ЗначениеЗаполнено(Параметры.СчетРасчетов), Параметры.СчетРасчетов, "205.00"), ,
				Документ.Дата, Документ.Организация, СтрокаДокумента.ИФО);
			КонецЕсли;

			Если ЗначениеЗаполнено(КЭКРасчетов) Тогда
				НоваяСтрока.КЭК = КЭКРасчетов;
			Иначе
				НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетРасчетов) Тогда
				ТекстОшибки = НСтр("ru='Невозможно определить счет расчетов с контрагентом по КЭК ""%1"".
				|Проверьте настройки соответствия аналитических счетов КЭК.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				НоваяСтрока.КЭК);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,
				Документ.Ссылка, , "Объект", Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


	// 3b. Расчеты по реализованным услугам, работам - списание доходов будущих периодов.
	ЕстьТабЧастьДБП = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("ДоходыБудущихПериодов", МетаданныеДокумента);
	Если ЕстьТабЧастьДБП Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "ДоходыБудущихПериодов",
		"ИФО,КФО,КПС,КЭК,Подразделение,Контрагент,Договор,ВалютаДокумента,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ДоходыБудущихПериодов.ИФО КАК ИФО,
		|	ДоходыБудущихПериодов.КФО КАК КФО,
		|	ДоходыБудущихПериодов.КПС КАК КПС,
		|	ДоходыБудущихПериодов.КЭК КАК КЭК,
		|	ДоходыБудущихПериодов.Подразделение КАК Подразделение,
		|	ДоходыБудущихПериодов.Контрагент КАК Контрагент,
		|	ДоходыБудущихПериодов.Договор КАК Договор,
		|	ДоходыБудущихПериодов.ВалютаДокумента КАК Валюта,
		|	ДоходыБудущихПериодов.СуммаНДС КАК СуммаНДС,
		|	ДоходыБудущихПериодов.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаДоходыБудущихПериодов КАК ДоходыБудущихПериодов
		|ГДЕ
		|	ДоходыБудущихПериодов.Всего > 0";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоходыБудущихПериодов.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоходыБудущихПериодов.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоУслугамРаботам = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаДокумента Из РасчетыПоУслугамРаботам Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Ложь;
			НоваяСтрока.СчетРасчетов   = БухгалтерскийУчет.ПолучитьАналитическийСчетПоКЭК(
			НоваяСтрока.КЭК, "205.00", , Документ.Дата, Документ.Организация, СтрокаДокумента.ИФО);

		КонецЦикла;

	КонецЕсли;


	// 4. Расчеты по поступлению ОС, НМА, НПА.
	ЕстьТабЧастьКапВложения = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("КапВложения", МетаданныеДокумента);
	Если ЕстьТабЧастьКапВложения Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "КапВложения",
		"НомерСтроки,ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,
		|ВнеоборотныйАктив,СчетУчета,СуммаНДС,Всего",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	КапВложения.НомерСтроки КАК НомерСтроки,
		|	КапВложения.ИФО КАК ИФО,
		|	КапВложения.КФО КАК КФО,
		|	КапВложения.КПС КАК КПС,
		|	КапВложения.Подразделение КАК Подразделение,
		|	КапВложения.Контрагент КАК Контрагент,
		|	КапВложения.Договор КАК Договор,
		|	КапВложения.ВалютаДокумента КАК Валюта,
		|	КапВложения.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
		|	КапВложения.СчетУчета КАК СчетУчета,
		|	КапВложения.СуммаНДС КАК СуммаНДС,
		|	КапВложения.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаКапВложения КАК КапВложения";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КапВложения.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "КапВложения.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоОС = Запрос.Выполнить().Выгрузить();

		СчетРасчетов = ОпределитьСчетРасчетовПоПараметрам(Параметры, "Поступление",
		Документ.Дата, Документ.Организация, Документ.ИФО);

		Для Каждого СтрокаДокумента Из РасчетыПоОС Цикл

			// СчетУчета.
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетУчета) Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Счет учета'"),
				СтрокаДокумента.НомерСтроки, "Капитальные вложения");
				ПолеКолонки = "Объект.КапВложения[" + Формат(СтрокаДокумента.НомерСтроки-1, "ЧН=0; ЧГ=") + "].СчетУчета";
				БухгалтерскиеОперацииСервер.ДобавитьСообщениеОбОшибке(ТекстСообщения, ПолеКолонки, Отказ);
			КонецЕсли;

			Если Отказ Тогда
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Истина;

			// Счет расчетов.
			Если ЗначениеЗаполнено(СчетРасчетов) Тогда
				НоваяСтрока.СчетРасчетов = СчетРасчетов;
			ИначеЕсли МетаданныеДокумента.Имя = "ПоступлениеОСВПути" Тогда
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.СчетПоКоду("302.31", Документ.Дата, Документ.Организация);
			Иначе
				НоваяСтрока.СчетРасчетов = УчетРасчетов.СчетРасчетовПоПриобретениюВНА(
				СтрокаДокумента.СчетУчета, "302.00", Документ.Дата, Документ.Организация);
			КонецЕсли;

			НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетРасчетов) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Невозможно определить счет расчетов с контрагентом для внеоборотного актива ""%1"".
				|Возможно, неверно указан счет учета в строке поступления внеоборотного актива.'"),
				СтрокаДокумента.ВнеоборотныйАктив);
				ПолеКолонки = "Объект.КапВложения[" + Формат(СтрокаДокумента.НомерСтроки-1, "ЧН=0; ЧГ=") + "].СчетУчета";
				БухгалтерскиеОперацииСервер.ДобавитьСообщениеОбОшибке(ТекстСообщения, ПолеКолонки, Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


	// 5. Расчеты по реализованным ОС, НМА, НПА.
	ЕстьТабЧастьОсновныеСредства  = ОбщегоНазначенияБГУ.ЕстьТабЧастьДокумента("ОсновныеСредства", МетаданныеДокумента);
	ЕстьРеализацияОсновныхСредств = (МетаданныеДокумента.Имя = "ПередачаОбъектаОС"
	ИЛИ МетаданныеДокумента.Имя = "ПередачаЗдания");

	Если ЕстьТабЧастьОсновныеСредства Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "ОсновныеСредства",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,ОсновноеСредство,СуммаНДС,Всего",
		Документ, Параметры);

	ИначеЕсли ЕстьРеализацияОсновныхСредств Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Документ",
		"ИФО,КФО,КПС,Подразделение,Контрагент,Договор,ВалютаДокумента,ОсновноеСредство,СуммаНДС,Всего",
		Документ, Параметры);

	КонецЕсли;

	Если ЕстьТабЧастьОсновныеСредства ИЛИ ЕстьРеализацияОсновныхСредств Тогда

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ОсновныеСредства.ИФО КАК ИФО,
		|	ОсновныеСредства.КФО КАК КФО,
		|	ОсновныеСредства.КПС КАК КПС,
		|	ОсновныеСредства.Подразделение КАК Подразделение,
		|	ОсновныеСредства.Контрагент КАК Контрагент,
		|	ОсновныеСредства.Договор КАК Договор,
		|	ОсновныеСредства.ВалютаДокумента КАК Валюта,
		|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
		|	ОсновныеСредства.ОсновноеСредство.ВидНФА КАК ВидНФА,
		|	ОсновныеСредства.СуммаНДС КАК СуммаНДС,
		|	ОсновныеСредства.Всего КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаОсновныеСредства КАК ОсновныеСредства";
		Если НЕ ЕстьТабЧастьОсновныеСредства Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОсновныеСредства КАК ОсновныеСредства",
			"Документ КАК ОсновныеСредства");
		КонецЕсли;

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеСредства.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеСредства.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоРеализованнымОС = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаДокумента Из РасчетыПоРеализованнымОС Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Ложь;

			Если СтрокаДокумента.ВидНФА = Перечисления.ВидыНФА.НПА Тогда
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчетКлиентСервер.СчетПоКоду("205.73", Документ.Дата, Документ.Организация);
			ИначеЕсли СтрокаДокумента.ВидНФА = Перечисления.ВидыНФА.НМА Тогда
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчетКлиентСервер.СчетПоКоду("205.72", Документ.Дата, Документ.Организация);
			Иначе
				НоваяСтрока.СчетРасчетов = БухгалтерскийУчетКлиентСервер.СчетПоКоду("205.71", Документ.Дата, Документ.Организация);
			КонецЕсли;

			НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);

			Если НЕ Параметры.ПоВсемКПС Тогда
				// В документах реализации в таб.части указан КПС расходов.
				// Для расчетов должен использоваться КПС доходов.
				НоваяСтрока.КПС = Параметры.КПС;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;


	// 6. Расчеты по поступлению денежных документов.
	Если МетаданныеДокумента.Имя = "ПриходныйОрдерФондовый" Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Расшифровка",
		"НомерСтроки,ИФО,КФО,КПС,ПодразделениеКор,КорСчет,Контрагент,Договор,Сумма",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	Расшифровка.НомерСтроки КАК НомерСтроки,
		|	Расшифровка.ИФО КАК ИФО,
		|	Расшифровка.КФО КАК КФО,
		|	Расшифровка.КПС КАК КПС,
		|	Расшифровка.ПодразделениеКор КАК Подразделение,
		|	Расшифровка.КорСчет КАК СчетРасчетов,
		|	Расшифровка.Контрагент КАК Контрагент,
		|	Расшифровка.Договор КАК Договор,
		|	&ВалютаРеглУчета КАК Валюта,
		|	0 КАК СуммаНДС,
		|	Расшифровка.Сумма КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаРасшифровка КАК Расшифровка";
		Запрос.УстановитьПараметр("ВалютаРеглУчета", БухгалтерскийУчетПовтИсп.ВалютаРегламентированногоУчета());

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Расшифровка.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Расшифровка.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		РасчетыПоДенежнымДокументам = Запрос.Выполнить().Выгрузить();

		Для Каждого СтрокаДокумента Из РасчетыПоДенежнымДокументам Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);

			НоваяСтрока.ЭтоПоступление = Истина;

			НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);

		КонецЦикла;

	КонецЕсли;


	// 7. Расчеты по перечислению средств в финансовые вложения.
	Если МетаданныеДокумента.Имя = "ФормированиеВложенийВФинансовыеАктивы" Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "ВложенияВФинансовыеАктивы",
		"НомерСтроки,ИФО,КФО,КПС,Подразделение,СчетУчета,Контрагент,Договор,ВалютаДокумента,Сумма",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВложенияВФинансовыеАктивы.НомерСтроки КАК НомерСтроки,
		|	ВложенияВФинансовыеАктивы.ИФО КАК ИФО,
		|	ВложенияВФинансовыеАктивы.КФО КАК КФО,
		|	ВложенияВФинансовыеАктивы.КПС КАК КПС,
		|	ВложенияВФинансовыеАктивы.Подразделение КАК Подразделение,
		|	ВложенияВФинансовыеАктивы.СчетУчета КАК СчетУчета,
		|	ВложенияВФинансовыеАктивы.Контрагент КАК Контрагент,
		|	ВложенияВФинансовыеАктивы.Договор КАК Договор,
		|	ВложенияВФинансовыеАктивы.ВалютаДокумента КАК Валюта,
		|	0 КАК СуммаНДС,
		|	ВложенияВФинансовыеАктивы.Сумма КАК СуммаРасчетов
		|ИЗ
		|	ТаблицаВложенияВФинансовыеАктивы КАК ВложенияВФинансовыеАктивы";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Расшифровка.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Расшифровка.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

			НоваяСтрока.ЭтоПоступление = Истина;

			НоваяСтрока.СчетРасчетов = УчетФинансовыхВложений.СчетРасчетовПоСчетуУчетаВложенийВФинансовыеАктивы(
			Выборка.СчетУчета, Документ.Дата, Документ.Организация);
			НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);

		КонецЦикла;

	КонецЕсли;

	// 8. Расчеты по реализации финансовых вложений.
	Если МетаданныеДокумента.Имя = "ВыбытиеФинансовыхВложений" Тогда

		ОбщегоНазначенияБГУ.ПоместитьТабЧастьВВиртуальнуюТаблицу(Запрос, "Документ",
		"ИФО,КФО,КПС,Подразделение,СчетУчета,Контрагент,Договор,ВалютаДокумента,СуммаРеализации",
		Документ, Параметры);

		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	1 КАК НомерСтроки,
		|	ВыбытиеФинансовыхВложений.ИФО КАК ИФО,
		|	ВыбытиеФинансовыхВложений.КФО КАК КФО,
		|	ВыбытиеФинансовыхВложений.КПС КАК КПС,
		|	ВыбытиеФинансовыхВложений.Подразделение КАК Подразделение,
		|	ВыбытиеФинансовыхВложений.СчетУчета КАК СчетУчета,
		|	ВыбытиеФинансовыхВложений.Контрагент КАК Контрагент,
		|	ВыбытиеФинансовыхВложений.Договор КАК Договор,
		|	ВыбытиеФинансовыхВложений.ВалютаДокумента КАК Валюта,
		|	0 КАК СуммаНДС,
		|	ВыбытиеФинансовыхВложений.СуммаРеализации КАК СуммаРасчетов
		|ИЗ
		|	Документ КАК ВыбытиеФинансовыхВложений";

		Если Параметры.ПоВсемКФО Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыбытиеФинансовыхВложений.КФО",
			"ЗНАЧЕНИЕ(Перечисление.КВД.ПустаяСсылка)");
		КонецЕсли;
		Если Параметры.ПоВсемКПС Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВыбытиеФинансовыхВложений.КПС",
			"ЗНАЧЕНИЕ(Справочник.КлассификационныеПризнакиСчетов.ПустаяСсылка)");
		КонецЕсли;

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл

			НоваяСтрока = ТаблицаРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);

			НоваяСтрока.ЭтоПоступление = Ложь;

			НоваяСтрока.СчетРасчетов = БухгалтерскийУчет.СчетПоКоду("205.75", Документ.Дата, Документ.Организация);

			Если Параметры.Свойство("КЭКРасчетов") И ЗначениеЗаполнено(Параметры.КЭКРасчетов) Тогда
				НоваяСтрока.КЭК = Параметры.КЭКРасчетов;
			Иначе
				НоваяСтрока.КЭК = БухгалтерскийУчетПовтИсп.АналитическийКЭКпоСчету(НоваяСтрока.СчетРасчетов);
			КонецЕсли;

			НоваяСтрока.КПС = Параметры.КПС;

		КонецЦикла;

	КонецЕсли;

	//Апогей-БК
	ПараметрыДопСубконто = ПолучитьПараметрыДополнительногоСубконто(Документ);
	ДобавленныеКолонкиСтрокой = ",";
	Если ПараметрыДопСубконто.КолонкиСубконто.Количество() > 0 Тогда
		
		ТаблицаРасчетов.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		НомерСтроки = 1;
		Для Каждого Строка из ТаблицаРасчетов цикл
			Строка.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаРасчетов", ТаблицаРасчетов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ ВТ_ТаблицаРасчетов
		|ИЗ
		|	&ТаблицаРасчетов КАК Т";
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.*,";
		
		Для Каждого Колонка из ПараметрыДопСубконто.КолонкиСубконто цикл
			
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ЗначениеКолонки.Значение, ЗНАЧЕНИЕ(Справочник.Субконто.ПустаяСсылка)) КАК " + Колонка.ИмяКолонки + ",";
			ДобавленныеКолонкиСтрокой = ДобавленныеКолонкиСтрокой + Колонка.ИмяКолонки + ",";
			
		КонецЦикла;
		
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Запрос.Текст, 1);
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ВТ_ТаблицаРасчетов КАК Т";
		
		НомерСвязи = 1;
		Для Каждого Колонка из ПараметрыДопСубконто.КолонкиСубконто цикл
			
			Запрос.Текст = Запрос.Текст + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияКолонокДополнительныхТабличныхЧастей КАК ЗначениеКолонки
			|	ПО ЗначениеКолонки.Объект = &Документ
			|		И ЗначениеКолонки.ТабличнаяЧасть = &ТабличнаяЧасть" + НомерСвязи + "
			|		И ЗначениеКолонки.КолонкаТабличнойЧасти = &КолонкаТабличнойЧасти" + НомерСвязи + "
			|		И Т.НомерСтроки = ЗначениеКолонки.НомерСтрокиДокумента";
			
			Запрос.УстановитьПараметр("Документ", Документ.Ссылка);
			Запрос.УстановитьПараметр("ТабличнаяЧасть" + НомерСвязи, Колонка.ТабличнаяЧасть);
			Запрос.УстановитьПараметр("КолонкаТабличнойЧасти" + НомерСвязи, Колонка.КолонкаТабличнойЧасти);

			НомерСвязи = НомерСвязи + 1;
			
		КонецЦикла;
		
		ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ДобавленныеКолонкиСтрокой, 1);
	
	ТаблицаРасчетов.Свернуть("ЭтоПоступление,ИФО,КФО,КПС,КЭК,Подразделение,СчетРасчетов,Контрагент,Договор,Валюта" + ДобавленныеКолонкиСтрокой,
								"СуммаНДС,СуммаРасчетов");
	//Апогей-БК

	Если МетаданныеДокумента.Имя = "НачислениеЗаУслугиОбразования" Тогда
		ИспользуетсяСчетАП = (Документ.Дата >= ДатаПереходаНаЗабалансовыйСчетАП(Документ.Организация));
		Если НЕ ИспользуетсяСчетАП Тогда
			// Не нужно зачитывать аванс, только долги по документам расчетов - до перевода авансов на счет АП.
			// Авансы по счету АП зачитываются в обычном порядке.
			ТаблицаРасчетов.Колонки.Добавить("СчетАвансов", Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
			Для Каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
				СтрокаРасчетов.СчетАвансов = СтрокаРасчетов.СчетРасчетов;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаРасчетов;

КонецФункции

&Вместо("ТаблицаРасчетовСЗачетомАвансов")
Функция АБК_ДопСубконтоАвансаТаблицаРасчетовСЗачетомАвансов(ТаблицаДокумента, ТаблицаЗачетАвансовПоДокументу, Реквизиты, Отказ)

	ТаблицаРасчетов = ПустаяТаблицаРасчетовСЗачетомАвансов();

	УчетнаяПолитика = БухгалтерскиеОперацииПовтИсп.УчетнаяПолитикаОрганизации(Реквизиты.Организация, Реквизиты.Дата);
	Реквизиты.Вставить("ИспользоватьУчетПоИФО",            ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоИФО"));
	Реквизиты.Вставить("ИспользоватьУчетПоПодразделениям", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоПодразделениям"));
	Реквизиты.Вставить("ИспользоватьВалютныйУчет",         ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет"));
	Реквизиты.Вставить("УчитыватьЗадолженностьЕНВД",       УчетнаяПолитика.ПрименяетсяУСН И УчетнаяПолитика.ПлательщикЕНВД);

	Если НЕ Реквизиты.Свойство("СпособЗачетаАванса") ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.СпособЗачетаАванса) Тогда
		Реквизиты.Вставить("СпособЗачетаАванса", Перечисления.СпособыЗачетаАвансов.Автоматически);
	КонецЕсли;
	Если НЕ Реквизиты.Свойство("ПоВсемКФО") Тогда
		Реквизиты.Вставить("ПоВсемКФО", Ложь);
	КонецЕсли;
	Если НЕ Реквизиты.Свойство("ПоВсемКПС") Тогда
		Реквизиты.Вставить("ПоВсемКПС", Ложь);
	КонецЕсли;
	Если НЕ Реквизиты.Свойство("ВидДеятельностиУСН") Тогда
		Реквизиты.Вставить("ВидДеятельностиУСН", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	КонецЕсли;

	ДобавитьСлужебныеКолонкиРасчетовСКонтрагентами(ТаблицаДокумента, Реквизиты);
	ДобавитьСлужебныеКолонкиРасчетовСКонтрагентами(ТаблицаЗачетАвансовПоДокументу, Реквизиты);

	ПроверитьКорректностьНастройкиСчетовРасчетов(ТаблицаДокумента, Реквизиты);

	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл

		// При поступлении ценностей по договору, по которому организация выступает налоговым агентом по НДС,
		// сумма расчетов не включает НДС, т.к. сумма НДС оплачивается в налоговую инспекцию, а не поставщику.
		Если СтрокаДокумента.ЭтоПоступление И СтрокаДокумента.УчетАгентскогоНДС Тогда

			СтрокаДокумента.СуммаРасчетов = СтрокаДокумента.СуммаРасчетов - СтрокаДокумента.СуммаНДС;

			КурсДокумента = ?(СтрокаДокумента.Кратность = 0, СтрокаДокумента.Курс,
			СтрокаДокумента.Курс / СтрокаДокумента.Кратность);
			СтрокаДокумента.СуммаРуб = СтрокаДокумента.СуммаРуб - Окр(СтрокаДокумента.СуммаНДС * КурсДокумента, 2);

		КонецЕсли;

	КонецЦикла;

	// Подготовим таблицу остатков авансов.
	Если Реквизиты.Свойство("ПериодОстатков") Тогда // Период остатков указан явно.
		ПериодОстатков = Реквизиты.ПериодОстатков;
	ИначеЕсли Не ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда // Новый документ.
		ПериодОстатков = Новый Граница(КонецДня(Реквизиты.Дата), ВидГраницы.Включая);
	Иначе
		ПериодОстатков = Новый Граница(Реквизиты.Ссылка.МоментВремени(), ВидГраницы.Исключая);
	КонецЕсли;
	ОстаткиАвансов = ОстаткиАвансов(ПериодОстатков, ТаблицаДокумента, Реквизиты);

	Если Реквизиты.СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда

		Для Каждого СтрокаДокумента Из ТаблицаЗачетАвансовПоДокументу Цикл

			НераспределенныйОстаток = СтрокаДокумента.СуммаРасчетов;

			Если ОстаткиАвансов.Количество() > 0 Тогда

				Отбор = НовыйОтборАвансов(СтрокаДокумента.СчетАвансов, СтрокаДокумента, Реквизиты);
				Отбор.Вставить("ВидДопСубконтоАвансов", ПланыВидовХарактеристик.ВидыСубконто.ДокументыРасчетов);
				Отбор.Вставить("ДопСубконтоАвансов",    СтрокаДокумента.ДокументАванса);
				НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

				ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаРасчетов,
				НераспределенныйОстаток,
				НайденныеОстаткиАвансов,
				СтрокаДокумента,
				Реквизиты);

				Если СтрокаДокумента.СчетАвансов <> СтрокаДокумента.СчетРасчетов
					И Не БухгалтерскийУчет.СчетВИерархии(СтрокаДокумента.СчетАвансов, "АП") Тогда

					// Зачет остатков долга ("аванса"), образовавшихся на счете расчетов, например, при возвратах.
					Отбор = НовыйОтборАвансов(СтрокаДокумента.СчетРасчетов, СтрокаДокумента, Реквизиты);
					НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

					ДобавитьСтрокиЗачтенныхАвансов(
					ТаблицаРасчетов,
					НераспределенныйОстаток,
					НайденныеОстаткиАвансов,
					СтрокаДокумента,
					Реквизиты);

				КонецЕсли;

			КонецЕсли;

			// При зачете авансов "по документу" нераспределенный остаток означает,
			// что указанная сумма зачета превышает остаток аванса.
			Если НераспределенныйОстаток > 0 Тогда

				ТекстОшибки = НСтр("ru='Указана сумма зачета, превышающая остаток незачтенного аванса.
				|
				|Документ аванса: ""%1""
				|Указана сумма зачета: %2 %3; Остаток аванса: %4 %3; Превышение: %5 %3'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				СтрокаДокумента.ДокументАванса,
				СтрокаДокумента.СуммаРасчетов,
				СтрокаДокумента.Валюта,
				СтрокаДокумента.СуммаРасчетов - НераспределенныйОстаток,
				НераспределенныйОстаток);

				ПолеСуммаЗачета = "ЗачетАвансов[" + Формат(СтрокаДокумента.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СуммаЗачета";
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реквизиты.Ссылка, ПолеСуммаЗачета, "Объект", Отказ);

			КонецЕсли;

		КонецЦикла;

		// Сумму расчетов, оставшуюся после зачета всех авансов, добавляем отдельной строкой.
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл

			Отбор = Новый Структура("ЭтоПоступление,ИФО,КФО,КПС,Подразделение,СчетРасчетов,СчетАвансов,Контрагент,Договор,Валюта");
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаДокумента);
			ЗачетноАвансов = ТаблицаЗачетАвансовПоДокументу.Скопировать(Отбор);

			ДобавитьСтрокуЗадолженности(
			ТаблицаРасчетов,
			СтрокаДокумента.СуммаРасчетов - ЗачетноАвансов.Итог("СуммаРасчетов"),
			СтрокаДокумента,
			Реквизиты);

		КонецЦикла;

	Иначе // Автоматически или НеЗачитывать

		ДетальныеКЭК440 = ПолучитьДетальныеКЭК440();

		//Апогей-БК
		ПараметрыДопСубконто = ПолучитьПараметрыДополнительногоСубконто(Реквизиты.Ссылка);
		ПараметрыДопСубконто.Вставить("КоличествоСтрокРасчета", ТаблицаРасчетов.Количество());
		//Апогей-БК
		
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл

			НераспределенныйОстаток = СтрокаДокумента.СуммаРасчетов;

			//Апогей-БК
			ДополнительноеСубконтоОтбор = Неопределено;
			Если ЕстьНетиповоеСубконто(СтрокаДокумента.СчетАвансов) тогда
				ВидСубконто = ПараметрыДопСубконто.СубконтоСчетов.Получить(СтрокаДокумента.СчетАвансов);
				Колонка = ПараметрыДопСубконто.КолонкиСубконто.Найти(ВидСубконто, "ВидСубконто");
				Если Колонка <> Неопределено тогда
					ДополнительноеСубконтоОтбор = СтрокаДокумента[Колонка.ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			//Апогей-БК
			
			Если Реквизиты.СпособЗачетаАванса = Перечисления.СпособыЗачетаАвансов.Автоматически
				И ОстаткиАвансов.Количество() > 0 Тогда

				Отбор = НовыйОтборАвансов(СтрокаДокумента.СчетАвансов, СтрокаДокумента, Реквизиты);
				//Апогей-БК
				Если ЗначениеЗаполнено(ДополнительноеСубконтоОтбор) тогда
					Отбор.Вставить("ДопСубконтоАвансов", ДополнительноеСубконтоОтбор);
				КонецЕсли;
				//Апогей-БК
				НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

				Если НайденныеОстаткиАвансов.Количество() = 0
					И ДетальныеКЭК440.Получить(
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "КЭК")) <> Неопределено Тогда
					// Если не найдены авансы по детальному КЭК, нужно проверить авансы по групповому КЭК
					Отбор.КЭК = БухгалтерскийУчетПовтИсп.КЭКпоКоду("440");
					НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);
				КонецЕсли;

				ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаРасчетов,
				НераспределенныйОстаток,
				НайденныеОстаткиАвансов,
				СтрокаДокумента,
				Реквизиты);

				Если СтрокаДокумента.СчетАвансов <> СтрокаДокумента.СчетРасчетов
					И Не БухгалтерскийУчет.СчетВИерархии(СтрокаДокумента.СчетАвансов, "АП") Тогда

					// Зачет остатков долга ("аванса"), образовавшихся на счете расчетов, например, при возвратах.
					Отбор = НовыйОтборАвансов(СтрокаДокумента.СчетРасчетов, СтрокаДокумента, Реквизиты);
					//Апогей-БК
					Если ЗначениеЗаполнено(ДополнительноеСубконтоОтбор) тогда
						Отбор.Вставить("ДопСубконтоАвансов", ДополнительноеСубконтоОтбор);
					КонецЕсли;
					//Апогей-БК
					НайденныеОстаткиАвансов = ОстаткиАвансов.НайтиСтроки(Отбор);

					ДобавитьСтрокиЗачтенныхАвансов(
					ТаблицаРасчетов,
					НераспределенныйОстаток,
					НайденныеОстаткиАвансов,
					СтрокаДокумента,
					Реквизиты);

				КонецЕсли;

			КонецЕсли;

			// Сумму расчетов, оставшуюся после зачета всех авансов, добавляем отдельной строкой.
			ДобавитьСтрокуЗадолженности(
			ТаблицаРасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты);
			
			//Апогей-БК
			Если ЕстьНетиповоеСубконто(СтрокаДокумента.СчетРасчетов) тогда                                                         
				ВидСубконто = ПараметрыДопСубконто.СубконтоСчетов.Получить(СтрокаДокумента.СчетРасчетов);
				Колонка = ПараметрыДопСубконто.КолонкиСубконто.Найти(ВидСубконто, "ВидСубконто");
				Значение = Неопределено;
				Если Колонка <> Неопределено тогда
					Значение = СтрокаДокумента[Колонка.ИмяКолонки];
					Для к = ПараметрыДопСубконто.КоличествоСтрокРасчета по ТаблицаРасчетов.Количество() - 1 цикл
						ТаблицаРасчетов[к].ДопСубконто302 = Значение;
						ПараметрыДопСубконто.КоличествоСтрокРасчета = ПараметрыДопСубконто.КоличествоСтрокРасчета + 1;
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
			//Апогей-БК

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаРасчетов;

КонецФункции

&Вместо("ПустаяТаблицаРасчетовСЗачетомАвансов")
Функция АБК_ДопСубконтоАвансаПустаяТаблицаРасчетовСЗачетомАвансов()

	ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2, ДопустимыйЗнак.Любой));

	ПустаяТаблица = Новый ТаблицаЗначений;

	// Признак зачета аванса. Устанавливается для строк зачтенных авансов.
	// Остаток суммы расчетов (акта, накладной), оставшийся после зачета всех авансов, добавляется в таблицу последней строкой.
	ПустаяТаблица.Колонки.Добавить("ЭтоЗачетАванса", Новый ОписаниеТипов("Булево"));
	// Общие разрезы учета.
	ПустаяТаблица.Колонки.Добавить("ИФО",            Новый ОписаниеТипов("СправочникСсылка.ИсточникиФинансовогоОбеспечения"));
	ПустаяТаблица.Колонки.Добавить("КФО",            Новый ОписаниеТипов("ПеречислениеСсылка.КВД"));
	ПустаяТаблица.Колонки.Добавить("КПС",            Новый ОписаниеТипов("СправочникСсылка.КлассификационныеПризнакиСчетов"));
	ПустаяТаблица.Колонки.Добавить("Подразделение",  Новый ОписаниеТипов("СправочникСсылка.Подразделения"));
	// Счет и аналитика учета расчетов с контрагентами.
	ПустаяТаблица.Колонки.Добавить("КЭК",                   Новый ОписаниеТипов("СправочникСсылка.КОСГУ"));
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	ПустаяТаблица.Колонки.Добавить("СчетАвансов",           Новый ОписаниеТипов("ПланСчетовСсылка.ЕПСБУ"));
	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("Договор",               Новый ОписаниеТипов("СправочникСсылка.Договоры"));
	ПустаяТаблица.Колонки.Добавить("ДопСубконтоАвансов",    Метаданные.ПланыВидовХарактеристик.ВидыСубконто.Тип);
	ПустаяТаблица.Колонки.Добавить("ВидДопСубконтоАвансов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконто"));
	ПустаяТаблица.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	// Суммы расчетов.
	ПустаяТаблица.Колонки.Добавить("ОстатокРасчетов",       ОписаниеТипаСуммы);
	ПустаяТаблица.Колонки.Добавить("СуммаРасчетов",         ОписаниеТипаСуммы);
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОписаниеТипаСуммы);
	ПустаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАванса", ОписаниеТипаСуммы);
	// Для целей налогового учета при УСН.
	ПустаяТаблица.Колонки.Добавить("СуммаЕНВДРуб",          ОписаниеТипаСуммы);
	// Дополнительные колонки.
	ПустаяТаблица.Колонки.Добавить("ВидДоговора",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ПустаяТаблица.Колонки.Добавить("РасчетыВВалюте",        Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("УчетАгентскогоНДС",     Новый ОписаниеТипов("Булево"));
	
	//Апогей-БК
	ПустаяТаблица.Колонки.Добавить("ДопСубконто302",        Метаданные.ПланыВидовХарактеристик.ВидыСубконто.Тип);
	//Апогей-БК

	Возврат ПустаяТаблица;

КонецФункции
